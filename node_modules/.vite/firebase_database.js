import {
  base64,
  base64Encode,
  createMockUserToken,
  getModularInstance,
  isMobileCordova,
  isReactNative
} from "./chunk.XASMYIHO.js";
import {
  Component,
  ComponentContainer,
  Deferred,
  LogLevel,
  Logger,
  Provider,
  Sha1,
  __assign,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  __values,
  contains,
  deepCopy,
  index_esm_default
} from "./chunk.TGFLRQX2.js";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
};

// node_modules/@firebase/database/dist/index.esm.js
var require_index_esm = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    DataSnapshot: () => DataSnapshot,
    Database: () => Database,
    OnDisconnect: () => OnDisconnect,
    Query: () => Query,
    Reference: () => Reference,
    ServerValue: () => ServerValue,
    enableLogging: () => enableLogging,
    registerDatabase: () => registerDatabase
  });
  var name = "@firebase/database";
  var version = "0.11.0";
  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var SDK_VERSION = "";
  function setSDKVersion(version2) {
    SDK_VERSION = version2;
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DOMStorageWrapper = function() {
    function DOMStorageWrapper2(domStorage_) {
      this.domStorage_ = domStorage_;
      this.prefix_ = "firebase:";
    }
    DOMStorageWrapper2.prototype.set = function(key, value) {
      if (value == null) {
        this.domStorage_.removeItem(this.prefixedName_(key));
      } else {
        this.domStorage_.setItem(this.prefixedName_(key), stringify(value));
      }
    };
    DOMStorageWrapper2.prototype.get = function(key) {
      var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
      if (storedVal == null) {
        return null;
      } else {
        return jsonEval(storedVal);
      }
    };
    DOMStorageWrapper2.prototype.remove = function(key) {
      this.domStorage_.removeItem(this.prefixedName_(key));
    };
    DOMStorageWrapper2.prototype.prefixedName_ = function(name2) {
      return this.prefix_ + name2;
    };
    DOMStorageWrapper2.prototype.toString = function() {
      return this.domStorage_.toString();
    };
    return DOMStorageWrapper2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var MemoryStorage = function() {
    function MemoryStorage2() {
      this.cache_ = {};
      this.isInMemoryStorage = true;
    }
    MemoryStorage2.prototype.set = function(key, value) {
      if (value == null) {
        delete this.cache_[key];
      } else {
        this.cache_[key] = value;
      }
    };
    MemoryStorage2.prototype.get = function(key) {
      if (contains(this.cache_, key)) {
        return this.cache_[key];
      }
      return null;
    };
    MemoryStorage2.prototype.remove = function(key) {
      delete this.cache_[key];
    };
    return MemoryStorage2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var createStoragefor = function(domStorageName) {
    try {
      if (typeof window !== "undefined" && typeof window[domStorageName] !== "undefined") {
        var domStorage = window[domStorageName];
        domStorage.setItem("firebase:sentinel", "cache");
        domStorage.removeItem("firebase:sentinel");
        return new DOMStorageWrapper(domStorage);
      }
    } catch (e) {
    }
    return new MemoryStorage();
  };
  var PersistentStorage = createStoragefor("localStorage");
  var SessionStorage = createStoragefor("sessionStorage");
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var logClient = new Logger("@firebase/database");
  var LUIDGenerator = function() {
    var id = 1;
    return function() {
      return id++;
    };
  }();
  var sha1 = function(str) {
    var utf8Bytes = stringToByteArray(str);
    var sha12 = new Sha1();
    sha12.update(utf8Bytes);
    var sha1Bytes = sha12.digest();
    return base64.encodeByteArray(sha1Bytes);
  };
  var buildLogMessage_ = function() {
    var varArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      varArgs[_i] = arguments[_i];
    }
    var message = "";
    for (var i = 0; i < varArgs.length; i++) {
      var arg = varArgs[i];
      if (Array.isArray(arg) || arg && typeof arg === "object" && typeof arg.length === "number") {
        message += buildLogMessage_.apply(null, arg);
      } else if (typeof arg === "object") {
        message += stringify(arg);
      } else {
        message += arg;
      }
      message += " ";
    }
    return message;
  };
  var logger = null;
  var firstLog_ = true;
  var enableLogging = function(logger_, persistent) {
    assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
    if (logger_ === true) {
      logClient.logLevel = LogLevel.VERBOSE;
      logger = logClient.log.bind(logClient);
      if (persistent) {
        SessionStorage.set("logging_enabled", true);
      }
    } else if (typeof logger_ === "function") {
      logger = logger_;
    } else {
      logger = null;
      SessionStorage.remove("logging_enabled");
    }
  };
  var log = function() {
    var varArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      varArgs[_i] = arguments[_i];
    }
    if (firstLog_ === true) {
      firstLog_ = false;
      if (logger === null && SessionStorage.get("logging_enabled") === true) {
        enableLogging(true);
      }
    }
    if (logger) {
      var message = buildLogMessage_.apply(null, varArgs);
      logger(message);
    }
  };
  var logWrapper = function(prefix) {
    return function() {
      var varArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        varArgs[_i] = arguments[_i];
      }
      log.apply(void 0, __spreadArray([prefix], __read(varArgs)));
    };
  };
  var error = function() {
    var varArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      varArgs[_i] = arguments[_i];
    }
    var message = "FIREBASE INTERNAL ERROR: " + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));
    logClient.error(message);
  };
  var fatal = function() {
    var varArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      varArgs[_i] = arguments[_i];
    }
    var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));
    logClient.error(message);
    throw new Error(message);
  };
  var warn = function() {
    var varArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      varArgs[_i] = arguments[_i];
    }
    var message = "FIREBASE WARNING: " + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));
    logClient.warn(message);
  };
  var warnIfPageIsSecure = function() {
    if (typeof window !== "undefined" && window.location && window.location.protocol && window.location.protocol.indexOf("https:") !== -1) {
      warn("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
    }
  };
  var isInvalidJSONNumber = function(data) {
    return typeof data === "number" && (data !== data || data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
  };
  var executeWhenDOMReady = function(fn) {
    if (isNodeSdk() || document.readyState === "complete") {
      fn();
    } else {
      var called_1 = false;
      var wrappedFn_1 = function() {
        if (!document.body) {
          setTimeout(wrappedFn_1, Math.floor(10));
          return;
        }
        if (!called_1) {
          called_1 = true;
          fn();
        }
      };
      if (document.addEventListener) {
        document.addEventListener("DOMContentLoaded", wrappedFn_1, false);
        window.addEventListener("load", wrappedFn_1, false);
      } else if (document.attachEvent) {
        document.attachEvent("onreadystatechange", function() {
          if (document.readyState === "complete") {
            wrappedFn_1();
          }
        });
        window.attachEvent("onload", wrappedFn_1);
      }
    }
  };
  var MIN_NAME = "[MIN_NAME]";
  var MAX_NAME = "[MAX_NAME]";
  var nameCompare = function(a, b) {
    if (a === b) {
      return 0;
    } else if (a === MIN_NAME || b === MAX_NAME) {
      return -1;
    } else if (b === MIN_NAME || a === MAX_NAME) {
      return 1;
    } else {
      var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
      if (aAsInt !== null) {
        if (bAsInt !== null) {
          return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
        } else {
          return -1;
        }
      } else if (bAsInt !== null) {
        return 1;
      } else {
        return a < b ? -1 : 1;
      }
    }
  };
  var stringCompare = function(a, b) {
    if (a === b) {
      return 0;
    } else if (a < b) {
      return -1;
    } else {
      return 1;
    }
  };
  var requireKey = function(key, obj) {
    if (obj && key in obj) {
      return obj[key];
    } else {
      throw new Error("Missing required key (" + key + ") in object: " + stringify(obj));
    }
  };
  var ObjectToUniqueKey = function(obj) {
    if (typeof obj !== "object" || obj === null) {
      return stringify(obj);
    }
    var keys = [];
    for (var k in obj) {
      keys.push(k);
    }
    keys.sort();
    var key = "{";
    for (var i = 0; i < keys.length; i++) {
      if (i !== 0) {
        key += ",";
      }
      key += stringify(keys[i]);
      key += ":";
      key += ObjectToUniqueKey(obj[keys[i]]);
    }
    key += "}";
    return key;
  };
  var splitStringBySize = function(str, segsize) {
    var len = str.length;
    if (len <= segsize) {
      return [str];
    }
    var dataSegs = [];
    for (var c = 0; c < len; c += segsize) {
      if (c + segsize > len) {
        dataSegs.push(str.substring(c, len));
      } else {
        dataSegs.push(str.substring(c, c + segsize));
      }
    }
    return dataSegs;
  };
  function each(obj, fn) {
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn(key, obj[key]);
      }
    }
  }
  var doubleToIEEE754String = function(v) {
    assert(!isInvalidJSONNumber(v), "Invalid JSON number");
    var ebits = 11, fbits = 52;
    var bias = (1 << ebits - 1) - 1;
    var s, e, f, ln, i;
    if (v === 0) {
      e = 0;
      f = 0;
      s = 1 / v === -Infinity ? 1 : 0;
    } else {
      s = v < 0;
      v = Math.abs(v);
      if (v >= Math.pow(2, 1 - bias)) {
        ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
        e = ln + bias;
        f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
      } else {
        e = 0;
        f = Math.round(v / Math.pow(2, 1 - bias - fbits));
      }
    }
    var bits = [];
    for (i = fbits; i; i -= 1) {
      bits.push(f % 2 ? 1 : 0);
      f = Math.floor(f / 2);
    }
    for (i = ebits; i; i -= 1) {
      bits.push(e % 2 ? 1 : 0);
      e = Math.floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    var str = bits.join("");
    var hexByteString = "";
    for (i = 0; i < 64; i += 8) {
      var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
      if (hexByte.length === 1) {
        hexByte = "0" + hexByte;
      }
      hexByteString = hexByteString + hexByte;
    }
    return hexByteString.toLowerCase();
  };
  var isChromeExtensionContentScript = function() {
    return !!(typeof window === "object" && window["chrome"] && window["chrome"]["extension"] && !/^chrome/.test(window.location.href));
  };
  var isWindowsStoreApp = function() {
    return typeof Windows === "object" && typeof Windows.UI === "object";
  };
  function errorForServerCode(code, query2) {
    var reason = "Unknown Error";
    if (code === "too_big") {
      reason = "The data requested exceeds the maximum size that can be accessed with a single request.";
    } else if (code === "permission_denied") {
      reason = "Client doesn't have permission to access the desired data.";
    } else if (code === "unavailable") {
      reason = "The service is unavailable";
    }
    var error2 = new Error(code + " at " + query2._path.toString() + ": " + reason);
    error2.code = code.toUpperCase();
    return error2;
  }
  var INTEGER_REGEXP_ = new RegExp("^-?(0*)\\d{1,10}$");
  var INTEGER_32_MIN = -2147483648;
  var INTEGER_32_MAX = 2147483647;
  var tryParseInt = function(str) {
    if (INTEGER_REGEXP_.test(str)) {
      var intVal = Number(str);
      if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
        return intVal;
      }
    }
    return null;
  };
  var exceptionGuard = function(fn) {
    try {
      fn();
    } catch (e) {
      setTimeout(function() {
        var stack = e.stack || "";
        warn("Exception was thrown by user callback.", stack);
        throw e;
      }, Math.floor(0));
    }
  };
  var beingCrawled = function() {
    var userAgent = typeof window === "object" && window["navigator"] && window["navigator"]["userAgent"] || "";
    return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
  };
  var setTimeoutNonBlocking = function(fn, time) {
    var timeout = setTimeout(fn, time);
    if (typeof timeout === "object" && timeout["unref"]) {
      timeout["unref"]();
    }
    return timeout;
  };
  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var AppCheckTokenProvider = function() {
    function AppCheckTokenProvider2(appName_, appCheckProvider) {
      var _this = this;
      this.appName_ = appName_;
      this.appCheckProvider = appCheckProvider;
      this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({optional: true});
      if (!this.appCheck) {
        appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(function(appCheck) {
          return _this.appCheck = appCheck;
        });
      }
    }
    AppCheckTokenProvider2.prototype.getToken = function(forceRefresh) {
      var _this = this;
      if (!this.appCheck) {
        return new Promise(function(resolve, reject) {
          setTimeout(function() {
            if (_this.appCheck) {
              _this.getToken(forceRefresh).then(resolve, reject);
            } else {
              resolve(null);
            }
          }, 0);
        });
      }
      return this.appCheck.getToken(forceRefresh);
    };
    AppCheckTokenProvider2.prototype.addTokenChangeListener = function(listener) {
      var _a;
      (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(function(appCheck) {
        return appCheck.addTokenListener(listener);
      });
    };
    AppCheckTokenProvider2.prototype.notifyForInvalidToken = function() {
      warn('Provided AppCheck credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not initialized correctly.');
    };
    return AppCheckTokenProvider2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var FirebaseAuthTokenProvider = function() {
    function FirebaseAuthTokenProvider2(appName_, firebaseOptions_, authProvider_) {
      var _this = this;
      this.appName_ = appName_;
      this.firebaseOptions_ = firebaseOptions_;
      this.authProvider_ = authProvider_;
      this.auth_ = null;
      this.auth_ = authProvider_.getImmediate({optional: true});
      if (!this.auth_) {
        authProvider_.onInit(function(auth) {
          return _this.auth_ = auth;
        });
      }
    }
    FirebaseAuthTokenProvider2.prototype.getToken = function(forceRefresh) {
      var _this = this;
      if (!this.auth_) {
        return new Promise(function(resolve, reject) {
          setTimeout(function() {
            if (_this.auth_) {
              _this.getToken(forceRefresh).then(resolve, reject);
            } else {
              resolve(null);
            }
          }, 0);
        });
      }
      return this.auth_.getToken(forceRefresh).catch(function(error2) {
        if (error2 && error2.code === "auth/token-not-initialized") {
          log("Got auth/token-not-initialized error.  Treating as null token.");
          return null;
        } else {
          return Promise.reject(error2);
        }
      });
    };
    FirebaseAuthTokenProvider2.prototype.addTokenChangeListener = function(listener) {
      if (this.auth_) {
        this.auth_.addAuthTokenListener(listener);
      } else {
        this.authProvider_.get().then(function(auth) {
          return auth.addAuthTokenListener(listener);
        });
      }
    };
    FirebaseAuthTokenProvider2.prototype.removeTokenChangeListener = function(listener) {
      this.authProvider_.get().then(function(auth) {
        return auth.removeAuthTokenListener(listener);
      });
    };
    FirebaseAuthTokenProvider2.prototype.notifyForInvalidToken = function() {
      var errorMessage = 'Provided authentication credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not initialized correctly. ';
      if ("credential" in this.firebaseOptions_) {
        errorMessage += 'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
      } else if ("serviceAccount" in this.firebaseOptions_) {
        errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
      } else {
        errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.';
      }
      warn(errorMessage);
    };
    return FirebaseAuthTokenProvider2;
  }();
  var EmulatorTokenProvider = function() {
    function EmulatorTokenProvider2(accessToken) {
      this.accessToken = accessToken;
    }
    EmulatorTokenProvider2.prototype.getToken = function(forceRefresh) {
      return Promise.resolve({
        accessToken: this.accessToken
      });
    };
    EmulatorTokenProvider2.prototype.addTokenChangeListener = function(listener) {
      listener(this.accessToken);
    };
    EmulatorTokenProvider2.prototype.removeTokenChangeListener = function(listener) {
    };
    EmulatorTokenProvider2.prototype.notifyForInvalidToken = function() {
    };
    EmulatorTokenProvider2.OWNER = "owner";
    return EmulatorTokenProvider2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PROTOCOL_VERSION = "5";
  var VERSION_PARAM = "v";
  var TRANSPORT_SESSION_PARAM = "s";
  var REFERER_PARAM = "r";
  var FORGE_REF = "f";
  var FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
  var LAST_SESSION_PARAM = "ls";
  var APPLICATION_ID_PARAM = "p";
  var APP_CHECK_TOKEN_PARAM = "ac";
  var WEBSOCKET = "websocket";
  var LONG_POLLING = "long_polling";
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var RepoInfo = function() {
    function RepoInfo2(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {
      if (nodeAdmin === void 0) {
        nodeAdmin = false;
      }
      if (persistenceKey === void 0) {
        persistenceKey = "";
      }
      if (includeNamespaceInQueryParams === void 0) {
        includeNamespaceInQueryParams = false;
      }
      this.secure = secure;
      this.namespace = namespace;
      this.webSocketOnly = webSocketOnly;
      this.nodeAdmin = nodeAdmin;
      this.persistenceKey = persistenceKey;
      this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
      this._host = host.toLowerCase();
      this._domain = this._host.substr(this._host.indexOf(".") + 1);
      this.internalHost = PersistentStorage.get("host:" + host) || this._host;
    }
    RepoInfo2.prototype.isCacheableHost = function() {
      return this.internalHost.substr(0, 2) === "s-";
    };
    RepoInfo2.prototype.isCustomHost = function() {
      return this._domain !== "firebaseio.com" && this._domain !== "firebaseio-demo.com";
    };
    Object.defineProperty(RepoInfo2.prototype, "host", {
      get: function() {
        return this._host;
      },
      set: function(newHost) {
        if (newHost !== this.internalHost) {
          this.internalHost = newHost;
          if (this.isCacheableHost()) {
            PersistentStorage.set("host:" + this._host, this.internalHost);
          }
        }
      },
      enumerable: false,
      configurable: true
    });
    RepoInfo2.prototype.toString = function() {
      var str = this.toURLString();
      if (this.persistenceKey) {
        str += "<" + this.persistenceKey + ">";
      }
      return str;
    };
    RepoInfo2.prototype.toURLString = function() {
      var protocol = this.secure ? "https://" : "http://";
      var query2 = this.includeNamespaceInQueryParams ? "?ns=" + this.namespace : "";
      return "" + protocol + this.host + "/" + query2;
    };
    return RepoInfo2;
  }();
  function repoInfoNeedsQueryParam(repoInfo) {
    return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;
  }
  function repoInfoConnectionURL(repoInfo, type, params) {
    assert(typeof type === "string", "typeof type must == string");
    assert(typeof params === "object", "typeof params must == object");
    var connURL;
    if (type === WEBSOCKET) {
      connURL = (repoInfo.secure ? "wss://" : "ws://") + repoInfo.internalHost + "/.ws?";
    } else if (type === LONG_POLLING) {
      connURL = (repoInfo.secure ? "https://" : "http://") + repoInfo.internalHost + "/.lp?";
    } else {
      throw new Error("Unknown connection type: " + type);
    }
    if (repoInfoNeedsQueryParam(repoInfo)) {
      params["ns"] = repoInfo.namespace;
    }
    var pairs = [];
    each(params, function(key, value) {
      pairs.push(key + "=" + value);
    });
    return connURL + pairs.join("&");
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var StatsCollection = function() {
    function StatsCollection2() {
      this.counters_ = {};
    }
    StatsCollection2.prototype.incrementCounter = function(name2, amount) {
      if (amount === void 0) {
        amount = 1;
      }
      if (!contains(this.counters_, name2)) {
        this.counters_[name2] = 0;
      }
      this.counters_[name2] += amount;
    };
    StatsCollection2.prototype.get = function() {
      return deepCopy(this.counters_);
    };
    return StatsCollection2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var collections = {};
  var reporters = {};
  function statsManagerGetCollection(repoInfo) {
    var hashString = repoInfo.toString();
    if (!collections[hashString]) {
      collections[hashString] = new StatsCollection();
    }
    return collections[hashString];
  }
  function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
    var hashString = repoInfo.toString();
    if (!reporters[hashString]) {
      reporters[hashString] = creatorFunction();
    }
    return reporters[hashString];
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PacketReceiver = function() {
    function PacketReceiver2(onMessage_) {
      this.onMessage_ = onMessage_;
      this.pendingResponses = [];
      this.currentResponseNum = 0;
      this.closeAfterResponse = -1;
      this.onClose = null;
    }
    PacketReceiver2.prototype.closeAfter = function(responseNum, callback) {
      this.closeAfterResponse = responseNum;
      this.onClose = callback;
      if (this.closeAfterResponse < this.currentResponseNum) {
        this.onClose();
        this.onClose = null;
      }
    };
    PacketReceiver2.prototype.handleResponse = function(requestNum, data) {
      var _this = this;
      this.pendingResponses[requestNum] = data;
      var _loop_1 = function() {
        var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
        delete this_1.pendingResponses[this_1.currentResponseNum];
        var _loop_2 = function(i2) {
          if (toProcess[i2]) {
            exceptionGuard(function() {
              _this.onMessage_(toProcess[i2]);
            });
          }
        };
        for (var i = 0; i < toProcess.length; ++i) {
          _loop_2(i);
        }
        if (this_1.currentResponseNum === this_1.closeAfterResponse) {
          if (this_1.onClose) {
            this_1.onClose();
            this_1.onClose = null;
          }
          return "break";
        }
        this_1.currentResponseNum++;
      };
      var this_1 = this;
      while (this.pendingResponses[this.currentResponseNum]) {
        var state_1 = _loop_1();
        if (state_1 === "break")
          break;
      }
    };
    return PacketReceiver2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var FIREBASE_LONGPOLL_START_PARAM = "start";
  var FIREBASE_LONGPOLL_CLOSE_COMMAND = "close";
  var FIREBASE_LONGPOLL_COMMAND_CB_NAME = "pLPCommand";
  var FIREBASE_LONGPOLL_DATA_CB_NAME = "pRTLPCB";
  var FIREBASE_LONGPOLL_ID_PARAM = "id";
  var FIREBASE_LONGPOLL_PW_PARAM = "pw";
  var FIREBASE_LONGPOLL_SERIAL_PARAM = "ser";
  var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = "cb";
  var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = "seg";
  var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = "ts";
  var FIREBASE_LONGPOLL_DATA_PARAM = "d";
  var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = "dframe";
  var MAX_URL_DATA_SIZE = 1870;
  var SEG_HEADER_SIZE = 30;
  var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
  var KEEPALIVE_REQUEST_INTERVAL = 25e3;
  var LP_CONNECT_TIMEOUT = 3e4;
  var BrowserPollConnection = function() {
    function BrowserPollConnection2(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
      var _this = this;
      this.connId = connId;
      this.repoInfo = repoInfo;
      this.applicationId = applicationId;
      this.appCheckToken = appCheckToken;
      this.authToken = authToken;
      this.transportSessionId = transportSessionId;
      this.lastSessionId = lastSessionId;
      this.bytesSent = 0;
      this.bytesReceived = 0;
      this.everConnected_ = false;
      this.log_ = logWrapper(connId);
      this.stats_ = statsManagerGetCollection(repoInfo);
      this.urlFn = function(params) {
        if (_this.appCheckToken) {
          params[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
        }
        return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
      };
    }
    BrowserPollConnection2.prototype.open = function(onMessage, onDisconnect) {
      var _this = this;
      this.curSegmentNum = 0;
      this.onDisconnect_ = onDisconnect;
      this.myPacketOrderer = new PacketReceiver(onMessage);
      this.isClosed_ = false;
      this.connectTimeoutTimer_ = setTimeout(function() {
        _this.log_("Timed out trying to connect.");
        _this.onClosed_();
        _this.connectTimeoutTimer_ = null;
      }, Math.floor(LP_CONNECT_TIMEOUT));
      executeWhenDOMReady(function() {
        if (_this.isClosed_) {
          return;
        }
        _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var _a = __read(args, 5), command = _a[0], arg1 = _a[1], arg2 = _a[2];
          _a[3];
          _a[4];
          _this.incrementIncomingBytes_(args);
          if (!_this.scriptTagHolder) {
            return;
          }
          if (_this.connectTimeoutTimer_) {
            clearTimeout(_this.connectTimeoutTimer_);
            _this.connectTimeoutTimer_ = null;
          }
          _this.everConnected_ = true;
          if (command === FIREBASE_LONGPOLL_START_PARAM) {
            _this.id = arg1;
            _this.password = arg2;
          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
            if (arg1) {
              _this.scriptTagHolder.sendNewPolls = false;
              _this.myPacketOrderer.closeAfter(arg1, function() {
                _this.onClosed_();
              });
            } else {
              _this.onClosed_();
            }
          } else {
            throw new Error("Unrecognized command received: " + command);
          }
        }, function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var _a = __read(args, 2), pN = _a[0], data = _a[1];
          _this.incrementIncomingBytes_(args);
          _this.myPacketOrderer.handleResponse(pN, data);
        }, function() {
          _this.onClosed_();
        }, _this.urlFn);
        var urlParams = {};
        urlParams[FIREBASE_LONGPOLL_START_PARAM] = "t";
        urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 1e8);
        if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
          urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
        }
        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
        if (_this.transportSessionId) {
          urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
        }
        if (_this.lastSessionId) {
          urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
        }
        if (_this.applicationId) {
          urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
        }
        if (_this.appCheckToken) {
          urlParams[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
        }
        if (typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
          urlParams[REFERER_PARAM] = FORGE_REF;
        }
        var connectURL = _this.urlFn(urlParams);
        _this.log_("Connecting via long-poll to " + connectURL);
        _this.scriptTagHolder.addTag(connectURL, function() {
        });
      });
    };
    BrowserPollConnection2.prototype.start = function() {
      this.scriptTagHolder.startLongPoll(this.id, this.password);
      this.addDisconnectPingFrame(this.id, this.password);
    };
    BrowserPollConnection2.forceAllow = function() {
      BrowserPollConnection2.forceAllow_ = true;
    };
    BrowserPollConnection2.forceDisallow = function() {
      BrowserPollConnection2.forceDisallow_ = true;
    };
    BrowserPollConnection2.isAvailable = function() {
      if (isNodeSdk()) {
        return false;
      } else if (BrowserPollConnection2.forceAllow_) {
        return true;
      } else {
        return !BrowserPollConnection2.forceDisallow_ && typeof document !== "undefined" && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();
      }
    };
    BrowserPollConnection2.prototype.markConnectionHealthy = function() {
    };
    BrowserPollConnection2.prototype.shutdown_ = function() {
      this.isClosed_ = true;
      if (this.scriptTagHolder) {
        this.scriptTagHolder.close();
        this.scriptTagHolder = null;
      }
      if (this.myDisconnFrame) {
        document.body.removeChild(this.myDisconnFrame);
        this.myDisconnFrame = null;
      }
      if (this.connectTimeoutTimer_) {
        clearTimeout(this.connectTimeoutTimer_);
        this.connectTimeoutTimer_ = null;
      }
    };
    BrowserPollConnection2.prototype.onClosed_ = function() {
      if (!this.isClosed_) {
        this.log_("Longpoll is closing itself");
        this.shutdown_();
        if (this.onDisconnect_) {
          this.onDisconnect_(this.everConnected_);
          this.onDisconnect_ = null;
        }
      }
    };
    BrowserPollConnection2.prototype.close = function() {
      if (!this.isClosed_) {
        this.log_("Longpoll is being closed.");
        this.shutdown_();
      }
    };
    BrowserPollConnection2.prototype.send = function(data) {
      var dataStr = stringify(data);
      this.bytesSent += dataStr.length;
      this.stats_.incrementCounter("bytes_sent", dataStr.length);
      var base64data = base64Encode(dataStr);
      var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
      for (var i = 0; i < dataSegs.length; i++) {
        this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
        this.curSegmentNum++;
      }
    };
    BrowserPollConnection2.prototype.addDisconnectPingFrame = function(id, pw) {
      if (isNodeSdk()) {
        return;
      }
      this.myDisconnFrame = document.createElement("iframe");
      var urlParams = {};
      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = "t";
      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
      this.myDisconnFrame.src = this.urlFn(urlParams);
      this.myDisconnFrame.style.display = "none";
      document.body.appendChild(this.myDisconnFrame);
    };
    BrowserPollConnection2.prototype.incrementIncomingBytes_ = function(args) {
      var bytesReceived = stringify(args).length;
      this.bytesReceived += bytesReceived;
      this.stats_.incrementCounter("bytes_received", bytesReceived);
    };
    return BrowserPollConnection2;
  }();
  var FirebaseIFrameScriptHolder = function() {
    function FirebaseIFrameScriptHolder2(commandCB, onMessageCB, onDisconnect, urlFn) {
      this.onDisconnect = onDisconnect;
      this.urlFn = urlFn;
      this.outstandingRequests = new Set();
      this.pendingSegs = [];
      this.currentSerial = Math.floor(Math.random() * 1e8);
      this.sendNewPolls = true;
      if (!isNodeSdk()) {
        this.uniqueCallbackIdentifier = LUIDGenerator();
        window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
        window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
        this.myIFrame = FirebaseIFrameScriptHolder2.createIFrame_();
        var script = "";
        if (this.myIFrame.src && this.myIFrame.src.substr(0, "javascript:".length) === "javascript:") {
          var currentDomain = document.domain;
          script = '<script>document.domain="' + currentDomain + '";</script>';
        }
        var iframeContents = "<html><body>" + script + "</body></html>";
        try {
          this.myIFrame.doc.open();
          this.myIFrame.doc.write(iframeContents);
          this.myIFrame.doc.close();
        } catch (e) {
          log("frame writing exception");
          if (e.stack) {
            log(e.stack);
          }
          log(e);
        }
      } else {
        this.commandCB = commandCB;
        this.onMessageCB = onMessageCB;
      }
    }
    FirebaseIFrameScriptHolder2.createIFrame_ = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      if (document.body) {
        document.body.appendChild(iframe);
        try {
          var a = iframe.contentWindow.document;
          if (!a) {
            log("No IE domain setting required");
          }
        } catch (e) {
          var domain = document.domain;
          iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
        }
      } else {
        throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
      }
      if (iframe.contentDocument) {
        iframe.doc = iframe.contentDocument;
      } else if (iframe.contentWindow) {
        iframe.doc = iframe.contentWindow.document;
      } else if (iframe.document) {
        iframe.doc = iframe.document;
      }
      return iframe;
    };
    FirebaseIFrameScriptHolder2.prototype.close = function() {
      var _this = this;
      this.alive = false;
      if (this.myIFrame) {
        this.myIFrame.doc.body.innerHTML = "";
        setTimeout(function() {
          if (_this.myIFrame !== null) {
            document.body.removeChild(_this.myIFrame);
            _this.myIFrame = null;
          }
        }, Math.floor(0));
      }
      var onDisconnect = this.onDisconnect;
      if (onDisconnect) {
        this.onDisconnect = null;
        onDisconnect();
      }
    };
    FirebaseIFrameScriptHolder2.prototype.startLongPoll = function(id, pw) {
      this.myID = id;
      this.myPW = pw;
      this.alive = true;
      while (this.newRequest_()) {
      }
    };
    FirebaseIFrameScriptHolder2.prototype.newRequest_ = function() {
      if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
        this.currentSerial++;
        var urlParams = {};
        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
        urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
        var theURL = this.urlFn(urlParams);
        var curDataString = "";
        var i = 0;
        while (this.pendingSegs.length > 0) {
          var nextSeg = this.pendingSegs[0];
          if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
            var theSeg = this.pendingSegs.shift();
            curDataString = curDataString + "&" + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + "=" + theSeg.seg + "&" + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + "=" + theSeg.ts + "&" + FIREBASE_LONGPOLL_DATA_PARAM + i + "=" + theSeg.d;
            i++;
          } else {
            break;
          }
        }
        theURL = theURL + curDataString;
        this.addLongPollTag_(theURL, this.currentSerial);
        return true;
      } else {
        return false;
      }
    };
    FirebaseIFrameScriptHolder2.prototype.enqueueSegment = function(segnum, totalsegs, data) {
      this.pendingSegs.push({seg: segnum, ts: totalsegs, d: data});
      if (this.alive) {
        this.newRequest_();
      }
    };
    FirebaseIFrameScriptHolder2.prototype.addLongPollTag_ = function(url, serial) {
      var _this = this;
      this.outstandingRequests.add(serial);
      var doNewRequest = function() {
        _this.outstandingRequests.delete(serial);
        _this.newRequest_();
      };
      var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
      var readyStateCB = function() {
        clearTimeout(keepaliveTimeout);
        doNewRequest();
      };
      this.addTag(url, readyStateCB);
    };
    FirebaseIFrameScriptHolder2.prototype.addTag = function(url, loadCB) {
      var _this = this;
      if (isNodeSdk()) {
        this.doNodeLongPoll(url, loadCB);
      } else {
        setTimeout(function() {
          try {
            if (!_this.sendNewPolls) {
              return;
            }
            var newScript_1 = _this.myIFrame.doc.createElement("script");
            newScript_1.type = "text/javascript";
            newScript_1.async = true;
            newScript_1.src = url;
            newScript_1.onload = newScript_1.onreadystatechange = function() {
              var rstate = newScript_1.readyState;
              if (!rstate || rstate === "loaded" || rstate === "complete") {
                newScript_1.onload = newScript_1.onreadystatechange = null;
                if (newScript_1.parentNode) {
                  newScript_1.parentNode.removeChild(newScript_1);
                }
                loadCB();
              }
            };
            newScript_1.onerror = function() {
              log("Long-poll script failed to load: " + url);
              _this.sendNewPolls = false;
              _this.close();
            };
            _this.myIFrame.doc.body.appendChild(newScript_1);
          } catch (e) {
          }
        }, Math.floor(1));
      }
    };
    return FirebaseIFrameScriptHolder2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var WEBSOCKET_MAX_FRAME_SIZE = 16384;
  var WEBSOCKET_KEEPALIVE_INTERVAL = 45e3;
  var WebSocketImpl = null;
  if (typeof MozWebSocket !== "undefined") {
    WebSocketImpl = MozWebSocket;
  } else if (typeof WebSocket !== "undefined") {
    WebSocketImpl = WebSocket;
  }
  var WebSocketConnection = function() {
    function WebSocketConnection2(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
      this.connId = connId;
      this.applicationId = applicationId;
      this.appCheckToken = appCheckToken;
      this.authToken = authToken;
      this.keepaliveTimer = null;
      this.frames = null;
      this.totalFrames = 0;
      this.bytesSent = 0;
      this.bytesReceived = 0;
      this.log_ = logWrapper(this.connId);
      this.stats_ = statsManagerGetCollection(repoInfo);
      this.connURL = WebSocketConnection2.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);
      this.nodeAdmin = repoInfo.nodeAdmin;
    }
    WebSocketConnection2.connectionURL_ = function(repoInfo, transportSessionId, lastSessionId, appCheckToken) {
      var urlParams = {};
      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
      if (!isNodeSdk() && typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
        urlParams[REFERER_PARAM] = FORGE_REF;
      }
      if (transportSessionId) {
        urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
      }
      if (lastSessionId) {
        urlParams[LAST_SESSION_PARAM] = lastSessionId;
      }
      if (appCheckToken) {
        urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
      }
      return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
    };
    WebSocketConnection2.prototype.open = function(onMessage, onDisconnect) {
      var _this = this;
      this.onDisconnect = onDisconnect;
      this.onMessage = onMessage;
      this.log_("Websocket connecting to " + this.connURL);
      this.everConnected_ = false;
      PersistentStorage.set("previous_websocket_failure", true);
      try {
        if (isNodeSdk()) {
          var device = this.nodeAdmin ? "AdminNode" : "Node";
          var options = {
            headers: {
              "User-Agent": "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device,
              "X-Firebase-GMPID": this.applicationId || ""
            }
          };
          if (this.authToken) {
            options.headers["Authorization"] = "Bearer " + this.authToken;
          }
          if (this.appCheckToken) {
            options.headers["X-Firebase-AppCheck"] = this.appCheckToken;
          }
          var env = process["env"];
          var proxy = this.connURL.indexOf("wss://") === 0 ? env["HTTPS_PROXY"] || env["https_proxy"] : env["HTTP_PROXY"] || env["http_proxy"];
          if (proxy) {
            options["proxy"] = {origin: proxy};
          }
          this.mySock = new WebSocketImpl(this.connURL, [], options);
        } else {
          var options = {
            headers: {
              "X-Firebase-GMPID": this.applicationId || "",
              "X-Firebase-AppCheck": this.appCheckToken || ""
            }
          };
          this.mySock = new WebSocketImpl(this.connURL, [], options);
        }
      } catch (e) {
        this.log_("Error instantiating WebSocket.");
        var error2 = e.message || e.data;
        if (error2) {
          this.log_(error2);
        }
        this.onClosed_();
        return;
      }
      this.mySock.onopen = function() {
        _this.log_("Websocket connected.");
        _this.everConnected_ = true;
      };
      this.mySock.onclose = function() {
        _this.log_("Websocket connection was disconnected.");
        _this.mySock = null;
        _this.onClosed_();
      };
      this.mySock.onmessage = function(m) {
        _this.handleIncomingFrame(m);
      };
      this.mySock.onerror = function(e) {
        _this.log_("WebSocket error.  Closing connection.");
        var error3 = e.message || e.data;
        if (error3) {
          _this.log_(error3);
        }
        _this.onClosed_();
      };
    };
    WebSocketConnection2.prototype.start = function() {
    };
    WebSocketConnection2.forceDisallow = function() {
      WebSocketConnection2.forceDisallow_ = true;
    };
    WebSocketConnection2.isAvailable = function() {
      var isOldAndroid = false;
      if (typeof navigator !== "undefined" && navigator.userAgent) {
        var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
        var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
        if (oldAndroidMatch && oldAndroidMatch.length > 1) {
          if (parseFloat(oldAndroidMatch[1]) < 4.4) {
            isOldAndroid = true;
          }
        }
      }
      return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection2.forceDisallow_;
    };
    WebSocketConnection2.previouslyFailed = function() {
      return PersistentStorage.isInMemoryStorage || PersistentStorage.get("previous_websocket_failure") === true;
    };
    WebSocketConnection2.prototype.markConnectionHealthy = function() {
      PersistentStorage.remove("previous_websocket_failure");
    };
    WebSocketConnection2.prototype.appendFrame_ = function(data) {
      this.frames.push(data);
      if (this.frames.length === this.totalFrames) {
        var fullMess = this.frames.join("");
        this.frames = null;
        var jsonMess = jsonEval(fullMess);
        this.onMessage(jsonMess);
      }
    };
    WebSocketConnection2.prototype.handleNewFrameCount_ = function(frameCount) {
      this.totalFrames = frameCount;
      this.frames = [];
    };
    WebSocketConnection2.prototype.extractFrameCount_ = function(data) {
      assert(this.frames === null, "We already have a frame buffer");
      if (data.length <= 6) {
        var frameCount = Number(data);
        if (!isNaN(frameCount)) {
          this.handleNewFrameCount_(frameCount);
          return null;
        }
      }
      this.handleNewFrameCount_(1);
      return data;
    };
    WebSocketConnection2.prototype.handleIncomingFrame = function(mess) {
      if (this.mySock === null) {
        return;
      }
      var data = mess["data"];
      this.bytesReceived += data.length;
      this.stats_.incrementCounter("bytes_received", data.length);
      this.resetKeepAlive();
      if (this.frames !== null) {
        this.appendFrame_(data);
      } else {
        var remainingData = this.extractFrameCount_(data);
        if (remainingData !== null) {
          this.appendFrame_(remainingData);
        }
      }
    };
    WebSocketConnection2.prototype.send = function(data) {
      this.resetKeepAlive();
      var dataStr = stringify(data);
      this.bytesSent += dataStr.length;
      this.stats_.incrementCounter("bytes_sent", dataStr.length);
      var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
      if (dataSegs.length > 1) {
        this.sendString_(String(dataSegs.length));
      }
      for (var i = 0; i < dataSegs.length; i++) {
        this.sendString_(dataSegs[i]);
      }
    };
    WebSocketConnection2.prototype.shutdown_ = function() {
      this.isClosed_ = true;
      if (this.keepaliveTimer) {
        clearInterval(this.keepaliveTimer);
        this.keepaliveTimer = null;
      }
      if (this.mySock) {
        this.mySock.close();
        this.mySock = null;
      }
    };
    WebSocketConnection2.prototype.onClosed_ = function() {
      if (!this.isClosed_) {
        this.log_("WebSocket is closing itself");
        this.shutdown_();
        if (this.onDisconnect) {
          this.onDisconnect(this.everConnected_);
          this.onDisconnect = null;
        }
      }
    };
    WebSocketConnection2.prototype.close = function() {
      if (!this.isClosed_) {
        this.log_("WebSocket is being closed");
        this.shutdown_();
      }
    };
    WebSocketConnection2.prototype.resetKeepAlive = function() {
      var _this = this;
      clearInterval(this.keepaliveTimer);
      this.keepaliveTimer = setInterval(function() {
        if (_this.mySock) {
          _this.sendString_("0");
        }
        _this.resetKeepAlive();
      }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
    };
    WebSocketConnection2.prototype.sendString_ = function(str) {
      try {
        this.mySock.send(str);
      } catch (e) {
        this.log_("Exception thrown from WebSocket.send():", e.message || e.data, "Closing connection.");
        setTimeout(this.onClosed_.bind(this), 0);
      }
    };
    WebSocketConnection2.responsesRequiredToBeHealthy = 2;
    WebSocketConnection2.healthyTimeout = 3e4;
    return WebSocketConnection2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TransportManager = function() {
    function TransportManager2(repoInfo) {
      this.initTransports_(repoInfo);
    }
    Object.defineProperty(TransportManager2, "ALL_TRANSPORTS", {
      get: function() {
        return [BrowserPollConnection, WebSocketConnection];
      },
      enumerable: false,
      configurable: true
    });
    TransportManager2.prototype.initTransports_ = function(repoInfo) {
      var e_1, _a;
      var isWebSocketsAvailable2 = WebSocketConnection && WebSocketConnection["isAvailable"]();
      var isSkipPollConnection = isWebSocketsAvailable2 && !WebSocketConnection.previouslyFailed();
      if (repoInfo.webSocketOnly) {
        if (!isWebSocketsAvailable2) {
          warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
        }
        isSkipPollConnection = true;
      }
      if (isSkipPollConnection) {
        this.transports_ = [WebSocketConnection];
      } else {
        var transports = this.transports_ = [];
        try {
          for (var _b = __values(TransportManager2.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {
            var transport = _c.value;
            if (transport && transport["isAvailable"]()) {
              transports.push(transport);
            }
          }
        } catch (e_1_1) {
          e_1 = {error: e_1_1};
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    };
    TransportManager2.prototype.initialTransport = function() {
      if (this.transports_.length > 0) {
        return this.transports_[0];
      } else {
        throw new Error("No transports available");
      }
    };
    TransportManager2.prototype.upgradeTransport = function() {
      if (this.transports_.length > 1) {
        return this.transports_[1];
      } else {
        return null;
      }
    };
    return TransportManager2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var UPGRADE_TIMEOUT = 6e4;
  var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5e3;
  var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
  var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
  var MESSAGE_TYPE = "t";
  var MESSAGE_DATA = "d";
  var CONTROL_SHUTDOWN = "s";
  var CONTROL_RESET = "r";
  var CONTROL_ERROR = "e";
  var CONTROL_PONG = "o";
  var SWITCH_ACK = "a";
  var END_TRANSMISSION = "n";
  var PING = "p";
  var SERVER_HELLO = "h";
  var Connection = function() {
    function Connection2(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
      this.id = id;
      this.repoInfo_ = repoInfo_;
      this.applicationId_ = applicationId_;
      this.appCheckToken_ = appCheckToken_;
      this.authToken_ = authToken_;
      this.onMessage_ = onMessage_;
      this.onReady_ = onReady_;
      this.onDisconnect_ = onDisconnect_;
      this.onKill_ = onKill_;
      this.lastSessionId = lastSessionId;
      this.connectionCount = 0;
      this.pendingDataMessages = [];
      this.state_ = 0;
      this.log_ = logWrapper("c:" + this.id + ":");
      this.transportManager_ = new TransportManager(repoInfo_);
      this.log_("Connection created");
      this.start_();
    }
    Connection2.prototype.start_ = function() {
      var _this = this;
      var conn = this.transportManager_.initialTransport();
      this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
      this.primaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
      var onMessageReceived = this.connReceiver_(this.conn_);
      var onConnectionLost = this.disconnReceiver_(this.conn_);
      this.tx_ = this.conn_;
      this.rx_ = this.conn_;
      this.secondaryConn_ = null;
      this.isHealthy_ = false;
      setTimeout(function() {
        _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
      }, Math.floor(0));
      var healthyTimeoutMS = conn["healthyTimeout"] || 0;
      if (healthyTimeoutMS > 0) {
        this.healthyTimeout_ = setTimeoutNonBlocking(function() {
          _this.healthyTimeout_ = null;
          if (!_this.isHealthy_) {
            if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
              _this.log_("Connection exceeded healthy timeout but has received " + _this.conn_.bytesReceived + " bytes.  Marking connection healthy.");
              _this.isHealthy_ = true;
              _this.conn_.markConnectionHealthy();
            } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
              _this.log_("Connection exceeded healthy timeout but has sent " + _this.conn_.bytesSent + " bytes.  Leaving connection alive.");
            } else {
              _this.log_("Closing unhealthy connection after timeout.");
              _this.close();
            }
          }
        }, Math.floor(healthyTimeoutMS));
      }
    };
    Connection2.prototype.nextTransportId_ = function() {
      return "c:" + this.id + ":" + this.connectionCount++;
    };
    Connection2.prototype.disconnReceiver_ = function(conn) {
      var _this = this;
      return function(everConnected) {
        if (conn === _this.conn_) {
          _this.onConnectionLost_(everConnected);
        } else if (conn === _this.secondaryConn_) {
          _this.log_("Secondary connection lost.");
          _this.onSecondaryConnectionLost_();
        } else {
          _this.log_("closing an old connection");
        }
      };
    };
    Connection2.prototype.connReceiver_ = function(conn) {
      var _this = this;
      return function(message) {
        if (_this.state_ !== 2) {
          if (conn === _this.rx_) {
            _this.onPrimaryMessageReceived_(message);
          } else if (conn === _this.secondaryConn_) {
            _this.onSecondaryMessageReceived_(message);
          } else {
            _this.log_("message on old connection");
          }
        }
      };
    };
    Connection2.prototype.sendRequest = function(dataMsg) {
      var msg = {t: "d", d: dataMsg};
      this.sendData_(msg);
    };
    Connection2.prototype.tryCleanupConnection = function() {
      if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
        this.log_("cleaning up and promoting a connection: " + this.secondaryConn_.connId);
        this.conn_ = this.secondaryConn_;
        this.secondaryConn_ = null;
      }
    };
    Connection2.prototype.onSecondaryControl_ = function(controlData) {
      if (MESSAGE_TYPE in controlData) {
        var cmd = controlData[MESSAGE_TYPE];
        if (cmd === SWITCH_ACK) {
          this.upgradeIfSecondaryHealthy_();
        } else if (cmd === CONTROL_RESET) {
          this.log_("Got a reset on secondary, closing it");
          this.secondaryConn_.close();
          if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
            this.close();
          }
        } else if (cmd === CONTROL_PONG) {
          this.log_("got pong on secondary.");
          this.secondaryResponsesRequired_--;
          this.upgradeIfSecondaryHealthy_();
        }
      }
    };
    Connection2.prototype.onSecondaryMessageReceived_ = function(parsedData) {
      var layer = requireKey("t", parsedData);
      var data = requireKey("d", parsedData);
      if (layer === "c") {
        this.onSecondaryControl_(data);
      } else if (layer === "d") {
        this.pendingDataMessages.push(data);
      } else {
        throw new Error("Unknown protocol layer: " + layer);
      }
    };
    Connection2.prototype.upgradeIfSecondaryHealthy_ = function() {
      if (this.secondaryResponsesRequired_ <= 0) {
        this.log_("Secondary connection is healthy.");
        this.isHealthy_ = true;
        this.secondaryConn_.markConnectionHealthy();
        this.proceedWithUpgrade_();
      } else {
        this.log_("sending ping on secondary.");
        this.secondaryConn_.send({t: "c", d: {t: PING, d: {}}});
      }
    };
    Connection2.prototype.proceedWithUpgrade_ = function() {
      this.secondaryConn_.start();
      this.log_("sending client ack on secondary");
      this.secondaryConn_.send({t: "c", d: {t: SWITCH_ACK, d: {}}});
      this.log_("Ending transmission on primary");
      this.conn_.send({t: "c", d: {t: END_TRANSMISSION, d: {}}});
      this.tx_ = this.secondaryConn_;
      this.tryCleanupConnection();
    };
    Connection2.prototype.onPrimaryMessageReceived_ = function(parsedData) {
      var layer = requireKey("t", parsedData);
      var data = requireKey("d", parsedData);
      if (layer === "c") {
        this.onControl_(data);
      } else if (layer === "d") {
        this.onDataMessage_(data);
      }
    };
    Connection2.prototype.onDataMessage_ = function(message) {
      this.onPrimaryResponse_();
      this.onMessage_(message);
    };
    Connection2.prototype.onPrimaryResponse_ = function() {
      if (!this.isHealthy_) {
        this.primaryResponsesRequired_--;
        if (this.primaryResponsesRequired_ <= 0) {
          this.log_("Primary connection is healthy.");
          this.isHealthy_ = true;
          this.conn_.markConnectionHealthy();
        }
      }
    };
    Connection2.prototype.onControl_ = function(controlData) {
      var cmd = requireKey(MESSAGE_TYPE, controlData);
      if (MESSAGE_DATA in controlData) {
        var payload = controlData[MESSAGE_DATA];
        if (cmd === SERVER_HELLO) {
          this.onHandshake_(payload);
        } else if (cmd === END_TRANSMISSION) {
          this.log_("recvd end transmission on primary");
          this.rx_ = this.secondaryConn_;
          for (var i = 0; i < this.pendingDataMessages.length; ++i) {
            this.onDataMessage_(this.pendingDataMessages[i]);
          }
          this.pendingDataMessages = [];
          this.tryCleanupConnection();
        } else if (cmd === CONTROL_SHUTDOWN) {
          this.onConnectionShutdown_(payload);
        } else if (cmd === CONTROL_RESET) {
          this.onReset_(payload);
        } else if (cmd === CONTROL_ERROR) {
          error("Server Error: " + payload);
        } else if (cmd === CONTROL_PONG) {
          this.log_("got pong on primary.");
          this.onPrimaryResponse_();
          this.sendPingOnPrimaryIfNecessary_();
        } else {
          error("Unknown control packet command: " + cmd);
        }
      }
    };
    Connection2.prototype.onHandshake_ = function(handshake) {
      var timestamp = handshake.ts;
      var version2 = handshake.v;
      var host = handshake.h;
      this.sessionId = handshake.s;
      this.repoInfo_.host = host;
      if (this.state_ === 0) {
        this.conn_.start();
        this.onConnectionEstablished_(this.conn_, timestamp);
        if (PROTOCOL_VERSION !== version2) {
          warn("Protocol version mismatch detected");
        }
        this.tryStartUpgrade_();
      }
    };
    Connection2.prototype.tryStartUpgrade_ = function() {
      var conn = this.transportManager_.upgradeTransport();
      if (conn) {
        this.startUpgrade_(conn);
      }
    };
    Connection2.prototype.startUpgrade_ = function(conn) {
      var _this = this;
      this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
      this.secondaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
      var onMessage = this.connReceiver_(this.secondaryConn_);
      var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
      this.secondaryConn_.open(onMessage, onDisconnect);
      setTimeoutNonBlocking(function() {
        if (_this.secondaryConn_) {
          _this.log_("Timed out trying to upgrade.");
          _this.secondaryConn_.close();
        }
      }, Math.floor(UPGRADE_TIMEOUT));
    };
    Connection2.prototype.onReset_ = function(host) {
      this.log_("Reset packet received.  New host: " + host);
      this.repoInfo_.host = host;
      if (this.state_ === 1) {
        this.close();
      } else {
        this.closeConnections_();
        this.start_();
      }
    };
    Connection2.prototype.onConnectionEstablished_ = function(conn, timestamp) {
      var _this = this;
      this.log_("Realtime connection established.");
      this.conn_ = conn;
      this.state_ = 1;
      if (this.onReady_) {
        this.onReady_(timestamp, this.sessionId);
        this.onReady_ = null;
      }
      if (this.primaryResponsesRequired_ === 0) {
        this.log_("Primary connection is healthy.");
        this.isHealthy_ = true;
      } else {
        setTimeoutNonBlocking(function() {
          _this.sendPingOnPrimaryIfNecessary_();
        }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
      }
    };
    Connection2.prototype.sendPingOnPrimaryIfNecessary_ = function() {
      if (!this.isHealthy_ && this.state_ === 1) {
        this.log_("sending ping on primary.");
        this.sendData_({t: "c", d: {t: PING, d: {}}});
      }
    };
    Connection2.prototype.onSecondaryConnectionLost_ = function() {
      var conn = this.secondaryConn_;
      this.secondaryConn_ = null;
      if (this.tx_ === conn || this.rx_ === conn) {
        this.close();
      }
    };
    Connection2.prototype.onConnectionLost_ = function(everConnected) {
      this.conn_ = null;
      if (!everConnected && this.state_ === 0) {
        this.log_("Realtime connection failed.");
        if (this.repoInfo_.isCacheableHost()) {
          PersistentStorage.remove("host:" + this.repoInfo_.host);
          this.repoInfo_.internalHost = this.repoInfo_.host;
        }
      } else if (this.state_ === 1) {
        this.log_("Realtime connection lost.");
      }
      this.close();
    };
    Connection2.prototype.onConnectionShutdown_ = function(reason) {
      this.log_("Connection shutdown command received. Shutting down...");
      if (this.onKill_) {
        this.onKill_(reason);
        this.onKill_ = null;
      }
      this.onDisconnect_ = null;
      this.close();
    };
    Connection2.prototype.sendData_ = function(data) {
      if (this.state_ !== 1) {
        throw "Connection is not connected";
      } else {
        this.tx_.send(data);
      }
    };
    Connection2.prototype.close = function() {
      if (this.state_ !== 2) {
        this.log_("Closing realtime connection.");
        this.state_ = 2;
        this.closeConnections_();
        if (this.onDisconnect_) {
          this.onDisconnect_();
          this.onDisconnect_ = null;
        }
      }
    };
    Connection2.prototype.closeConnections_ = function() {
      this.log_("Shutting down all connections");
      if (this.conn_) {
        this.conn_.close();
        this.conn_ = null;
      }
      if (this.secondaryConn_) {
        this.secondaryConn_.close();
        this.secondaryConn_ = null;
      }
      if (this.healthyTimeout_) {
        clearTimeout(this.healthyTimeout_);
        this.healthyTimeout_ = null;
      }
    };
    return Connection2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ServerActions = function() {
    function ServerActions2() {
    }
    ServerActions2.prototype.put = function(pathString, data, onComplete, hash) {
    };
    ServerActions2.prototype.merge = function(pathString, data, onComplete, hash) {
    };
    ServerActions2.prototype.refreshAuthToken = function(token) {
    };
    ServerActions2.prototype.refreshAppCheckToken = function(token) {
    };
    ServerActions2.prototype.onDisconnectPut = function(pathString, data, onComplete) {
    };
    ServerActions2.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
    };
    ServerActions2.prototype.onDisconnectCancel = function(pathString, onComplete) {
    };
    ServerActions2.prototype.reportStats = function(stats2) {
    };
    return ServerActions2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var EventEmitter = function() {
    function EventEmitter2(allowedEvents_) {
      this.allowedEvents_ = allowedEvents_;
      this.listeners_ = {};
      assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, "Requires a non-empty array");
    }
    EventEmitter2.prototype.trigger = function(eventType) {
      var varArgs = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        varArgs[_i - 1] = arguments[_i];
      }
      if (Array.isArray(this.listeners_[eventType])) {
        var listeners = __spreadArray([], __read(this.listeners_[eventType]));
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].callback.apply(listeners[i].context, varArgs);
        }
      }
    };
    EventEmitter2.prototype.on = function(eventType, callback, context) {
      this.validateEventType_(eventType);
      this.listeners_[eventType] = this.listeners_[eventType] || [];
      this.listeners_[eventType].push({callback, context});
      var eventData = this.getInitialEvent(eventType);
      if (eventData) {
        callback.apply(context, eventData);
      }
    };
    EventEmitter2.prototype.off = function(eventType, callback, context) {
      this.validateEventType_(eventType);
      var listeners = this.listeners_[eventType] || [];
      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
          listeners.splice(i, 1);
          return;
        }
      }
    };
    EventEmitter2.prototype.validateEventType_ = function(eventType) {
      assert(this.allowedEvents_.find(function(et) {
        return et === eventType;
      }), "Unknown event: " + eventType);
    };
    return EventEmitter2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var OnlineMonitor = function(_super) {
    __extends(OnlineMonitor2, _super);
    function OnlineMonitor2() {
      var _this = _super.call(this, ["online"]) || this;
      _this.online_ = true;
      if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined" && !isMobileCordova()) {
        window.addEventListener("online", function() {
          if (!_this.online_) {
            _this.online_ = true;
            _this.trigger("online", true);
          }
        }, false);
        window.addEventListener("offline", function() {
          if (_this.online_) {
            _this.online_ = false;
            _this.trigger("online", false);
          }
        }, false);
      }
      return _this;
    }
    OnlineMonitor2.getInstance = function() {
      return new OnlineMonitor2();
    };
    OnlineMonitor2.prototype.getInitialEvent = function(eventType) {
      assert(eventType === "online", "Unknown event type: " + eventType);
      return [this.online_];
    };
    OnlineMonitor2.prototype.currentlyOnline = function() {
      return this.online_;
    };
    return OnlineMonitor2;
  }(EventEmitter);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var MAX_PATH_DEPTH = 32;
  var MAX_PATH_LENGTH_BYTES = 768;
  var Path = function() {
    function Path2(pathOrString, pieceNum) {
      if (pieceNum === void 0) {
        this.pieces_ = pathOrString.split("/");
        var copyTo = 0;
        for (var i = 0; i < this.pieces_.length; i++) {
          if (this.pieces_[i].length > 0) {
            this.pieces_[copyTo] = this.pieces_[i];
            copyTo++;
          }
        }
        this.pieces_.length = copyTo;
        this.pieceNum_ = 0;
      } else {
        this.pieces_ = pathOrString;
        this.pieceNum_ = pieceNum;
      }
    }
    Path2.prototype.toString = function() {
      var pathString = "";
      for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
        if (this.pieces_[i] !== "") {
          pathString += "/" + this.pieces_[i];
        }
      }
      return pathString || "/";
    };
    return Path2;
  }();
  function newEmptyPath() {
    return new Path("");
  }
  function pathGetFront(path) {
    if (path.pieceNum_ >= path.pieces_.length) {
      return null;
    }
    return path.pieces_[path.pieceNum_];
  }
  function pathGetLength(path) {
    return path.pieces_.length - path.pieceNum_;
  }
  function pathPopFront(path) {
    var pieceNum = path.pieceNum_;
    if (pieceNum < path.pieces_.length) {
      pieceNum++;
    }
    return new Path(path.pieces_, pieceNum);
  }
  function pathGetBack(path) {
    if (path.pieceNum_ < path.pieces_.length) {
      return path.pieces_[path.pieces_.length - 1];
    }
    return null;
  }
  function pathToUrlEncodedString(path) {
    var pathString = "";
    for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
      if (path.pieces_[i] !== "") {
        pathString += "/" + encodeURIComponent(String(path.pieces_[i]));
      }
    }
    return pathString || "/";
  }
  function pathSlice(path, begin) {
    if (begin === void 0) {
      begin = 0;
    }
    return path.pieces_.slice(path.pieceNum_ + begin);
  }
  function pathParent(path) {
    if (path.pieceNum_ >= path.pieces_.length) {
      return null;
    }
    var pieces = [];
    for (var i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
      pieces.push(path.pieces_[i]);
    }
    return new Path(pieces, 0);
  }
  function pathChild(path, childPathObj) {
    var pieces = [];
    for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
      pieces.push(path.pieces_[i]);
    }
    if (childPathObj instanceof Path) {
      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
        pieces.push(childPathObj.pieces_[i]);
      }
    } else {
      var childPieces = childPathObj.split("/");
      for (var i = 0; i < childPieces.length; i++) {
        if (childPieces[i].length > 0) {
          pieces.push(childPieces[i]);
        }
      }
    }
    return new Path(pieces, 0);
  }
  function pathIsEmpty(path) {
    return path.pieceNum_ >= path.pieces_.length;
  }
  function newRelativePath(outerPath, innerPath) {
    var outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
    if (outer === null) {
      return innerPath;
    } else if (outer === inner) {
      return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
    } else {
      throw new Error("INTERNAL ERROR: innerPath (" + innerPath + ") is not within outerPath (" + outerPath + ")");
    }
  }
  function pathCompare(left, right) {
    var leftKeys = pathSlice(left, 0);
    var rightKeys = pathSlice(right, 0);
    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
      var cmp = nameCompare(leftKeys[i], rightKeys[i]);
      if (cmp !== 0) {
        return cmp;
      }
    }
    if (leftKeys.length === rightKeys.length) {
      return 0;
    }
    return leftKeys.length < rightKeys.length ? -1 : 1;
  }
  function pathEquals(path, other) {
    if (pathGetLength(path) !== pathGetLength(other)) {
      return false;
    }
    for (var i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {
      if (path.pieces_[i] !== other.pieces_[j]) {
        return false;
      }
    }
    return true;
  }
  function pathContains(path, other) {
    var i = path.pieceNum_;
    var j = other.pieceNum_;
    if (pathGetLength(path) > pathGetLength(other)) {
      return false;
    }
    while (i < path.pieces_.length) {
      if (path.pieces_[i] !== other.pieces_[j]) {
        return false;
      }
      ++i;
      ++j;
    }
    return true;
  }
  var ValidationPath = function() {
    function ValidationPath2(path, errorPrefix_) {
      this.errorPrefix_ = errorPrefix_;
      this.parts_ = pathSlice(path, 0);
      this.byteLength_ = Math.max(1, this.parts_.length);
      for (var i = 0; i < this.parts_.length; i++) {
        this.byteLength_ += stringLength(this.parts_[i]);
      }
      validationPathCheckValid(this);
    }
    return ValidationPath2;
  }();
  function validationPathPush(validationPath, child2) {
    if (validationPath.parts_.length > 0) {
      validationPath.byteLength_ += 1;
    }
    validationPath.parts_.push(child2);
    validationPath.byteLength_ += stringLength(child2);
    validationPathCheckValid(validationPath);
  }
  function validationPathPop(validationPath) {
    var last = validationPath.parts_.pop();
    validationPath.byteLength_ -= stringLength(last);
    if (validationPath.parts_.length > 0) {
      validationPath.byteLength_ -= 1;
    }
  }
  function validationPathCheckValid(validationPath) {
    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
      throw new Error(validationPath.errorPrefix_ + "has a key path longer than " + MAX_PATH_LENGTH_BYTES + " bytes (" + validationPath.byteLength_ + ").");
    }
    if (validationPath.parts_.length > MAX_PATH_DEPTH) {
      throw new Error(validationPath.errorPrefix_ + "path specified exceeds the maximum depth that can be written (" + MAX_PATH_DEPTH + ") or object contains a cycle " + validationPathToErrorString(validationPath));
    }
  }
  function validationPathToErrorString(validationPath) {
    if (validationPath.parts_.length === 0) {
      return "";
    }
    return "in property '" + validationPath.parts_.join(".") + "'";
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var VisibilityMonitor = function(_super) {
    __extends(VisibilityMonitor2, _super);
    function VisibilityMonitor2() {
      var _this = _super.call(this, ["visible"]) || this;
      var hidden;
      var visibilityChange;
      if (typeof document !== "undefined" && typeof document.addEventListener !== "undefined") {
        if (typeof document["hidden"] !== "undefined") {
          visibilityChange = "visibilitychange";
          hidden = "hidden";
        } else if (typeof document["mozHidden"] !== "undefined") {
          visibilityChange = "mozvisibilitychange";
          hidden = "mozHidden";
        } else if (typeof document["msHidden"] !== "undefined") {
          visibilityChange = "msvisibilitychange";
          hidden = "msHidden";
        } else if (typeof document["webkitHidden"] !== "undefined") {
          visibilityChange = "webkitvisibilitychange";
          hidden = "webkitHidden";
        }
      }
      _this.visible_ = true;
      if (visibilityChange) {
        document.addEventListener(visibilityChange, function() {
          var visible = !document[hidden];
          if (visible !== _this.visible_) {
            _this.visible_ = visible;
            _this.trigger("visible", visible);
          }
        }, false);
      }
      return _this;
    }
    VisibilityMonitor2.getInstance = function() {
      return new VisibilityMonitor2();
    };
    VisibilityMonitor2.prototype.getInitialEvent = function(eventType) {
      assert(eventType === "visible", "Unknown event type: " + eventType);
      return [this.visible_];
    };
    return VisibilityMonitor2;
  }(EventEmitter);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var RECONNECT_MIN_DELAY = 1e3;
  var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1e3;
  var GET_CONNECT_TIMEOUT = 3 * 1e3;
  var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1e3;
  var RECONNECT_DELAY_MULTIPLIER = 1.3;
  var RECONNECT_DELAY_RESET_TIMEOUT = 3e4;
  var SERVER_KILL_INTERRUPT_REASON = "server_kill";
  var INVALID_TOKEN_THRESHOLD = 3;
  var PersistentConnection = function(_super) {
    __extends(PersistentConnection2, _super);
    function PersistentConnection2(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
      var _this = _super.call(this) || this;
      _this.repoInfo_ = repoInfo_;
      _this.applicationId_ = applicationId_;
      _this.onDataUpdate_ = onDataUpdate_;
      _this.onConnectStatus_ = onConnectStatus_;
      _this.onServerInfoUpdate_ = onServerInfoUpdate_;
      _this.authTokenProvider_ = authTokenProvider_;
      _this.appCheckTokenProvider_ = appCheckTokenProvider_;
      _this.authOverride_ = authOverride_;
      _this.id = PersistentConnection2.nextPersistentConnectionId_++;
      _this.log_ = logWrapper("p:" + _this.id + ":");
      _this.interruptReasons_ = {};
      _this.listens = new Map();
      _this.outstandingPuts_ = [];
      _this.outstandingGets_ = [];
      _this.outstandingPutCount_ = 0;
      _this.outstandingGetCount_ = 0;
      _this.onDisconnectRequestQueue_ = [];
      _this.connected_ = false;
      _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
      _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
      _this.securityDebugCallback_ = null;
      _this.lastSessionId = null;
      _this.establishConnectionTimer_ = null;
      _this.visible_ = false;
      _this.requestCBHash_ = {};
      _this.requestNumber_ = 0;
      _this.realtime_ = null;
      _this.authToken_ = null;
      _this.appCheckToken_ = null;
      _this.forceTokenRefresh_ = false;
      _this.invalidAuthTokenCount_ = 0;
      _this.invalidAppCheckTokenCount_ = 0;
      _this.firstConnection_ = true;
      _this.lastConnectionAttemptTime_ = null;
      _this.lastConnectionEstablishedTime_ = null;
      if (authOverride_ && !isNodeSdk()) {
        throw new Error("Auth override specified in options, but not supported on non Node.js platforms");
      }
      VisibilityMonitor.getInstance().on("visible", _this.onVisible_, _this);
      if (repoInfo_.host.indexOf("fblocal") === -1) {
        OnlineMonitor.getInstance().on("online", _this.onOnline_, _this);
      }
      return _this;
    }
    PersistentConnection2.prototype.sendRequest = function(action, body, onResponse) {
      var curReqNum = ++this.requestNumber_;
      var msg = {r: curReqNum, a: action, b: body};
      this.log_(stringify(msg));
      assert(this.connected_, "sendRequest call when we're not connected not allowed.");
      this.realtime_.sendRequest(msg);
      if (onResponse) {
        this.requestCBHash_[curReqNum] = onResponse;
      }
    };
    PersistentConnection2.prototype.get = function(query2) {
      var _this = this;
      this.initConnection_();
      var deferred = new Deferred();
      var request = {
        p: query2._path.toString(),
        q: query2._queryObject
      };
      var outstandingGet = {
        action: "g",
        request,
        onComplete: function(message) {
          var payload = message["d"];
          if (message["s"] === "ok") {
            _this.onDataUpdate_(request["p"], payload, false, null);
            deferred.resolve(payload);
          } else {
            deferred.reject(payload);
          }
        }
      };
      this.outstandingGets_.push(outstandingGet);
      this.outstandingGetCount_++;
      var index = this.outstandingGets_.length - 1;
      if (!this.connected_) {
        setTimeout(function() {
          var get2 = _this.outstandingGets_[index];
          if (get2 === void 0 || outstandingGet !== get2) {
            return;
          }
          delete _this.outstandingGets_[index];
          _this.outstandingGetCount_--;
          if (_this.outstandingGetCount_ === 0) {
            _this.outstandingGets_ = [];
          }
          _this.log_("get " + index + " timed out on connection");
          deferred.reject(new Error("Client is offline."));
        }, GET_CONNECT_TIMEOUT);
      }
      if (this.connected_) {
        this.sendGet_(index);
      }
      return deferred.promise;
    };
    PersistentConnection2.prototype.listen = function(query2, currentHashFn, tag, onComplete) {
      this.initConnection_();
      var queryId = query2._queryIdentifier;
      var pathString = query2._path.toString();
      this.log_("Listen called for " + pathString + " " + queryId);
      if (!this.listens.has(pathString)) {
        this.listens.set(pathString, new Map());
      }
      assert(query2._queryParams.isDefault() || !query2._queryParams.loadsAllData(), "listen() called for non-default but complete query");
      assert(!this.listens.get(pathString).has(queryId), "listen() called twice for same path/queryId.");
      var listenSpec = {
        onComplete,
        hashFn: currentHashFn,
        query: query2,
        tag
      };
      this.listens.get(pathString).set(queryId, listenSpec);
      if (this.connected_) {
        this.sendListen_(listenSpec);
      }
    };
    PersistentConnection2.prototype.sendGet_ = function(index) {
      var _this = this;
      var get2 = this.outstandingGets_[index];
      this.sendRequest("g", get2.request, function(message) {
        delete _this.outstandingGets_[index];
        _this.outstandingGetCount_--;
        if (_this.outstandingGetCount_ === 0) {
          _this.outstandingGets_ = [];
        }
        if (get2.onComplete) {
          get2.onComplete(message);
        }
      });
    };
    PersistentConnection2.prototype.sendListen_ = function(listenSpec) {
      var _this = this;
      var query2 = listenSpec.query;
      var pathString = query2._path.toString();
      var queryId = query2._queryIdentifier;
      this.log_("Listen on " + pathString + " for " + queryId);
      var req = {p: pathString};
      var action = "q";
      if (listenSpec.tag) {
        req["q"] = query2._queryObject;
        req["t"] = listenSpec.tag;
      }
      req["h"] = listenSpec.hashFn();
      this.sendRequest(action, req, function(message) {
        var payload = message["d"];
        var status = message["s"];
        PersistentConnection2.warnOnListenWarnings_(payload, query2);
        var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId);
        if (currentListenSpec === listenSpec) {
          _this.log_("listen response", message);
          if (status !== "ok") {
            _this.removeListen_(pathString, queryId);
          }
          if (listenSpec.onComplete) {
            listenSpec.onComplete(status, payload);
          }
        }
      });
    };
    PersistentConnection2.warnOnListenWarnings_ = function(payload, query2) {
      if (payload && typeof payload === "object" && contains(payload, "w")) {
        var warnings = safeGet(payload, "w");
        if (Array.isArray(warnings) && ~warnings.indexOf("no_index")) {
          var indexSpec = '".indexOn": "' + query2._queryParams.getIndex().toString() + '"';
          var indexPath = query2._path.toString();
          warn("Using an unspecified index. Your data will be downloaded and " + ("filtered on the client. Consider adding " + indexSpec + " at ") + (indexPath + " to your security rules for better performance."));
        }
      }
    };
    PersistentConnection2.prototype.refreshAuthToken = function(token) {
      this.authToken_ = token;
      this.log_("Auth token refreshed");
      if (this.authToken_) {
        this.tryAuth();
      } else {
        if (this.connected_) {
          this.sendRequest("unauth", {}, function() {
          });
        }
      }
      this.reduceReconnectDelayIfAdminCredential_(token);
    };
    PersistentConnection2.prototype.reduceReconnectDelayIfAdminCredential_ = function(credential) {
      var isFirebaseSecret = credential && credential.length === 40;
      if (isFirebaseSecret || isAdmin(credential)) {
        this.log_("Admin auth credential detected.  Reducing max reconnect time.");
        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
      }
    };
    PersistentConnection2.prototype.refreshAppCheckToken = function(token) {
      this.appCheckToken_ = token;
      this.log_("App check token refreshed");
      if (this.appCheckToken_) {
        this.tryAppCheck();
      } else {
        if (this.connected_) {
          this.sendRequest("unappeck", {}, function() {
          });
        }
      }
    };
    PersistentConnection2.prototype.tryAuth = function() {
      var _this = this;
      if (this.connected_ && this.authToken_) {
        var token_1 = this.authToken_;
        var authMethod = isValidFormat(token_1) ? "auth" : "gauth";
        var requestData = {cred: token_1};
        if (this.authOverride_ === null) {
          requestData["noauth"] = true;
        } else if (typeof this.authOverride_ === "object") {
          requestData["authvar"] = this.authOverride_;
        }
        this.sendRequest(authMethod, requestData, function(res) {
          var status = res["s"];
          var data = res["d"] || "error";
          if (_this.authToken_ === token_1) {
            if (status === "ok") {
              _this.invalidAuthTokenCount_ = 0;
            } else {
              _this.onAuthRevoked_(status, data);
            }
          }
        });
      }
    };
    PersistentConnection2.prototype.tryAppCheck = function() {
      var _this = this;
      if (this.connected_ && this.appCheckToken_) {
        this.sendRequest("appcheck", {token: this.appCheckToken_}, function(res) {
          var status = res["s"];
          var data = res["d"] || "error";
          if (status === "ok") {
            _this.invalidAppCheckTokenCount_ = 0;
          } else {
            _this.onAppCheckRevoked_(status, data);
          }
        });
      }
    };
    PersistentConnection2.prototype.unlisten = function(query2, tag) {
      var pathString = query2._path.toString();
      var queryId = query2._queryIdentifier;
      this.log_("Unlisten called for " + pathString + " " + queryId);
      assert(query2._queryParams.isDefault() || !query2._queryParams.loadsAllData(), "unlisten() called for non-default but complete query");
      var listen = this.removeListen_(pathString, queryId);
      if (listen && this.connected_) {
        this.sendUnlisten_(pathString, queryId, query2._queryObject, tag);
      }
    };
    PersistentConnection2.prototype.sendUnlisten_ = function(pathString, queryId, queryObj, tag) {
      this.log_("Unlisten on " + pathString + " for " + queryId);
      var req = {p: pathString};
      var action = "n";
      if (tag) {
        req["q"] = queryObj;
        req["t"] = tag;
      }
      this.sendRequest(action, req);
    };
    PersistentConnection2.prototype.onDisconnectPut = function(pathString, data, onComplete) {
      this.initConnection_();
      if (this.connected_) {
        this.sendOnDisconnect_("o", pathString, data, onComplete);
      } else {
        this.onDisconnectRequestQueue_.push({
          pathString,
          action: "o",
          data,
          onComplete
        });
      }
    };
    PersistentConnection2.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
      this.initConnection_();
      if (this.connected_) {
        this.sendOnDisconnect_("om", pathString, data, onComplete);
      } else {
        this.onDisconnectRequestQueue_.push({
          pathString,
          action: "om",
          data,
          onComplete
        });
      }
    };
    PersistentConnection2.prototype.onDisconnectCancel = function(pathString, onComplete) {
      this.initConnection_();
      if (this.connected_) {
        this.sendOnDisconnect_("oc", pathString, null, onComplete);
      } else {
        this.onDisconnectRequestQueue_.push({
          pathString,
          action: "oc",
          data: null,
          onComplete
        });
      }
    };
    PersistentConnection2.prototype.sendOnDisconnect_ = function(action, pathString, data, onComplete) {
      var request = {p: pathString, d: data};
      this.log_("onDisconnect " + action, request);
      this.sendRequest(action, request, function(response) {
        if (onComplete) {
          setTimeout(function() {
            onComplete(response["s"], response["d"]);
          }, Math.floor(0));
        }
      });
    };
    PersistentConnection2.prototype.put = function(pathString, data, onComplete, hash) {
      this.putInternal("p", pathString, data, onComplete, hash);
    };
    PersistentConnection2.prototype.merge = function(pathString, data, onComplete, hash) {
      this.putInternal("m", pathString, data, onComplete, hash);
    };
    PersistentConnection2.prototype.putInternal = function(action, pathString, data, onComplete, hash) {
      this.initConnection_();
      var request = {
        p: pathString,
        d: data
      };
      if (hash !== void 0) {
        request["h"] = hash;
      }
      this.outstandingPuts_.push({
        action,
        request,
        onComplete
      });
      this.outstandingPutCount_++;
      var index = this.outstandingPuts_.length - 1;
      if (this.connected_) {
        this.sendPut_(index);
      } else {
        this.log_("Buffering put: " + pathString);
      }
    };
    PersistentConnection2.prototype.sendPut_ = function(index) {
      var _this = this;
      var action = this.outstandingPuts_[index].action;
      var request = this.outstandingPuts_[index].request;
      var onComplete = this.outstandingPuts_[index].onComplete;
      this.outstandingPuts_[index].queued = this.connected_;
      this.sendRequest(action, request, function(message) {
        _this.log_(action + " response", message);
        delete _this.outstandingPuts_[index];
        _this.outstandingPutCount_--;
        if (_this.outstandingPutCount_ === 0) {
          _this.outstandingPuts_ = [];
        }
        if (onComplete) {
          onComplete(message["s"], message["d"]);
        }
      });
    };
    PersistentConnection2.prototype.reportStats = function(stats2) {
      var _this = this;
      if (this.connected_) {
        var request = {c: stats2};
        this.log_("reportStats", request);
        this.sendRequest("s", request, function(result) {
          var status = result["s"];
          if (status !== "ok") {
            var errorReason = result["d"];
            _this.log_("reportStats", "Error sending stats: " + errorReason);
          }
        });
      }
    };
    PersistentConnection2.prototype.onDataMessage_ = function(message) {
      if ("r" in message) {
        this.log_("from server: " + stringify(message));
        var reqNum = message["r"];
        var onResponse = this.requestCBHash_[reqNum];
        if (onResponse) {
          delete this.requestCBHash_[reqNum];
          onResponse(message["b"]);
        }
      } else if ("error" in message) {
        throw "A server-side error has occurred: " + message["error"];
      } else if ("a" in message) {
        this.onDataPush_(message["a"], message["b"]);
      }
    };
    PersistentConnection2.prototype.onDataPush_ = function(action, body) {
      this.log_("handleServerMessage", action, body);
      if (action === "d") {
        this.onDataUpdate_(body["p"], body["d"], false, body["t"]);
      } else if (action === "m") {
        this.onDataUpdate_(body["p"], body["d"], true, body["t"]);
      } else if (action === "c") {
        this.onListenRevoked_(body["p"], body["q"]);
      } else if (action === "ac") {
        this.onAuthRevoked_(body["s"], body["d"]);
      } else if (action === "apc") {
        this.onAppCheckRevoked_(body["s"], body["d"]);
      } else if (action === "sd") {
        this.onSecurityDebugPacket_(body);
      } else {
        error("Unrecognized action received from server: " + stringify(action) + "\nAre you using the latest client?");
      }
    };
    PersistentConnection2.prototype.onReady_ = function(timestamp, sessionId) {
      this.log_("connection ready");
      this.connected_ = true;
      this.lastConnectionEstablishedTime_ = new Date().getTime();
      this.handleTimestamp_(timestamp);
      this.lastSessionId = sessionId;
      if (this.firstConnection_) {
        this.sendConnectStats_();
      }
      this.restoreState_();
      this.firstConnection_ = false;
      this.onConnectStatus_(true);
    };
    PersistentConnection2.prototype.scheduleConnect_ = function(timeout) {
      var _this = this;
      assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
      if (this.establishConnectionTimer_) {
        clearTimeout(this.establishConnectionTimer_);
      }
      this.establishConnectionTimer_ = setTimeout(function() {
        _this.establishConnectionTimer_ = null;
        _this.establishConnection_();
      }, Math.floor(timeout));
    };
    PersistentConnection2.prototype.initConnection_ = function() {
      if (!this.realtime_ && this.firstConnection_) {
        this.scheduleConnect_(0);
      }
    };
    PersistentConnection2.prototype.onVisible_ = function(visible) {
      if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
        this.log_("Window became visible.  Reducing delay.");
        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        if (!this.realtime_) {
          this.scheduleConnect_(0);
        }
      }
      this.visible_ = visible;
    };
    PersistentConnection2.prototype.onOnline_ = function(online) {
      if (online) {
        this.log_("Browser went online.");
        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        if (!this.realtime_) {
          this.scheduleConnect_(0);
        }
      } else {
        this.log_("Browser went offline.  Killing connection.");
        if (this.realtime_) {
          this.realtime_.close();
        }
      }
    };
    PersistentConnection2.prototype.onRealtimeDisconnect_ = function() {
      this.log_("data client disconnected");
      this.connected_ = false;
      this.realtime_ = null;
      this.cancelSentTransactions_();
      this.requestCBHash_ = {};
      if (this.shouldReconnect_()) {
        if (!this.visible_) {
          this.log_("Window isn't visible.  Delaying reconnect.");
          this.reconnectDelay_ = this.maxReconnectDelay_;
          this.lastConnectionAttemptTime_ = new Date().getTime();
        } else if (this.lastConnectionEstablishedTime_) {
          var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
          if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          }
          this.lastConnectionEstablishedTime_ = null;
        }
        var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
        var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
        reconnectDelay = Math.random() * reconnectDelay;
        this.log_("Trying to reconnect in " + reconnectDelay + "ms");
        this.scheduleConnect_(reconnectDelay);
        this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
      }
      this.onConnectStatus_(false);
    };
    PersistentConnection2.prototype.establishConnection_ = function() {
      return __awaiter(this, void 0, void 0, function() {
        var onDataMessage, onReady, onDisconnect_1, connId, lastSessionId, canceled_1, connection_1, closeFn, sendRequestFn, forceRefresh, _a, authToken, appCheckToken, error_1;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!this.shouldReconnect_())
                return [3, 4];
              this.log_("Making a connection attempt");
              this.lastConnectionAttemptTime_ = new Date().getTime();
              this.lastConnectionEstablishedTime_ = null;
              onDataMessage = this.onDataMessage_.bind(this);
              onReady = this.onReady_.bind(this);
              onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
              connId = this.id + ":" + PersistentConnection2.nextConnectionId_++;
              lastSessionId = this.lastSessionId;
              canceled_1 = false;
              connection_1 = null;
              closeFn = function() {
                if (connection_1) {
                  connection_1.close();
                } else {
                  canceled_1 = true;
                  onDisconnect_1();
                }
              };
              sendRequestFn = function(msg) {
                assert(connection_1, "sendRequest call when we're not connected not allowed.");
                connection_1.sendRequest(msg);
              };
              this.realtime_ = {
                close: closeFn,
                sendRequest: sendRequestFn
              };
              forceRefresh = this.forceTokenRefresh_;
              this.forceTokenRefresh_ = false;
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              return [4, Promise.all([
                this.authTokenProvider_.getToken(forceRefresh),
                this.appCheckTokenProvider_.getToken(forceRefresh)
              ])];
            case 2:
              _a = __read.apply(void 0, [_b.sent(), 2]), authToken = _a[0], appCheckToken = _a[1];
              if (!canceled_1) {
                log("getToken() completed. Creating connection.");
                this.authToken_ = authToken && authToken.accessToken;
                this.appCheckToken_ = appCheckToken && appCheckToken.token;
                connection_1 = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect_1, function(reason) {
                  warn(reason + " (" + _this.repoInfo_.toString() + ")");
                  _this.interrupt(SERVER_KILL_INTERRUPT_REASON);
                }, lastSessionId);
              } else {
                log("getToken() completed but was canceled");
              }
              return [3, 4];
            case 3:
              error_1 = _b.sent();
              this.log_("Failed to get token: " + error_1);
              if (!canceled_1) {
                if (this.repoInfo_.nodeAdmin) {
                  warn(error_1);
                }
                closeFn();
              }
              return [3, 4];
            case 4:
              return [2];
          }
        });
      });
    };
    PersistentConnection2.prototype.interrupt = function(reason) {
      log("Interrupting connection for reason: " + reason);
      this.interruptReasons_[reason] = true;
      if (this.realtime_) {
        this.realtime_.close();
      } else {
        if (this.establishConnectionTimer_) {
          clearTimeout(this.establishConnectionTimer_);
          this.establishConnectionTimer_ = null;
        }
        if (this.connected_) {
          this.onRealtimeDisconnect_();
        }
      }
    };
    PersistentConnection2.prototype.resume = function(reason) {
      log("Resuming connection for reason: " + reason);
      delete this.interruptReasons_[reason];
      if (isEmpty(this.interruptReasons_)) {
        this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        if (!this.realtime_) {
          this.scheduleConnect_(0);
        }
      }
    };
    PersistentConnection2.prototype.handleTimestamp_ = function(timestamp) {
      var delta = timestamp - new Date().getTime();
      this.onServerInfoUpdate_({serverTimeOffset: delta});
    };
    PersistentConnection2.prototype.cancelSentTransactions_ = function() {
      for (var i = 0; i < this.outstandingPuts_.length; i++) {
        var put = this.outstandingPuts_[i];
        if (put && "h" in put.request && put.queued) {
          if (put.onComplete) {
            put.onComplete("disconnect");
          }
          delete this.outstandingPuts_[i];
          this.outstandingPutCount_--;
        }
      }
      if (this.outstandingPutCount_ === 0) {
        this.outstandingPuts_ = [];
      }
    };
    PersistentConnection2.prototype.onListenRevoked_ = function(pathString, query2) {
      var queryId;
      if (!query2) {
        queryId = "default";
      } else {
        queryId = query2.map(function(q) {
          return ObjectToUniqueKey(q);
        }).join("$");
      }
      var listen = this.removeListen_(pathString, queryId);
      if (listen && listen.onComplete) {
        listen.onComplete("permission_denied");
      }
    };
    PersistentConnection2.prototype.removeListen_ = function(pathString, queryId) {
      var normalizedPathString = new Path(pathString).toString();
      var listen;
      if (this.listens.has(normalizedPathString)) {
        var map2 = this.listens.get(normalizedPathString);
        listen = map2.get(queryId);
        map2.delete(queryId);
        if (map2.size === 0) {
          this.listens.delete(normalizedPathString);
        }
      } else {
        listen = void 0;
      }
      return listen;
    };
    PersistentConnection2.prototype.onAuthRevoked_ = function(statusCode, explanation) {
      log("Auth token revoked: " + statusCode + "/" + explanation);
      this.authToken_ = null;
      this.forceTokenRefresh_ = true;
      this.realtime_.close();
      if (statusCode === "invalid_token" || statusCode === "permission_denied") {
        this.invalidAuthTokenCount_++;
        if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
          this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
          this.authTokenProvider_.notifyForInvalidToken();
        }
      }
    };
    PersistentConnection2.prototype.onAppCheckRevoked_ = function(statusCode, explanation) {
      log("App check token revoked: " + statusCode + "/" + explanation);
      this.appCheckToken_ = null;
      this.forceTokenRefresh_ = true;
      if (statusCode === "invalid_token" || statusCode === "permission_denied") {
        this.invalidAppCheckTokenCount_++;
        if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
          this.appCheckTokenProvider_.notifyForInvalidToken();
        }
      }
    };
    PersistentConnection2.prototype.onSecurityDebugPacket_ = function(body) {
      if (this.securityDebugCallback_) {
        this.securityDebugCallback_(body);
      } else {
        if ("msg" in body) {
          console.log("FIREBASE: " + body["msg"].replace("\n", "\nFIREBASE: "));
        }
      }
    };
    PersistentConnection2.prototype.restoreState_ = function() {
      var e_1, _a, e_2, _b;
      this.tryAuth();
      this.tryAppCheck();
      try {
        for (var _c = __values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
          var queries = _d.value;
          try {
            for (var _e = (e_2 = void 0, __values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {
              var listenSpec = _f.value;
              this.sendListen_(listenSpec);
            }
          } catch (e_2_1) {
            e_2 = {error: e_2_1};
          } finally {
            try {
              if (_f && !_f.done && (_b = _e.return))
                _b.call(_e);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_d && !_d.done && (_a = _c.return))
            _a.call(_c);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      for (var i = 0; i < this.outstandingPuts_.length; i++) {
        if (this.outstandingPuts_[i]) {
          this.sendPut_(i);
        }
      }
      while (this.onDisconnectRequestQueue_.length) {
        var request = this.onDisconnectRequestQueue_.shift();
        this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
      }
      for (var i = 0; i < this.outstandingGets_.length; i++) {
        if (this.outstandingGets_[i]) {
          this.sendGet_(i);
        }
      }
    };
    PersistentConnection2.prototype.sendConnectStats_ = function() {
      var stats2 = {};
      var clientName = "js";
      if (isNodeSdk()) {
        if (this.repoInfo_.nodeAdmin) {
          clientName = "admin_node";
        } else {
          clientName = "node";
        }
      }
      stats2["sdk." + clientName + "." + SDK_VERSION.replace(/\./g, "-")] = 1;
      if (isMobileCordova()) {
        stats2["framework.cordova"] = 1;
      } else if (isReactNative()) {
        stats2["framework.reactnative"] = 1;
      }
      this.reportStats(stats2);
    };
    PersistentConnection2.prototype.shouldReconnect_ = function() {
      var online = OnlineMonitor.getInstance().currentlyOnline();
      return isEmpty(this.interruptReasons_) && online;
    };
    PersistentConnection2.nextPersistentConnectionId_ = 0;
    PersistentConnection2.nextConnectionId_ = 0;
    return PersistentConnection2;
  }(ServerActions);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var NamedNode = function() {
    function NamedNode2(name2, node) {
      this.name = name2;
      this.node = node;
    }
    NamedNode2.Wrap = function(name2, node) {
      return new NamedNode2(name2, node);
    };
    return NamedNode2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Index = function() {
    function Index2() {
    }
    Index2.prototype.getCompare = function() {
      return this.compare.bind(this);
    };
    Index2.prototype.indexedValueChanged = function(oldNode, newNode) {
      var oldWrapped = new NamedNode(MIN_NAME, oldNode);
      var newWrapped = new NamedNode(MIN_NAME, newNode);
      return this.compare(oldWrapped, newWrapped) !== 0;
    };
    Index2.prototype.minPost = function() {
      return NamedNode.MIN;
    };
    return Index2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __EMPTY_NODE;
  var KeyIndex = function(_super) {
    __extends(KeyIndex2, _super);
    function KeyIndex2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(KeyIndex2, "__EMPTY_NODE", {
      get: function() {
        return __EMPTY_NODE;
      },
      set: function(val) {
        __EMPTY_NODE = val;
      },
      enumerable: false,
      configurable: true
    });
    KeyIndex2.prototype.compare = function(a, b) {
      return nameCompare(a.name, b.name);
    };
    KeyIndex2.prototype.isDefinedOn = function(node) {
      throw assertionError("KeyIndex.isDefinedOn not expected to be called.");
    };
    KeyIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
      return false;
    };
    KeyIndex2.prototype.minPost = function() {
      return NamedNode.MIN;
    };
    KeyIndex2.prototype.maxPost = function() {
      return new NamedNode(MAX_NAME, __EMPTY_NODE);
    };
    KeyIndex2.prototype.makePost = function(indexValue, name2) {
      assert(typeof indexValue === "string", "KeyIndex indexValue must always be a string.");
      return new NamedNode(indexValue, __EMPTY_NODE);
    };
    KeyIndex2.prototype.toString = function() {
      return ".key";
    };
    return KeyIndex2;
  }(Index);
  var KEY_INDEX = new KeyIndex();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var SortedMapIterator = function() {
    function SortedMapIterator2(node, startKey, comparator, isReverse_, resultGenerator_) {
      if (resultGenerator_ === void 0) {
        resultGenerator_ = null;
      }
      this.isReverse_ = isReverse_;
      this.resultGenerator_ = resultGenerator_;
      this.nodeStack_ = [];
      var cmp = 1;
      while (!node.isEmpty()) {
        node = node;
        cmp = startKey ? comparator(node.key, startKey) : 1;
        if (isReverse_) {
          cmp *= -1;
        }
        if (cmp < 0) {
          if (this.isReverse_) {
            node = node.left;
          } else {
            node = node.right;
          }
        } else if (cmp === 0) {
          this.nodeStack_.push(node);
          break;
        } else {
          this.nodeStack_.push(node);
          if (this.isReverse_) {
            node = node.right;
          } else {
            node = node.left;
          }
        }
      }
    }
    SortedMapIterator2.prototype.getNext = function() {
      if (this.nodeStack_.length === 0) {
        return null;
      }
      var node = this.nodeStack_.pop();
      var result;
      if (this.resultGenerator_) {
        result = this.resultGenerator_(node.key, node.value);
      } else {
        result = {key: node.key, value: node.value};
      }
      if (this.isReverse_) {
        node = node.left;
        while (!node.isEmpty()) {
          this.nodeStack_.push(node);
          node = node.right;
        }
      } else {
        node = node.right;
        while (!node.isEmpty()) {
          this.nodeStack_.push(node);
          node = node.left;
        }
      }
      return result;
    };
    SortedMapIterator2.prototype.hasNext = function() {
      return this.nodeStack_.length > 0;
    };
    SortedMapIterator2.prototype.peek = function() {
      if (this.nodeStack_.length === 0) {
        return null;
      }
      var node = this.nodeStack_[this.nodeStack_.length - 1];
      if (this.resultGenerator_) {
        return this.resultGenerator_(node.key, node.value);
      } else {
        return {key: node.key, value: node.value};
      }
    };
    return SortedMapIterator2;
  }();
  var LLRBNode = function() {
    function LLRBNode2(key, value, color, left, right) {
      this.key = key;
      this.value = value;
      this.color = color != null ? color : LLRBNode2.RED;
      this.left = left != null ? left : SortedMap.EMPTY_NODE;
      this.right = right != null ? right : SortedMap.EMPTY_NODE;
    }
    LLRBNode2.prototype.copy = function(key, value, color, left, right) {
      return new LLRBNode2(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
    };
    LLRBNode2.prototype.count = function() {
      return this.left.count() + 1 + this.right.count();
    };
    LLRBNode2.prototype.isEmpty = function() {
      return false;
    };
    LLRBNode2.prototype.inorderTraversal = function(action) {
      return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
    };
    LLRBNode2.prototype.reverseTraversal = function(action) {
      return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
    };
    LLRBNode2.prototype.min_ = function() {
      if (this.left.isEmpty()) {
        return this;
      } else {
        return this.left.min_();
      }
    };
    LLRBNode2.prototype.minKey = function() {
      return this.min_().key;
    };
    LLRBNode2.prototype.maxKey = function() {
      if (this.right.isEmpty()) {
        return this.key;
      } else {
        return this.right.maxKey();
      }
    };
    LLRBNode2.prototype.insert = function(key, value, comparator) {
      var n = this;
      var cmp = comparator(key, n.key);
      if (cmp < 0) {
        n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
      } else if (cmp === 0) {
        n = n.copy(null, value, null, null, null);
      } else {
        n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
      }
      return n.fixUp_();
    };
    LLRBNode2.prototype.removeMin_ = function() {
      if (this.left.isEmpty()) {
        return SortedMap.EMPTY_NODE;
      }
      var n = this;
      if (!n.left.isRed_() && !n.left.left.isRed_()) {
        n = n.moveRedLeft_();
      }
      n = n.copy(null, null, null, n.left.removeMin_(), null);
      return n.fixUp_();
    };
    LLRBNode2.prototype.remove = function(key, comparator) {
      var n, smallest;
      n = this;
      if (comparator(key, n.key) < 0) {
        if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
          n = n.moveRedLeft_();
        }
        n = n.copy(null, null, null, n.left.remove(key, comparator), null);
      } else {
        if (n.left.isRed_()) {
          n = n.rotateRight_();
        }
        if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
          n = n.moveRedRight_();
        }
        if (comparator(key, n.key) === 0) {
          if (n.right.isEmpty()) {
            return SortedMap.EMPTY_NODE;
          } else {
            smallest = n.right.min_();
            n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
          }
        }
        n = n.copy(null, null, null, null, n.right.remove(key, comparator));
      }
      return n.fixUp_();
    };
    LLRBNode2.prototype.isRed_ = function() {
      return this.color;
    };
    LLRBNode2.prototype.fixUp_ = function() {
      var n = this;
      if (n.right.isRed_() && !n.left.isRed_()) {
        n = n.rotateLeft_();
      }
      if (n.left.isRed_() && n.left.left.isRed_()) {
        n = n.rotateRight_();
      }
      if (n.left.isRed_() && n.right.isRed_()) {
        n = n.colorFlip_();
      }
      return n;
    };
    LLRBNode2.prototype.moveRedLeft_ = function() {
      var n = this.colorFlip_();
      if (n.right.left.isRed_()) {
        n = n.copy(null, null, null, null, n.right.rotateRight_());
        n = n.rotateLeft_();
        n = n.colorFlip_();
      }
      return n;
    };
    LLRBNode2.prototype.moveRedRight_ = function() {
      var n = this.colorFlip_();
      if (n.left.left.isRed_()) {
        n = n.rotateRight_();
        n = n.colorFlip_();
      }
      return n;
    };
    LLRBNode2.prototype.rotateLeft_ = function() {
      var nl = this.copy(null, null, LLRBNode2.RED, null, this.right.left);
      return this.right.copy(null, null, this.color, nl, null);
    };
    LLRBNode2.prototype.rotateRight_ = function() {
      var nr = this.copy(null, null, LLRBNode2.RED, this.left.right, null);
      return this.left.copy(null, null, this.color, null, nr);
    };
    LLRBNode2.prototype.colorFlip_ = function() {
      var left = this.left.copy(null, null, !this.left.color, null, null);
      var right = this.right.copy(null, null, !this.right.color, null, null);
      return this.copy(null, null, !this.color, left, right);
    };
    LLRBNode2.prototype.checkMaxDepth_ = function() {
      var blackDepth = this.check_();
      return Math.pow(2, blackDepth) <= this.count() + 1;
    };
    LLRBNode2.prototype.check_ = function() {
      if (this.isRed_() && this.left.isRed_()) {
        throw new Error("Red node has red child(" + this.key + "," + this.value + ")");
      }
      if (this.right.isRed_()) {
        throw new Error("Right child of (" + this.key + "," + this.value + ") is red");
      }
      var blackDepth = this.left.check_();
      if (blackDepth !== this.right.check_()) {
        throw new Error("Black depths differ");
      } else {
        return blackDepth + (this.isRed_() ? 0 : 1);
      }
    };
    LLRBNode2.RED = true;
    LLRBNode2.BLACK = false;
    return LLRBNode2;
  }();
  var LLRBEmptyNode = function() {
    function LLRBEmptyNode2() {
    }
    LLRBEmptyNode2.prototype.copy = function(key, value, color, left, right) {
      return this;
    };
    LLRBEmptyNode2.prototype.insert = function(key, value, comparator) {
      return new LLRBNode(key, value, null);
    };
    LLRBEmptyNode2.prototype.remove = function(key, comparator) {
      return this;
    };
    LLRBEmptyNode2.prototype.count = function() {
      return 0;
    };
    LLRBEmptyNode2.prototype.isEmpty = function() {
      return true;
    };
    LLRBEmptyNode2.prototype.inorderTraversal = function(action) {
      return false;
    };
    LLRBEmptyNode2.prototype.reverseTraversal = function(action) {
      return false;
    };
    LLRBEmptyNode2.prototype.minKey = function() {
      return null;
    };
    LLRBEmptyNode2.prototype.maxKey = function() {
      return null;
    };
    LLRBEmptyNode2.prototype.check_ = function() {
      return 0;
    };
    LLRBEmptyNode2.prototype.isRed_ = function() {
      return false;
    };
    return LLRBEmptyNode2;
  }();
  var SortedMap = function() {
    function SortedMap2(comparator_, root_) {
      if (root_ === void 0) {
        root_ = SortedMap2.EMPTY_NODE;
      }
      this.comparator_ = comparator_;
      this.root_ = root_;
    }
    SortedMap2.prototype.insert = function(key, value) {
      return new SortedMap2(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
    };
    SortedMap2.prototype.remove = function(key) {
      return new SortedMap2(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
    };
    SortedMap2.prototype.get = function(key) {
      var cmp;
      var node = this.root_;
      while (!node.isEmpty()) {
        cmp = this.comparator_(key, node.key);
        if (cmp === 0) {
          return node.value;
        } else if (cmp < 0) {
          node = node.left;
        } else if (cmp > 0) {
          node = node.right;
        }
      }
      return null;
    };
    SortedMap2.prototype.getPredecessorKey = function(key) {
      var cmp, node = this.root_, rightParent = null;
      while (!node.isEmpty()) {
        cmp = this.comparator_(key, node.key);
        if (cmp === 0) {
          if (!node.left.isEmpty()) {
            node = node.left;
            while (!node.right.isEmpty()) {
              node = node.right;
            }
            return node.key;
          } else if (rightParent) {
            return rightParent.key;
          } else {
            return null;
          }
        } else if (cmp < 0) {
          node = node.left;
        } else if (cmp > 0) {
          rightParent = node;
          node = node.right;
        }
      }
      throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?");
    };
    SortedMap2.prototype.isEmpty = function() {
      return this.root_.isEmpty();
    };
    SortedMap2.prototype.count = function() {
      return this.root_.count();
    };
    SortedMap2.prototype.minKey = function() {
      return this.root_.minKey();
    };
    SortedMap2.prototype.maxKey = function() {
      return this.root_.maxKey();
    };
    SortedMap2.prototype.inorderTraversal = function(action) {
      return this.root_.inorderTraversal(action);
    };
    SortedMap2.prototype.reverseTraversal = function(action) {
      return this.root_.reverseTraversal(action);
    };
    SortedMap2.prototype.getIterator = function(resultGenerator) {
      return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
    };
    SortedMap2.prototype.getIteratorFrom = function(key, resultGenerator) {
      return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
    };
    SortedMap2.prototype.getReverseIteratorFrom = function(key, resultGenerator) {
      return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
    };
    SortedMap2.prototype.getReverseIterator = function(resultGenerator) {
      return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
    };
    SortedMap2.EMPTY_NODE = new LLRBEmptyNode();
    return SortedMap2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function NAME_ONLY_COMPARATOR(left, right) {
    return nameCompare(left.name, right.name);
  }
  function NAME_COMPARATOR(left, right) {
    return nameCompare(left, right);
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var MAX_NODE$2;
  function setMaxNode$1(val) {
    MAX_NODE$2 = val;
  }
  var priorityHashText = function(priority) {
    if (typeof priority === "number") {
      return "number:" + doubleToIEEE754String(priority);
    } else {
      return "string:" + priority;
    }
  };
  var validatePriorityNode = function(priorityNode) {
    if (priorityNode.isLeafNode()) {
      var val = priorityNode.val();
      assert(typeof val === "string" || typeof val === "number" || typeof val === "object" && contains(val, ".sv"), "Priority must be a string or number.");
    } else {
      assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), "priority of unexpected type.");
    }
    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
  };
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __childrenNodeConstructor;
  var LeafNode = function() {
    function LeafNode2(value_, priorityNode_) {
      if (priorityNode_ === void 0) {
        priorityNode_ = LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
      }
      this.value_ = value_;
      this.priorityNode_ = priorityNode_;
      this.lazyHash_ = null;
      assert(this.value_ !== void 0 && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
      validatePriorityNode(this.priorityNode_);
    }
    Object.defineProperty(LeafNode2, "__childrenNodeConstructor", {
      get: function() {
        return __childrenNodeConstructor;
      },
      set: function(val) {
        __childrenNodeConstructor = val;
      },
      enumerable: false,
      configurable: true
    });
    LeafNode2.prototype.isLeafNode = function() {
      return true;
    };
    LeafNode2.prototype.getPriority = function() {
      return this.priorityNode_;
    };
    LeafNode2.prototype.updatePriority = function(newPriorityNode) {
      return new LeafNode2(this.value_, newPriorityNode);
    };
    LeafNode2.prototype.getImmediateChild = function(childName) {
      if (childName === ".priority") {
        return this.priorityNode_;
      } else {
        return LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
      }
    };
    LeafNode2.prototype.getChild = function(path) {
      if (pathIsEmpty(path)) {
        return this;
      } else if (pathGetFront(path) === ".priority") {
        return this.priorityNode_;
      } else {
        return LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
      }
    };
    LeafNode2.prototype.hasChild = function() {
      return false;
    };
    LeafNode2.prototype.getPredecessorChildName = function(childName, childNode) {
      return null;
    };
    LeafNode2.prototype.updateImmediateChild = function(childName, newChildNode) {
      if (childName === ".priority") {
        return this.updatePriority(newChildNode);
      } else if (newChildNode.isEmpty() && childName !== ".priority") {
        return this;
      } else {
        return LeafNode2.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
      }
    };
    LeafNode2.prototype.updateChild = function(path, newChildNode) {
      var front = pathGetFront(path);
      if (front === null) {
        return newChildNode;
      } else if (newChildNode.isEmpty() && front !== ".priority") {
        return this;
      } else {
        assert(front !== ".priority" || pathGetLength(path) === 1, ".priority must be the last token in a path");
        return this.updateImmediateChild(front, LeafNode2.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
      }
    };
    LeafNode2.prototype.isEmpty = function() {
      return false;
    };
    LeafNode2.prototype.numChildren = function() {
      return 0;
    };
    LeafNode2.prototype.forEachChild = function(index, action) {
      return false;
    };
    LeafNode2.prototype.val = function(exportFormat) {
      if (exportFormat && !this.getPriority().isEmpty()) {
        return {
          ".value": this.getValue(),
          ".priority": this.getPriority().val()
        };
      } else {
        return this.getValue();
      }
    };
    LeafNode2.prototype.hash = function() {
      if (this.lazyHash_ === null) {
        var toHash = "";
        if (!this.priorityNode_.isEmpty()) {
          toHash += "priority:" + priorityHashText(this.priorityNode_.val()) + ":";
        }
        var type = typeof this.value_;
        toHash += type + ":";
        if (type === "number") {
          toHash += doubleToIEEE754String(this.value_);
        } else {
          toHash += this.value_;
        }
        this.lazyHash_ = sha1(toHash);
      }
      return this.lazyHash_;
    };
    LeafNode2.prototype.getValue = function() {
      return this.value_;
    };
    LeafNode2.prototype.compareTo = function(other) {
      if (other === LeafNode2.__childrenNodeConstructor.EMPTY_NODE) {
        return 1;
      } else if (other instanceof LeafNode2.__childrenNodeConstructor) {
        return -1;
      } else {
        assert(other.isLeafNode(), "Unknown node type");
        return this.compareToLeafNode_(other);
      }
    };
    LeafNode2.prototype.compareToLeafNode_ = function(otherLeaf) {
      var otherLeafType = typeof otherLeaf.value_;
      var thisLeafType = typeof this.value_;
      var otherIndex = LeafNode2.VALUE_TYPE_ORDER.indexOf(otherLeafType);
      var thisIndex = LeafNode2.VALUE_TYPE_ORDER.indexOf(thisLeafType);
      assert(otherIndex >= 0, "Unknown leaf type: " + otherLeafType);
      assert(thisIndex >= 0, "Unknown leaf type: " + thisLeafType);
      if (otherIndex === thisIndex) {
        if (thisLeafType === "object") {
          return 0;
        } else {
          if (this.value_ < otherLeaf.value_) {
            return -1;
          } else if (this.value_ === otherLeaf.value_) {
            return 0;
          } else {
            return 1;
          }
        }
      } else {
        return thisIndex - otherIndex;
      }
    };
    LeafNode2.prototype.withIndex = function() {
      return this;
    };
    LeafNode2.prototype.isIndexed = function() {
      return true;
    };
    LeafNode2.prototype.equals = function(other) {
      if (other === this) {
        return true;
      } else if (other.isLeafNode()) {
        var otherLeaf = other;
        return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
      } else {
        return false;
      }
    };
    LeafNode2.VALUE_TYPE_ORDER = ["object", "boolean", "number", "string"];
    return LeafNode2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var nodeFromJSON$1;
  var MAX_NODE$1;
  function setNodeFromJSON(val) {
    nodeFromJSON$1 = val;
  }
  function setMaxNode(val) {
    MAX_NODE$1 = val;
  }
  var PriorityIndex = function(_super) {
    __extends(PriorityIndex2, _super);
    function PriorityIndex2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PriorityIndex2.prototype.compare = function(a, b) {
      var aPriority = a.node.getPriority();
      var bPriority = b.node.getPriority();
      var indexCmp = aPriority.compareTo(bPriority);
      if (indexCmp === 0) {
        return nameCompare(a.name, b.name);
      } else {
        return indexCmp;
      }
    };
    PriorityIndex2.prototype.isDefinedOn = function(node) {
      return !node.getPriority().isEmpty();
    };
    PriorityIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
      return !oldNode.getPriority().equals(newNode.getPriority());
    };
    PriorityIndex2.prototype.minPost = function() {
      return NamedNode.MIN;
    };
    PriorityIndex2.prototype.maxPost = function() {
      return new NamedNode(MAX_NAME, new LeafNode("[PRIORITY-POST]", MAX_NODE$1));
    };
    PriorityIndex2.prototype.makePost = function(indexValue, name2) {
      var priorityNode = nodeFromJSON$1(indexValue);
      return new NamedNode(name2, new LeafNode("[PRIORITY-POST]", priorityNode));
    };
    PriorityIndex2.prototype.toString = function() {
      return ".priority";
    };
    return PriorityIndex2;
  }(Index);
  var PRIORITY_INDEX = new PriorityIndex();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LOG_2 = Math.log(2);
  var Base12Num = function() {
    function Base12Num2(length) {
      var logBase2 = function(num) {
        return parseInt(Math.log(num) / LOG_2, 10);
      };
      var bitMask = function(bits) {
        return parseInt(Array(bits + 1).join("1"), 2);
      };
      this.count = logBase2(length + 1);
      this.current_ = this.count - 1;
      var mask = bitMask(this.count);
      this.bits_ = length + 1 & mask;
    }
    Base12Num2.prototype.nextBitIsOne = function() {
      var result = !(this.bits_ & 1 << this.current_);
      this.current_--;
      return result;
    };
    return Base12Num2;
  }();
  var buildChildSet = function(childList, cmp, keyFn, mapSortFn) {
    childList.sort(cmp);
    var buildBalancedTree = function(low, high) {
      var length = high - low;
      var namedNode;
      var key;
      if (length === 0) {
        return null;
      } else if (length === 1) {
        namedNode = childList[low];
        key = keyFn ? keyFn(namedNode) : namedNode;
        return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
      } else {
        var middle = parseInt(length / 2, 10) + low;
        var left = buildBalancedTree(low, middle);
        var right = buildBalancedTree(middle + 1, high);
        namedNode = childList[middle];
        key = keyFn ? keyFn(namedNode) : namedNode;
        return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
      }
    };
    var buildFrom12Array = function(base122) {
      var node = null;
      var root2 = null;
      var index = childList.length;
      var buildPennant = function(chunkSize2, color) {
        var low = index - chunkSize2;
        var high = index;
        index -= chunkSize2;
        var childTree = buildBalancedTree(low + 1, high);
        var namedNode = childList[low];
        var key = keyFn ? keyFn(namedNode) : namedNode;
        attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
      };
      var attachPennant = function(pennant) {
        if (node) {
          node.left = pennant;
          node = pennant;
        } else {
          root2 = pennant;
          node = pennant;
        }
      };
      for (var i = 0; i < base122.count; ++i) {
        var isOne = base122.nextBitIsOne();
        var chunkSize = Math.pow(2, base122.count - (i + 1));
        if (isOne) {
          buildPennant(chunkSize, LLRBNode.BLACK);
        } else {
          buildPennant(chunkSize, LLRBNode.BLACK);
          buildPennant(chunkSize, LLRBNode.RED);
        }
      }
      return root2;
    };
    var base12 = new Base12Num(childList.length);
    var root = buildFrom12Array(base12);
    return new SortedMap(mapSortFn || cmp, root);
  };
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _defaultIndexMap;
  var fallbackObject = {};
  var IndexMap = function() {
    function IndexMap2(indexes_, indexSet_) {
      this.indexes_ = indexes_;
      this.indexSet_ = indexSet_;
    }
    Object.defineProperty(IndexMap2, "Default", {
      get: function() {
        assert(fallbackObject && PRIORITY_INDEX, "ChildrenNode.ts has not been loaded");
        _defaultIndexMap = _defaultIndexMap || new IndexMap2({".priority": fallbackObject}, {".priority": PRIORITY_INDEX});
        return _defaultIndexMap;
      },
      enumerable: false,
      configurable: true
    });
    IndexMap2.prototype.get = function(indexKey) {
      var sortedMap = safeGet(this.indexes_, indexKey);
      if (!sortedMap) {
        throw new Error("No index defined for " + indexKey);
      }
      if (sortedMap instanceof SortedMap) {
        return sortedMap;
      } else {
        return null;
      }
    };
    IndexMap2.prototype.hasIndex = function(indexDefinition) {
      return contains(this.indexSet_, indexDefinition.toString());
    };
    IndexMap2.prototype.addIndex = function(indexDefinition, existingChildren) {
      assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
      var childList = [];
      var sawIndexedValue = false;
      var iter = existingChildren.getIterator(NamedNode.Wrap);
      var next = iter.getNext();
      while (next) {
        sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
        childList.push(next);
        next = iter.getNext();
      }
      var newIndex;
      if (sawIndexedValue) {
        newIndex = buildChildSet(childList, indexDefinition.getCompare());
      } else {
        newIndex = fallbackObject;
      }
      var indexName = indexDefinition.toString();
      var newIndexSet = __assign({}, this.indexSet_);
      newIndexSet[indexName] = indexDefinition;
      var newIndexes = __assign({}, this.indexes_);
      newIndexes[indexName] = newIndex;
      return new IndexMap2(newIndexes, newIndexSet);
    };
    IndexMap2.prototype.addToIndexes = function(namedNode, existingChildren) {
      var _this = this;
      var newIndexes = map(this.indexes_, function(indexedChildren, indexName) {
        var index = safeGet(_this.indexSet_, indexName);
        assert(index, "Missing index implementation for " + indexName);
        if (indexedChildren === fallbackObject) {
          if (index.isDefinedOn(namedNode.node)) {
            var childList = [];
            var iter = existingChildren.getIterator(NamedNode.Wrap);
            var next = iter.getNext();
            while (next) {
              if (next.name !== namedNode.name) {
                childList.push(next);
              }
              next = iter.getNext();
            }
            childList.push(namedNode);
            return buildChildSet(childList, index.getCompare());
          } else {
            return fallbackObject;
          }
        } else {
          var existingSnap = existingChildren.get(namedNode.name);
          var newChildren = indexedChildren;
          if (existingSnap) {
            newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
          }
          return newChildren.insert(namedNode, namedNode.node);
        }
      });
      return new IndexMap2(newIndexes, this.indexSet_);
    };
    IndexMap2.prototype.removeFromIndexes = function(namedNode, existingChildren) {
      var newIndexes = map(this.indexes_, function(indexedChildren) {
        if (indexedChildren === fallbackObject) {
          return indexedChildren;
        } else {
          var existingSnap = existingChildren.get(namedNode.name);
          if (existingSnap) {
            return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
          } else {
            return indexedChildren;
          }
        }
      });
      return new IndexMap2(newIndexes, this.indexSet_);
    };
    return IndexMap2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var EMPTY_NODE;
  var ChildrenNode = function() {
    function ChildrenNode2(children_, priorityNode_, indexMap_) {
      this.children_ = children_;
      this.priorityNode_ = priorityNode_;
      this.indexMap_ = indexMap_;
      this.lazyHash_ = null;
      if (this.priorityNode_) {
        validatePriorityNode(this.priorityNode_);
      }
      if (this.children_.isEmpty()) {
        assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), "An empty node cannot have a priority");
      }
    }
    Object.defineProperty(ChildrenNode2, "EMPTY_NODE", {
      get: function() {
        return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode2(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));
      },
      enumerable: false,
      configurable: true
    });
    ChildrenNode2.prototype.isLeafNode = function() {
      return false;
    };
    ChildrenNode2.prototype.getPriority = function() {
      return this.priorityNode_ || EMPTY_NODE;
    };
    ChildrenNode2.prototype.updatePriority = function(newPriorityNode) {
      if (this.children_.isEmpty()) {
        return this;
      } else {
        return new ChildrenNode2(this.children_, newPriorityNode, this.indexMap_);
      }
    };
    ChildrenNode2.prototype.getImmediateChild = function(childName) {
      if (childName === ".priority") {
        return this.getPriority();
      } else {
        var child2 = this.children_.get(childName);
        return child2 === null ? EMPTY_NODE : child2;
      }
    };
    ChildrenNode2.prototype.getChild = function(path) {
      var front = pathGetFront(path);
      if (front === null) {
        return this;
      }
      return this.getImmediateChild(front).getChild(pathPopFront(path));
    };
    ChildrenNode2.prototype.hasChild = function(childName) {
      return this.children_.get(childName) !== null;
    };
    ChildrenNode2.prototype.updateImmediateChild = function(childName, newChildNode) {
      assert(newChildNode, "We should always be passing snapshot nodes");
      if (childName === ".priority") {
        return this.updatePriority(newChildNode);
      } else {
        var namedNode = new NamedNode(childName, newChildNode);
        var newChildren = void 0, newIndexMap = void 0;
        if (newChildNode.isEmpty()) {
          newChildren = this.children_.remove(childName);
          newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
        } else {
          newChildren = this.children_.insert(childName, newChildNode);
          newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
        }
        var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
        return new ChildrenNode2(newChildren, newPriority, newIndexMap);
      }
    };
    ChildrenNode2.prototype.updateChild = function(path, newChildNode) {
      var front = pathGetFront(path);
      if (front === null) {
        return newChildNode;
      } else {
        assert(pathGetFront(path) !== ".priority" || pathGetLength(path) === 1, ".priority must be the last token in a path");
        var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
        return this.updateImmediateChild(front, newImmediateChild);
      }
    };
    ChildrenNode2.prototype.isEmpty = function() {
      return this.children_.isEmpty();
    };
    ChildrenNode2.prototype.numChildren = function() {
      return this.children_.count();
    };
    ChildrenNode2.prototype.val = function(exportFormat) {
      if (this.isEmpty()) {
        return null;
      }
      var obj = {};
      var numKeys = 0, maxKey = 0, allIntegerKeys = true;
      this.forEachChild(PRIORITY_INDEX, function(key2, childNode) {
        obj[key2] = childNode.val(exportFormat);
        numKeys++;
        if (allIntegerKeys && ChildrenNode2.INTEGER_REGEXP_.test(key2)) {
          maxKey = Math.max(maxKey, Number(key2));
        } else {
          allIntegerKeys = false;
        }
      });
      if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
        var array = [];
        for (var key in obj) {
          array[key] = obj[key];
        }
        return array;
      } else {
        if (exportFormat && !this.getPriority().isEmpty()) {
          obj[".priority"] = this.getPriority().val();
        }
        return obj;
      }
    };
    ChildrenNode2.prototype.hash = function() {
      if (this.lazyHash_ === null) {
        var toHash_1 = "";
        if (!this.getPriority().isEmpty()) {
          toHash_1 += "priority:" + priorityHashText(this.getPriority().val()) + ":";
        }
        this.forEachChild(PRIORITY_INDEX, function(key, childNode) {
          var childHash = childNode.hash();
          if (childHash !== "") {
            toHash_1 += ":" + key + ":" + childHash;
          }
        });
        this.lazyHash_ = toHash_1 === "" ? "" : sha1(toHash_1);
      }
      return this.lazyHash_;
    };
    ChildrenNode2.prototype.getPredecessorChildName = function(childName, childNode, index) {
      var idx = this.resolveIndex_(index);
      if (idx) {
        var predecessor2 = idx.getPredecessorKey(new NamedNode(childName, childNode));
        return predecessor2 ? predecessor2.name : null;
      } else {
        return this.children_.getPredecessorKey(childName);
      }
    };
    ChildrenNode2.prototype.getFirstChildName = function(indexDefinition) {
      var idx = this.resolveIndex_(indexDefinition);
      if (idx) {
        var minKey = idx.minKey();
        return minKey && minKey.name;
      } else {
        return this.children_.minKey();
      }
    };
    ChildrenNode2.prototype.getFirstChild = function(indexDefinition) {
      var minKey = this.getFirstChildName(indexDefinition);
      if (minKey) {
        return new NamedNode(minKey, this.children_.get(minKey));
      } else {
        return null;
      }
    };
    ChildrenNode2.prototype.getLastChildName = function(indexDefinition) {
      var idx = this.resolveIndex_(indexDefinition);
      if (idx) {
        var maxKey = idx.maxKey();
        return maxKey && maxKey.name;
      } else {
        return this.children_.maxKey();
      }
    };
    ChildrenNode2.prototype.getLastChild = function(indexDefinition) {
      var maxKey = this.getLastChildName(indexDefinition);
      if (maxKey) {
        return new NamedNode(maxKey, this.children_.get(maxKey));
      } else {
        return null;
      }
    };
    ChildrenNode2.prototype.forEachChild = function(index, action) {
      var idx = this.resolveIndex_(index);
      if (idx) {
        return idx.inorderTraversal(function(wrappedNode) {
          return action(wrappedNode.name, wrappedNode.node);
        });
      } else {
        return this.children_.inorderTraversal(action);
      }
    };
    ChildrenNode2.prototype.getIterator = function(indexDefinition) {
      return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
    };
    ChildrenNode2.prototype.getIteratorFrom = function(startPost, indexDefinition) {
      var idx = this.resolveIndex_(indexDefinition);
      if (idx) {
        return idx.getIteratorFrom(startPost, function(key) {
          return key;
        });
      } else {
        var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
        var next = iterator.peek();
        while (next != null && indexDefinition.compare(next, startPost) < 0) {
          iterator.getNext();
          next = iterator.peek();
        }
        return iterator;
      }
    };
    ChildrenNode2.prototype.getReverseIterator = function(indexDefinition) {
      return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
    };
    ChildrenNode2.prototype.getReverseIteratorFrom = function(endPost, indexDefinition) {
      var idx = this.resolveIndex_(indexDefinition);
      if (idx) {
        return idx.getReverseIteratorFrom(endPost, function(key) {
          return key;
        });
      } else {
        var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
        var next = iterator.peek();
        while (next != null && indexDefinition.compare(next, endPost) > 0) {
          iterator.getNext();
          next = iterator.peek();
        }
        return iterator;
      }
    };
    ChildrenNode2.prototype.compareTo = function(other) {
      if (this.isEmpty()) {
        if (other.isEmpty()) {
          return 0;
        } else {
          return -1;
        }
      } else if (other.isLeafNode() || other.isEmpty()) {
        return 1;
      } else if (other === MAX_NODE) {
        return -1;
      } else {
        return 0;
      }
    };
    ChildrenNode2.prototype.withIndex = function(indexDefinition) {
      if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {
        return this;
      } else {
        var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
        return new ChildrenNode2(this.children_, this.priorityNode_, newIndexMap);
      }
    };
    ChildrenNode2.prototype.isIndexed = function(index) {
      return index === KEY_INDEX || this.indexMap_.hasIndex(index);
    };
    ChildrenNode2.prototype.equals = function(other) {
      if (other === this) {
        return true;
      } else if (other.isLeafNode()) {
        return false;
      } else {
        var otherChildrenNode = other;
        if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
          return false;
        } else if (this.children_.count() === otherChildrenNode.children_.count()) {
          var thisIter = this.getIterator(PRIORITY_INDEX);
          var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
          var thisCurrent = thisIter.getNext();
          var otherCurrent = otherIter.getNext();
          while (thisCurrent && otherCurrent) {
            if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {
              return false;
            }
            thisCurrent = thisIter.getNext();
            otherCurrent = otherIter.getNext();
          }
          return thisCurrent === null && otherCurrent === null;
        } else {
          return false;
        }
      }
    };
    ChildrenNode2.prototype.resolveIndex_ = function(indexDefinition) {
      if (indexDefinition === KEY_INDEX) {
        return null;
      } else {
        return this.indexMap_.get(indexDefinition.toString());
      }
    };
    ChildrenNode2.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
    return ChildrenNode2;
  }();
  var MaxNode = function(_super) {
    __extends(MaxNode2, _super);
    function MaxNode2() {
      return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
    }
    MaxNode2.prototype.compareTo = function(other) {
      if (other === this) {
        return 0;
      } else {
        return 1;
      }
    };
    MaxNode2.prototype.equals = function(other) {
      return other === this;
    };
    MaxNode2.prototype.getPriority = function() {
      return this;
    };
    MaxNode2.prototype.getImmediateChild = function(childName) {
      return ChildrenNode.EMPTY_NODE;
    };
    MaxNode2.prototype.isEmpty = function() {
      return false;
    };
    return MaxNode2;
  }(ChildrenNode);
  var MAX_NODE = new MaxNode();
  Object.defineProperties(NamedNode, {
    MIN: {
      value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
    },
    MAX: {
      value: new NamedNode(MAX_NAME, MAX_NODE)
    }
  });
  KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
  LeafNode.__childrenNodeConstructor = ChildrenNode;
  setMaxNode$1(MAX_NODE);
  setMaxNode(MAX_NODE);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var USE_HINZE = true;
  function nodeFromJSON(json, priority) {
    if (priority === void 0) {
      priority = null;
    }
    if (json === null) {
      return ChildrenNode.EMPTY_NODE;
    }
    if (typeof json === "object" && ".priority" in json) {
      priority = json[".priority"];
    }
    assert(priority === null || typeof priority === "string" || typeof priority === "number" || typeof priority === "object" && ".sv" in priority, "Invalid priority type found: " + typeof priority);
    if (typeof json === "object" && ".value" in json && json[".value"] !== null) {
      json = json[".value"];
    }
    if (typeof json !== "object" || ".sv" in json) {
      var jsonLeaf = json;
      return new LeafNode(jsonLeaf, nodeFromJSON(priority));
    }
    if (!(json instanceof Array) && USE_HINZE) {
      var children_1 = [];
      var childrenHavePriority_1 = false;
      var hinzeJsonObj = json;
      each(hinzeJsonObj, function(key, child2) {
        if (key.substring(0, 1) !== ".") {
          var childNode = nodeFromJSON(child2);
          if (!childNode.isEmpty()) {
            childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();
            children_1.push(new NamedNode(key, childNode));
          }
        }
      });
      if (children_1.length === 0) {
        return ChildrenNode.EMPTY_NODE;
      }
      var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function(namedNode) {
        return namedNode.name;
      }, NAME_COMPARATOR);
      if (childrenHavePriority_1) {
        var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
        return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({".priority": sortedChildSet}, {".priority": PRIORITY_INDEX}));
      } else {
        return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
      }
    } else {
      var node_1 = ChildrenNode.EMPTY_NODE;
      each(json, function(key, childData) {
        if (contains(json, key)) {
          if (key.substring(0, 1) !== ".") {
            var childNode = nodeFromJSON(childData);
            if (childNode.isLeafNode() || !childNode.isEmpty()) {
              node_1 = node_1.updateImmediateChild(key, childNode);
            }
          }
        }
      });
      return node_1.updatePriority(nodeFromJSON(priority));
    }
  }
  setNodeFromJSON(nodeFromJSON);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PathIndex = function(_super) {
    __extends(PathIndex2, _super);
    function PathIndex2(indexPath_) {
      var _this = _super.call(this) || this;
      _this.indexPath_ = indexPath_;
      assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== ".priority", "Can't create PathIndex with empty path or .priority key");
      return _this;
    }
    PathIndex2.prototype.extractChild = function(snap) {
      return snap.getChild(this.indexPath_);
    };
    PathIndex2.prototype.isDefinedOn = function(node) {
      return !node.getChild(this.indexPath_).isEmpty();
    };
    PathIndex2.prototype.compare = function(a, b) {
      var aChild = this.extractChild(a.node);
      var bChild = this.extractChild(b.node);
      var indexCmp = aChild.compareTo(bChild);
      if (indexCmp === 0) {
        return nameCompare(a.name, b.name);
      } else {
        return indexCmp;
      }
    };
    PathIndex2.prototype.makePost = function(indexValue, name2) {
      var valueNode = nodeFromJSON(indexValue);
      var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
      return new NamedNode(name2, node);
    };
    PathIndex2.prototype.maxPost = function() {
      var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
      return new NamedNode(MAX_NAME, node);
    };
    PathIndex2.prototype.toString = function() {
      return pathSlice(this.indexPath_, 0).join("/");
    };
    return PathIndex2;
  }(Index);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ValueIndex = function(_super) {
    __extends(ValueIndex2, _super);
    function ValueIndex2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueIndex2.prototype.compare = function(a, b) {
      var indexCmp = a.node.compareTo(b.node);
      if (indexCmp === 0) {
        return nameCompare(a.name, b.name);
      } else {
        return indexCmp;
      }
    };
    ValueIndex2.prototype.isDefinedOn = function(node) {
      return true;
    };
    ValueIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
      return !oldNode.equals(newNode);
    };
    ValueIndex2.prototype.minPost = function() {
      return NamedNode.MIN;
    };
    ValueIndex2.prototype.maxPost = function() {
      return NamedNode.MAX;
    };
    ValueIndex2.prototype.makePost = function(indexValue, name2) {
      var valueNode = nodeFromJSON(indexValue);
      return new NamedNode(name2, valueNode);
    };
    ValueIndex2.prototype.toString = function() {
      return ".value";
    };
    return ValueIndex2;
  }(Index);
  var VALUE_INDEX = new ValueIndex();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var PUSH_CHARS = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
  var MIN_PUSH_CHAR = "-";
  var MAX_PUSH_CHAR = "z";
  var MAX_KEY_LEN = 786;
  var nextPushId = function() {
    var lastPushTime = 0;
    var lastRandChars = [];
    return function(now) {
      var duplicateTime = now === lastPushTime;
      lastPushTime = now;
      var i;
      var timeStampChars = new Array(8);
      for (i = 7; i >= 0; i--) {
        timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
        now = Math.floor(now / 64);
      }
      assert(now === 0, "Cannot push at time == 0");
      var id = timeStampChars.join("");
      if (!duplicateTime) {
        for (i = 0; i < 12; i++) {
          lastRandChars[i] = Math.floor(Math.random() * 64);
        }
      } else {
        for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
          lastRandChars[i] = 0;
        }
        lastRandChars[i]++;
      }
      for (i = 0; i < 12; i++) {
        id += PUSH_CHARS.charAt(lastRandChars[i]);
      }
      assert(id.length === 20, "nextPushId: Length should be 20.");
      return id;
    };
  }();
  var successor = function(key) {
    if (key === "" + INTEGER_32_MAX) {
      return MIN_PUSH_CHAR;
    }
    var keyAsInt = tryParseInt(key);
    if (keyAsInt != null) {
      return "" + (keyAsInt + 1);
    }
    var next = new Array(key.length);
    for (var i_1 = 0; i_1 < next.length; i_1++) {
      next[i_1] = key.charAt(i_1);
    }
    if (next.length < MAX_KEY_LEN) {
      next.push(MIN_PUSH_CHAR);
      return next.join("");
    }
    var i = next.length - 1;
    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {
      i--;
    }
    if (i === -1) {
      return MAX_NAME;
    }
    var source = next[i];
    var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
    next[i] = sourcePlusOne;
    return next.slice(0, i + 1).join("");
  };
  var predecessor = function(key) {
    if (key === "" + INTEGER_32_MIN) {
      return MIN_NAME;
    }
    var keyAsInt = tryParseInt(key);
    if (keyAsInt != null) {
      return "" + (keyAsInt - 1);
    }
    var next = new Array(key.length);
    for (var i = 0; i < next.length; i++) {
      next[i] = key.charAt(i);
    }
    if (next[next.length - 1] === MIN_PUSH_CHAR) {
      if (next.length === 1) {
        return "" + INTEGER_32_MAX;
      }
      delete next[next.length - 1];
      return next.join("");
    }
    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
    return next.join("") + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
  };
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function changeValue(snapshotNode) {
    return {type: "value", snapshotNode};
  }
  function changeChildAdded(childName, snapshotNode) {
    return {type: "child_added", snapshotNode, childName};
  }
  function changeChildRemoved(childName, snapshotNode) {
    return {type: "child_removed", snapshotNode, childName};
  }
  function changeChildChanged(childName, snapshotNode, oldSnap) {
    return {
      type: "child_changed",
      snapshotNode,
      childName,
      oldSnap
    };
  }
  function changeChildMoved(childName, snapshotNode) {
    return {type: "child_moved", snapshotNode, childName};
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var IndexedFilter = function() {
    function IndexedFilter2(index_) {
      this.index_ = index_;
    }
    IndexedFilter2.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
      assert(snap.isIndexed(this.index_), "A node must be indexed if only a child is updated");
      var oldChild = snap.getImmediateChild(key);
      if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
        if (oldChild.isEmpty() === newChild.isEmpty()) {
          return snap;
        }
      }
      if (optChangeAccumulator != null) {
        if (newChild.isEmpty()) {
          if (snap.hasChild(key)) {
            optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
          } else {
            assert(snap.isLeafNode(), "A child remove without an old child only makes sense on a leaf node");
          }
        } else if (oldChild.isEmpty()) {
          optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
        } else {
          optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
        }
      }
      if (snap.isLeafNode() && newChild.isEmpty()) {
        return snap;
      } else {
        return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
      }
    };
    IndexedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
      if (optChangeAccumulator != null) {
        if (!oldSnap.isLeafNode()) {
          oldSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
            if (!newSnap.hasChild(key)) {
              optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
            }
          });
        }
        if (!newSnap.isLeafNode()) {
          newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
            if (oldSnap.hasChild(key)) {
              var oldChild = oldSnap.getImmediateChild(key);
              if (!oldChild.equals(childNode)) {
                optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
              }
            } else {
              optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
            }
          });
        }
      }
      return newSnap.withIndex(this.index_);
    };
    IndexedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
      if (oldSnap.isEmpty()) {
        return ChildrenNode.EMPTY_NODE;
      } else {
        return oldSnap.updatePriority(newPriority);
      }
    };
    IndexedFilter2.prototype.filtersNodes = function() {
      return false;
    };
    IndexedFilter2.prototype.getIndexedFilter = function() {
      return this;
    };
    IndexedFilter2.prototype.getIndex = function() {
      return this.index_;
    };
    return IndexedFilter2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var RangedFilter = function() {
    function RangedFilter2(params) {
      this.indexedFilter_ = new IndexedFilter(params.getIndex());
      this.index_ = params.getIndex();
      this.startPost_ = RangedFilter2.getStartPost_(params);
      this.endPost_ = RangedFilter2.getEndPost_(params);
    }
    RangedFilter2.prototype.getStartPost = function() {
      return this.startPost_;
    };
    RangedFilter2.prototype.getEndPost = function() {
      return this.endPost_;
    };
    RangedFilter2.prototype.matches = function(node) {
      return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;
    };
    RangedFilter2.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
      if (!this.matches(new NamedNode(key, newChild))) {
        newChild = ChildrenNode.EMPTY_NODE;
      }
      return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    };
    RangedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
      if (newSnap.isLeafNode()) {
        newSnap = ChildrenNode.EMPTY_NODE;
      }
      var filtered = newSnap.withIndex(this.index_);
      filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
      var self2 = this;
      newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
        if (!self2.matches(new NamedNode(key, childNode))) {
          filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
        }
      });
      return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    RangedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
      return oldSnap;
    };
    RangedFilter2.prototype.filtersNodes = function() {
      return true;
    };
    RangedFilter2.prototype.getIndexedFilter = function() {
      return this.indexedFilter_;
    };
    RangedFilter2.prototype.getIndex = function() {
      return this.index_;
    };
    RangedFilter2.getStartPost_ = function(params) {
      if (params.hasStart()) {
        var startName = params.getIndexStartName();
        return params.getIndex().makePost(params.getIndexStartValue(), startName);
      } else {
        return params.getIndex().minPost();
      }
    };
    RangedFilter2.getEndPost_ = function(params) {
      if (params.hasEnd()) {
        var endName = params.getIndexEndName();
        return params.getIndex().makePost(params.getIndexEndValue(), endName);
      } else {
        return params.getIndex().maxPost();
      }
    };
    return RangedFilter2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LimitedFilter = function() {
    function LimitedFilter2(params) {
      this.rangedFilter_ = new RangedFilter(params);
      this.index_ = params.getIndex();
      this.limit_ = params.getLimit();
      this.reverse_ = !params.isViewFromLeft();
    }
    LimitedFilter2.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
      if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
        newChild = ChildrenNode.EMPTY_NODE;
      }
      if (snap.getImmediateChild(key).equals(newChild)) {
        return snap;
      } else if (snap.numChildren() < this.limit_) {
        return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
      } else {
        return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
      }
    };
    LimitedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
      var filtered;
      if (newSnap.isLeafNode() || newSnap.isEmpty()) {
        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
      } else {
        if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
          filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
          var iterator = void 0;
          if (this.reverse_) {
            iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
          } else {
            iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
          }
          var count = 0;
          while (iterator.hasNext() && count < this.limit_) {
            var next = iterator.getNext();
            var inRange = void 0;
            if (this.reverse_) {
              inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
            } else {
              inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
            }
            if (inRange) {
              filtered = filtered.updateImmediateChild(next.name, next.node);
              count++;
            } else {
              break;
            }
          }
        } else {
          filtered = newSnap.withIndex(this.index_);
          filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
          var startPost = void 0;
          var endPost = void 0;
          var cmp = void 0;
          var iterator = void 0;
          if (this.reverse_) {
            iterator = filtered.getReverseIterator(this.index_);
            startPost = this.rangedFilter_.getEndPost();
            endPost = this.rangedFilter_.getStartPost();
            var indexCompare_1 = this.index_.getCompare();
            cmp = function(a, b) {
              return indexCompare_1(b, a);
            };
          } else {
            iterator = filtered.getIterator(this.index_);
            startPost = this.rangedFilter_.getStartPost();
            endPost = this.rangedFilter_.getEndPost();
            cmp = this.index_.getCompare();
          }
          var count = 0;
          var foundStartPost = false;
          while (iterator.hasNext()) {
            var next = iterator.getNext();
            if (!foundStartPost && cmp(startPost, next) <= 0) {
              foundStartPost = true;
            }
            var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
            if (inRange) {
              count++;
            } else {
              filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
            }
          }
        }
      }
      return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    LimitedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
      return oldSnap;
    };
    LimitedFilter2.prototype.filtersNodes = function() {
      return true;
    };
    LimitedFilter2.prototype.getIndexedFilter = function() {
      return this.rangedFilter_.getIndexedFilter();
    };
    LimitedFilter2.prototype.getIndex = function() {
      return this.index_;
    };
    LimitedFilter2.prototype.fullLimitUpdateChild_ = function(snap, childKey, childSnap, source, changeAccumulator) {
      var cmp;
      if (this.reverse_) {
        var indexCmp_1 = this.index_.getCompare();
        cmp = function(a, b) {
          return indexCmp_1(b, a);
        };
      } else {
        cmp = this.index_.getCompare();
      }
      var oldEventCache = snap;
      assert(oldEventCache.numChildren() === this.limit_, "");
      var newChildNamedNode = new NamedNode(childKey, childSnap);
      var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
      var inRange = this.rangedFilter_.matches(newChildNamedNode);
      if (oldEventCache.hasChild(childKey)) {
        var oldChildSnap = oldEventCache.getImmediateChild(childKey);
        var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
        while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
          nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
        }
        var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
        var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
        if (remainsInWindow) {
          if (changeAccumulator != null) {
            changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
          }
          return oldEventCache.updateImmediateChild(childKey, childSnap);
        } else {
          if (changeAccumulator != null) {
            changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
          }
          var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
          var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
          if (nextChildInRange) {
            if (changeAccumulator != null) {
              changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
            }
            return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
          } else {
            return newEventCache;
          }
        }
      } else if (childSnap.isEmpty()) {
        return snap;
      } else if (inRange) {
        if (cmp(windowBoundary, newChildNamedNode) >= 0) {
          if (changeAccumulator != null) {
            changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
            changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
          }
          return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
        } else {
          return snap;
        }
      } else {
        return snap;
      }
    };
    return LimitedFilter2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var QueryParams = function() {
    function QueryParams2() {
      this.limitSet_ = false;
      this.startSet_ = false;
      this.startNameSet_ = false;
      this.startAfterSet_ = false;
      this.endSet_ = false;
      this.endNameSet_ = false;
      this.endBeforeSet_ = false;
      this.limit_ = 0;
      this.viewFrom_ = "";
      this.indexStartValue_ = null;
      this.indexStartName_ = "";
      this.indexEndValue_ = null;
      this.indexEndName_ = "";
      this.index_ = PRIORITY_INDEX;
    }
    QueryParams2.prototype.hasStart = function() {
      return this.startSet_;
    };
    QueryParams2.prototype.hasStartAfter = function() {
      return this.startAfterSet_;
    };
    QueryParams2.prototype.hasEndBefore = function() {
      return this.endBeforeSet_;
    };
    QueryParams2.prototype.isViewFromLeft = function() {
      if (this.viewFrom_ === "") {
        return this.startSet_;
      } else {
        return this.viewFrom_ === "l";
      }
    };
    QueryParams2.prototype.getIndexStartValue = function() {
      assert(this.startSet_, "Only valid if start has been set");
      return this.indexStartValue_;
    };
    QueryParams2.prototype.getIndexStartName = function() {
      assert(this.startSet_, "Only valid if start has been set");
      if (this.startNameSet_) {
        return this.indexStartName_;
      } else {
        return MIN_NAME;
      }
    };
    QueryParams2.prototype.hasEnd = function() {
      return this.endSet_;
    };
    QueryParams2.prototype.getIndexEndValue = function() {
      assert(this.endSet_, "Only valid if end has been set");
      return this.indexEndValue_;
    };
    QueryParams2.prototype.getIndexEndName = function() {
      assert(this.endSet_, "Only valid if end has been set");
      if (this.endNameSet_) {
        return this.indexEndName_;
      } else {
        return MAX_NAME;
      }
    };
    QueryParams2.prototype.hasLimit = function() {
      return this.limitSet_;
    };
    QueryParams2.prototype.hasAnchoredLimit = function() {
      return this.limitSet_ && this.viewFrom_ !== "";
    };
    QueryParams2.prototype.getLimit = function() {
      assert(this.limitSet_, "Only valid if limit has been set");
      return this.limit_;
    };
    QueryParams2.prototype.getIndex = function() {
      return this.index_;
    };
    QueryParams2.prototype.loadsAllData = function() {
      return !(this.startSet_ || this.endSet_ || this.limitSet_);
    };
    QueryParams2.prototype.isDefault = function() {
      return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
    };
    QueryParams2.prototype.copy = function() {
      var copy = new QueryParams2();
      copy.limitSet_ = this.limitSet_;
      copy.limit_ = this.limit_;
      copy.startSet_ = this.startSet_;
      copy.indexStartValue_ = this.indexStartValue_;
      copy.startNameSet_ = this.startNameSet_;
      copy.indexStartName_ = this.indexStartName_;
      copy.endSet_ = this.endSet_;
      copy.indexEndValue_ = this.indexEndValue_;
      copy.endNameSet_ = this.endNameSet_;
      copy.indexEndName_ = this.indexEndName_;
      copy.index_ = this.index_;
      copy.viewFrom_ = this.viewFrom_;
      return copy;
    };
    return QueryParams2;
  }();
  function queryParamsGetNodeFilter(queryParams) {
    if (queryParams.loadsAllData()) {
      return new IndexedFilter(queryParams.getIndex());
    } else if (queryParams.hasLimit()) {
      return new LimitedFilter(queryParams);
    } else {
      return new RangedFilter(queryParams);
    }
  }
  function queryParamsLimitToFirst(queryParams, newLimit) {
    var newParams = queryParams.copy();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = "l";
    return newParams;
  }
  function queryParamsLimitToLast(queryParams, newLimit) {
    var newParams = queryParams.copy();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = "r";
    return newParams;
  }
  function queryParamsStartAt(queryParams, indexValue, key) {
    var newParams = queryParams.copy();
    newParams.startSet_ = true;
    if (indexValue === void 0) {
      indexValue = null;
    }
    newParams.indexStartValue_ = indexValue;
    if (key != null) {
      newParams.startNameSet_ = true;
      newParams.indexStartName_ = key;
    } else {
      newParams.startNameSet_ = false;
      newParams.indexStartName_ = "";
    }
    return newParams;
  }
  function queryParamsStartAfter(queryParams, indexValue, key) {
    var params;
    if (queryParams.index_ === KEY_INDEX) {
      if (typeof indexValue === "string") {
        indexValue = successor(indexValue);
      }
      params = queryParamsStartAt(queryParams, indexValue, key);
    } else {
      var childKey = void 0;
      if (key == null) {
        childKey = MAX_NAME;
      } else {
        childKey = successor(key);
      }
      params = queryParamsStartAt(queryParams, indexValue, childKey);
    }
    params.startAfterSet_ = true;
    return params;
  }
  function queryParamsEndAt(queryParams, indexValue, key) {
    var newParams = queryParams.copy();
    newParams.endSet_ = true;
    if (indexValue === void 0) {
      indexValue = null;
    }
    newParams.indexEndValue_ = indexValue;
    if (key !== void 0) {
      newParams.endNameSet_ = true;
      newParams.indexEndName_ = key;
    } else {
      newParams.endNameSet_ = false;
      newParams.indexEndName_ = "";
    }
    return newParams;
  }
  function queryParamsEndBefore(queryParams, indexValue, key) {
    var childKey;
    var params;
    if (queryParams.index_ === KEY_INDEX) {
      if (typeof indexValue === "string") {
        indexValue = predecessor(indexValue);
      }
      params = queryParamsEndAt(queryParams, indexValue, key);
    } else {
      if (key == null) {
        childKey = MIN_NAME;
      } else {
        childKey = predecessor(key);
      }
      params = queryParamsEndAt(queryParams, indexValue, childKey);
    }
    params.endBeforeSet_ = true;
    return params;
  }
  function queryParamsOrderBy(queryParams, index) {
    var newParams = queryParams.copy();
    newParams.index_ = index;
    return newParams;
  }
  function queryParamsToRestQueryStringParameters(queryParams) {
    var qs = {};
    if (queryParams.isDefault()) {
      return qs;
    }
    var orderBy;
    if (queryParams.index_ === PRIORITY_INDEX) {
      orderBy = "$priority";
    } else if (queryParams.index_ === VALUE_INDEX) {
      orderBy = "$value";
    } else if (queryParams.index_ === KEY_INDEX) {
      orderBy = "$key";
    } else {
      assert(queryParams.index_ instanceof PathIndex, "Unrecognized index type!");
      orderBy = queryParams.index_.toString();
    }
    qs["orderBy"] = stringify(orderBy);
    if (queryParams.startSet_) {
      qs["startAt"] = stringify(queryParams.indexStartValue_);
      if (queryParams.startNameSet_) {
        qs["startAt"] += "," + stringify(queryParams.indexStartName_);
      }
    }
    if (queryParams.endSet_) {
      qs["endAt"] = stringify(queryParams.indexEndValue_);
      if (queryParams.endNameSet_) {
        qs["endAt"] += "," + stringify(queryParams.indexEndName_);
      }
    }
    if (queryParams.limitSet_) {
      if (queryParams.isViewFromLeft()) {
        qs["limitToFirst"] = queryParams.limit_;
      } else {
        qs["limitToLast"] = queryParams.limit_;
      }
    }
    return qs;
  }
  function queryParamsGetQueryObject(queryParams) {
    var obj = {};
    if (queryParams.startSet_) {
      obj["sp"] = queryParams.indexStartValue_;
      if (queryParams.startNameSet_) {
        obj["sn"] = queryParams.indexStartName_;
      }
    }
    if (queryParams.endSet_) {
      obj["ep"] = queryParams.indexEndValue_;
      if (queryParams.endNameSet_) {
        obj["en"] = queryParams.indexEndName_;
      }
    }
    if (queryParams.limitSet_) {
      obj["l"] = queryParams.limit_;
      var viewFrom = queryParams.viewFrom_;
      if (viewFrom === "") {
        if (queryParams.isViewFromLeft()) {
          viewFrom = "l";
        } else {
          viewFrom = "r";
        }
      }
      obj["vf"] = viewFrom;
    }
    if (queryParams.index_ !== PRIORITY_INDEX) {
      obj["i"] = queryParams.index_.toString();
    }
    return obj;
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ReadonlyRestClient = function(_super) {
    __extends(ReadonlyRestClient2, _super);
    function ReadonlyRestClient2(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
      var _this = _super.call(this) || this;
      _this.repoInfo_ = repoInfo_;
      _this.onDataUpdate_ = onDataUpdate_;
      _this.authTokenProvider_ = authTokenProvider_;
      _this.appCheckTokenProvider_ = appCheckTokenProvider_;
      _this.log_ = logWrapper("p:rest:");
      _this.listens_ = {};
      return _this;
    }
    ReadonlyRestClient2.prototype.reportStats = function(stats2) {
      throw new Error("Method not implemented.");
    };
    ReadonlyRestClient2.getListenId_ = function(query2, tag) {
      if (tag !== void 0) {
        return "tag$" + tag;
      } else {
        assert(query2._queryParams.isDefault(), "should have a tag if it's not a default query.");
        return query2._path.toString();
      }
    };
    ReadonlyRestClient2.prototype.listen = function(query2, currentHashFn, tag, onComplete) {
      var _this = this;
      var pathString = query2._path.toString();
      this.log_("Listen called for " + pathString + " " + query2._queryIdentifier);
      var listenId = ReadonlyRestClient2.getListenId_(query2, tag);
      var thisListen = {};
      this.listens_[listenId] = thisListen;
      var queryStringParameters = queryParamsToRestQueryStringParameters(query2._queryParams);
      this.restRequest_(pathString + ".json", queryStringParameters, function(error2, result) {
        var data = result;
        if (error2 === 404) {
          data = null;
          error2 = null;
        }
        if (error2 === null) {
          _this.onDataUpdate_(pathString, data, false, tag);
        }
        if (safeGet(_this.listens_, listenId) === thisListen) {
          var status_1;
          if (!error2) {
            status_1 = "ok";
          } else if (error2 === 401) {
            status_1 = "permission_denied";
          } else {
            status_1 = "rest_error:" + error2;
          }
          onComplete(status_1, null);
        }
      });
    };
    ReadonlyRestClient2.prototype.unlisten = function(query2, tag) {
      var listenId = ReadonlyRestClient2.getListenId_(query2, tag);
      delete this.listens_[listenId];
    };
    ReadonlyRestClient2.prototype.get = function(query2) {
      var _this = this;
      var queryStringParameters = queryParamsToRestQueryStringParameters(query2._queryParams);
      var pathString = query2._path.toString();
      var deferred = new Deferred();
      this.restRequest_(pathString + ".json", queryStringParameters, function(error2, result) {
        var data = result;
        if (error2 === 404) {
          data = null;
          error2 = null;
        }
        if (error2 === null) {
          _this.onDataUpdate_(pathString, data, false, null);
          deferred.resolve(data);
        } else {
          deferred.reject(new Error(data));
        }
      });
      return deferred.promise;
    };
    ReadonlyRestClient2.prototype.refreshAuthToken = function(token) {
    };
    ReadonlyRestClient2.prototype.restRequest_ = function(pathString, queryStringParameters, callback) {
      var _this = this;
      if (queryStringParameters === void 0) {
        queryStringParameters = {};
      }
      queryStringParameters["format"] = "export";
      return Promise.all([
        this.authTokenProvider_.getToken(false),
        this.appCheckTokenProvider_.getToken(false)
      ]).then(function(_a) {
        var _b = __read(_a, 2), authToken = _b[0], appCheckToken = _b[1];
        if (authToken && authToken.accessToken) {
          queryStringParameters["auth"] = authToken.accessToken;
        }
        if (appCheckToken && appCheckToken.token) {
          queryStringParameters["ac"] = appCheckToken.token;
        }
        var url = (_this.repoInfo_.secure ? "https://" : "http://") + _this.repoInfo_.host + pathString + "?ns=" + _this.repoInfo_.namespace + querystring(queryStringParameters);
        _this.log_("Sending REST request for " + url);
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
          if (callback && xhr.readyState === 4) {
            _this.log_("REST Response for " + url + " received. status:", xhr.status, "response:", xhr.responseText);
            var res = null;
            if (xhr.status >= 200 && xhr.status < 300) {
              try {
                res = jsonEval(xhr.responseText);
              } catch (e) {
                warn("Failed to parse JSON response for " + url + ": " + xhr.responseText);
              }
              callback(null, res);
            } else {
              if (xhr.status !== 401 && xhr.status !== 404) {
                warn("Got unsuccessful REST response for " + url + " Status: " + xhr.status);
              }
              callback(xhr.status);
            }
            callback = null;
          }
        };
        xhr.open("GET", url, true);
        xhr.send();
      });
    };
    return ReadonlyRestClient2;
  }(ServerActions);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var SnapshotHolder = function() {
    function SnapshotHolder2() {
      this.rootNode_ = ChildrenNode.EMPTY_NODE;
    }
    SnapshotHolder2.prototype.getNode = function(path) {
      return this.rootNode_.getChild(path);
    };
    SnapshotHolder2.prototype.updateSnapshot = function(path, newSnapshotNode) {
      this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
    };
    return SnapshotHolder2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newSparseSnapshotTree() {
    return {
      value: null,
      children: new Map()
    };
  }
  function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
    if (pathIsEmpty(path)) {
      sparseSnapshotTree.value = data;
      sparseSnapshotTree.children.clear();
    } else if (sparseSnapshotTree.value !== null) {
      sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
    } else {
      var childKey = pathGetFront(path);
      if (!sparseSnapshotTree.children.has(childKey)) {
        sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
      }
      var child2 = sparseSnapshotTree.children.get(childKey);
      path = pathPopFront(path);
      sparseSnapshotTreeRemember(child2, path, data);
    }
  }
  function sparseSnapshotTreeForget(sparseSnapshotTree, path) {
    if (pathIsEmpty(path)) {
      sparseSnapshotTree.value = null;
      sparseSnapshotTree.children.clear();
      return true;
    } else {
      if (sparseSnapshotTree.value !== null) {
        if (sparseSnapshotTree.value.isLeafNode()) {
          return false;
        } else {
          var value = sparseSnapshotTree.value;
          sparseSnapshotTree.value = null;
          value.forEachChild(PRIORITY_INDEX, function(key, tree) {
            sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);
          });
          return sparseSnapshotTreeForget(sparseSnapshotTree, path);
        }
      } else if (sparseSnapshotTree.children.size > 0) {
        var childKey = pathGetFront(path);
        path = pathPopFront(path);
        if (sparseSnapshotTree.children.has(childKey)) {
          var safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);
          if (safeToRemove) {
            sparseSnapshotTree.children.delete(childKey);
          }
        }
        return sparseSnapshotTree.children.size === 0;
      } else {
        return true;
      }
    }
  }
  function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
    if (sparseSnapshotTree.value !== null) {
      func(prefixPath, sparseSnapshotTree.value);
    } else {
      sparseSnapshotTreeForEachChild(sparseSnapshotTree, function(key, tree) {
        var path = new Path(prefixPath.toString() + "/" + key);
        sparseSnapshotTreeForEachTree(tree, path, func);
      });
    }
  }
  function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
    sparseSnapshotTree.children.forEach(function(tree, key) {
      func(key, tree);
    });
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var StatsListener = function() {
    function StatsListener2(collection_) {
      this.collection_ = collection_;
      this.last_ = null;
    }
    StatsListener2.prototype.get = function() {
      var newStats = this.collection_.get();
      var delta = __assign({}, newStats);
      if (this.last_) {
        each(this.last_, function(stat, value) {
          delta[stat] = delta[stat] - value;
        });
      }
      this.last_ = newStats;
      return delta;
    };
    return StatsListener2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var FIRST_STATS_MIN_TIME = 10 * 1e3;
  var FIRST_STATS_MAX_TIME = 30 * 1e3;
  var REPORT_STATS_INTERVAL = 5 * 60 * 1e3;
  var StatsReporter = function() {
    function StatsReporter2(collection, server_) {
      this.server_ = server_;
      this.statsToReport_ = {};
      this.statsListener_ = new StatsListener(collection);
      var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
      setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
    }
    StatsReporter2.prototype.reportStats_ = function() {
      var _this = this;
      var stats2 = this.statsListener_.get();
      var reportedStats = {};
      var haveStatsToReport = false;
      each(stats2, function(stat, value) {
        if (value > 0 && contains(_this.statsToReport_, stat)) {
          reportedStats[stat] = value;
          haveStatsToReport = true;
        }
      });
      if (haveStatsToReport) {
        this.server_.reportStats(reportedStats);
      }
      setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
    };
    return StatsReporter2;
  }();
  function statsReporterIncludeStat(reporter, stat) {
    reporter.statsToReport_[stat] = true;
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var OperationType;
  (function(OperationType2) {
    OperationType2[OperationType2["OVERWRITE"] = 0] = "OVERWRITE";
    OperationType2[OperationType2["MERGE"] = 1] = "MERGE";
    OperationType2[OperationType2["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
    OperationType2[OperationType2["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
  })(OperationType || (OperationType = {}));
  function newOperationSourceUser() {
    return {
      fromUser: true,
      fromServer: false,
      queryId: null,
      tagged: false
    };
  }
  function newOperationSourceServer() {
    return {
      fromUser: false,
      fromServer: true,
      queryId: null,
      tagged: false
    };
  }
  function newOperationSourceServerTaggedQuery(queryId) {
    return {
      fromUser: false,
      fromServer: true,
      queryId,
      tagged: true
    };
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var AckUserWrite = function() {
    function AckUserWrite2(path, affectedTree, revert) {
      this.path = path;
      this.affectedTree = affectedTree;
      this.revert = revert;
      this.type = OperationType.ACK_USER_WRITE;
      this.source = newOperationSourceUser();
    }
    AckUserWrite2.prototype.operationForChild = function(childName) {
      if (!pathIsEmpty(this.path)) {
        assert(pathGetFront(this.path) === childName, "operationForChild called for unrelated child.");
        return new AckUserWrite2(pathPopFront(this.path), this.affectedTree, this.revert);
      } else if (this.affectedTree.value != null) {
        assert(this.affectedTree.children.isEmpty(), "affectedTree should not have overlapping affected paths.");
        return this;
      } else {
        var childTree = this.affectedTree.subtree(new Path(childName));
        return new AckUserWrite2(newEmptyPath(), childTree, this.revert);
      }
    };
    return AckUserWrite2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ListenComplete = function() {
    function ListenComplete2(source, path) {
      this.source = source;
      this.path = path;
      this.type = OperationType.LISTEN_COMPLETE;
    }
    ListenComplete2.prototype.operationForChild = function(childName) {
      if (pathIsEmpty(this.path)) {
        return new ListenComplete2(this.source, newEmptyPath());
      } else {
        return new ListenComplete2(this.source, pathPopFront(this.path));
      }
    };
    return ListenComplete2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Overwrite = function() {
    function Overwrite2(source, path, snap) {
      this.source = source;
      this.path = path;
      this.snap = snap;
      this.type = OperationType.OVERWRITE;
    }
    Overwrite2.prototype.operationForChild = function(childName) {
      if (pathIsEmpty(this.path)) {
        return new Overwrite2(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
      } else {
        return new Overwrite2(this.source, pathPopFront(this.path), this.snap);
      }
    };
    return Overwrite2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Merge = function() {
    function Merge2(source, path, children) {
      this.source = source;
      this.path = path;
      this.children = children;
      this.type = OperationType.MERGE;
    }
    Merge2.prototype.operationForChild = function(childName) {
      if (pathIsEmpty(this.path)) {
        var childTree = this.children.subtree(new Path(childName));
        if (childTree.isEmpty()) {
          return null;
        } else if (childTree.value) {
          return new Overwrite(this.source, newEmptyPath(), childTree.value);
        } else {
          return new Merge2(this.source, newEmptyPath(), childTree);
        }
      } else {
        assert(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
        return new Merge2(this.source, pathPopFront(this.path), this.children);
      }
    };
    Merge2.prototype.toString = function() {
      return "Operation(" + this.path + ": " + this.source.toString() + " merge: " + this.children.toString() + ")";
    };
    return Merge2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var CacheNode = function() {
    function CacheNode2(node_, fullyInitialized_, filtered_) {
      this.node_ = node_;
      this.fullyInitialized_ = fullyInitialized_;
      this.filtered_ = filtered_;
    }
    CacheNode2.prototype.isFullyInitialized = function() {
      return this.fullyInitialized_;
    };
    CacheNode2.prototype.isFiltered = function() {
      return this.filtered_;
    };
    CacheNode2.prototype.isCompleteForPath = function(path) {
      if (pathIsEmpty(path)) {
        return this.isFullyInitialized() && !this.filtered_;
      }
      var childKey = pathGetFront(path);
      return this.isCompleteForChild(childKey);
    };
    CacheNode2.prototype.isCompleteForChild = function(key) {
      return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
    };
    CacheNode2.prototype.getNode = function() {
      return this.node_;
    };
    return CacheNode2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var EventGenerator = function() {
    function EventGenerator2(query_) {
      this.query_ = query_;
      this.index_ = this.query_._queryParams.getIndex();
    }
    return EventGenerator2;
  }();
  function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
    var events = [];
    var moves = [];
    changes.forEach(function(change) {
      if (change.type === "child_changed" && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
        moves.push(changeChildMoved(change.childName, change.snapshotNode));
      }
    });
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed", changes, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added", changes, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved", moves, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed", changes, eventRegistrations, eventCache);
    eventGeneratorGenerateEventsForType(eventGenerator, events, "value", changes, eventRegistrations, eventCache);
    return events;
  }
  function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
    var filteredChanges = changes.filter(function(change) {
      return change.type === eventType;
    });
    filteredChanges.sort(function(a, b) {
      return eventGeneratorCompareChanges(eventGenerator, a, b);
    });
    filteredChanges.forEach(function(change) {
      var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
      registrations.forEach(function(registration) {
        if (registration.respondsTo(change.type)) {
          events.push(registration.createEvent(materializedChange, eventGenerator.query_));
        }
      });
    });
  }
  function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
    if (change.type === "value" || change.type === "child_removed") {
      return change;
    } else {
      change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
      return change;
    }
  }
  function eventGeneratorCompareChanges(eventGenerator, a, b) {
    if (a.childName == null || b.childName == null) {
      throw assertionError("Should only compare child_ events.");
    }
    var aWrapped = new NamedNode(a.childName, a.snapshotNode);
    var bWrapped = new NamedNode(b.childName, b.snapshotNode);
    return eventGenerator.index_.compare(aWrapped, bWrapped);
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newViewCache(eventCache, serverCache) {
    return {eventCache, serverCache};
  }
  function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
  }
  function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
  }
  function viewCacheGetCompleteEventSnap(viewCache) {
    return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;
  }
  function viewCacheGetCompleteServerSnap(viewCache) {
    return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var emptyChildrenSingleton;
  var EmptyChildren = function() {
    if (!emptyChildrenSingleton) {
      emptyChildrenSingleton = new SortedMap(stringCompare);
    }
    return emptyChildrenSingleton;
  };
  var ImmutableTree = function() {
    function ImmutableTree2(value, children) {
      if (children === void 0) {
        children = EmptyChildren();
      }
      this.value = value;
      this.children = children;
    }
    ImmutableTree2.fromObject = function(obj) {
      var tree = new ImmutableTree2(null);
      each(obj, function(childPath, childSnap) {
        tree = tree.set(new Path(childPath), childSnap);
      });
      return tree;
    };
    ImmutableTree2.prototype.isEmpty = function() {
      return this.value === null && this.children.isEmpty();
    };
    ImmutableTree2.prototype.findRootMostMatchingPathAndValue = function(relativePath, predicate) {
      if (this.value != null && predicate(this.value)) {
        return {path: newEmptyPath(), value: this.value};
      } else {
        if (pathIsEmpty(relativePath)) {
          return null;
        } else {
          var front = pathGetFront(relativePath);
          var child2 = this.children.get(front);
          if (child2 !== null) {
            var childExistingPathAndValue = child2.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
            if (childExistingPathAndValue != null) {
              var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
              return {path: fullPath, value: childExistingPathAndValue.value};
            } else {
              return null;
            }
          } else {
            return null;
          }
        }
      }
    };
    ImmutableTree2.prototype.findRootMostValueAndPath = function(relativePath) {
      return this.findRootMostMatchingPathAndValue(relativePath, function() {
        return true;
      });
    };
    ImmutableTree2.prototype.subtree = function(relativePath) {
      if (pathIsEmpty(relativePath)) {
        return this;
      } else {
        var front = pathGetFront(relativePath);
        var childTree = this.children.get(front);
        if (childTree !== null) {
          return childTree.subtree(pathPopFront(relativePath));
        } else {
          return new ImmutableTree2(null);
        }
      }
    };
    ImmutableTree2.prototype.set = function(relativePath, toSet) {
      if (pathIsEmpty(relativePath)) {
        return new ImmutableTree2(toSet, this.children);
      } else {
        var front = pathGetFront(relativePath);
        var child2 = this.children.get(front) || new ImmutableTree2(null);
        var newChild = child2.set(pathPopFront(relativePath), toSet);
        var newChildren = this.children.insert(front, newChild);
        return new ImmutableTree2(this.value, newChildren);
      }
    };
    ImmutableTree2.prototype.remove = function(relativePath) {
      if (pathIsEmpty(relativePath)) {
        if (this.children.isEmpty()) {
          return new ImmutableTree2(null);
        } else {
          return new ImmutableTree2(null, this.children);
        }
      } else {
        var front = pathGetFront(relativePath);
        var child2 = this.children.get(front);
        if (child2) {
          var newChild = child2.remove(pathPopFront(relativePath));
          var newChildren = void 0;
          if (newChild.isEmpty()) {
            newChildren = this.children.remove(front);
          } else {
            newChildren = this.children.insert(front, newChild);
          }
          if (this.value === null && newChildren.isEmpty()) {
            return new ImmutableTree2(null);
          } else {
            return new ImmutableTree2(this.value, newChildren);
          }
        } else {
          return this;
        }
      }
    };
    ImmutableTree2.prototype.get = function(relativePath) {
      if (pathIsEmpty(relativePath)) {
        return this.value;
      } else {
        var front = pathGetFront(relativePath);
        var child2 = this.children.get(front);
        if (child2) {
          return child2.get(pathPopFront(relativePath));
        } else {
          return null;
        }
      }
    };
    ImmutableTree2.prototype.setTree = function(relativePath, newTree) {
      if (pathIsEmpty(relativePath)) {
        return newTree;
      } else {
        var front = pathGetFront(relativePath);
        var child2 = this.children.get(front) || new ImmutableTree2(null);
        var newChild = child2.setTree(pathPopFront(relativePath), newTree);
        var newChildren = void 0;
        if (newChild.isEmpty()) {
          newChildren = this.children.remove(front);
        } else {
          newChildren = this.children.insert(front, newChild);
        }
        return new ImmutableTree2(this.value, newChildren);
      }
    };
    ImmutableTree2.prototype.fold = function(fn) {
      return this.fold_(newEmptyPath(), fn);
    };
    ImmutableTree2.prototype.fold_ = function(pathSoFar, fn) {
      var accum = {};
      this.children.inorderTraversal(function(childKey, childTree) {
        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
      });
      return fn(pathSoFar, this.value, accum);
    };
    ImmutableTree2.prototype.findOnPath = function(path, f) {
      return this.findOnPath_(path, newEmptyPath(), f);
    };
    ImmutableTree2.prototype.findOnPath_ = function(pathToFollow, pathSoFar, f) {
      var result = this.value ? f(pathSoFar, this.value) : false;
      if (result) {
        return result;
      } else {
        if (pathIsEmpty(pathToFollow)) {
          return null;
        } else {
          var front = pathGetFront(pathToFollow);
          var nextChild = this.children.get(front);
          if (nextChild) {
            return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
          } else {
            return null;
          }
        }
      }
    };
    ImmutableTree2.prototype.foreachOnPath = function(path, f) {
      return this.foreachOnPath_(path, newEmptyPath(), f);
    };
    ImmutableTree2.prototype.foreachOnPath_ = function(pathToFollow, currentRelativePath, f) {
      if (pathIsEmpty(pathToFollow)) {
        return this;
      } else {
        if (this.value) {
          f(currentRelativePath, this.value);
        }
        var front = pathGetFront(pathToFollow);
        var nextChild = this.children.get(front);
        if (nextChild) {
          return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
        } else {
          return new ImmutableTree2(null);
        }
      }
    };
    ImmutableTree2.prototype.foreach = function(f) {
      this.foreach_(newEmptyPath(), f);
    };
    ImmutableTree2.prototype.foreach_ = function(currentRelativePath, f) {
      this.children.inorderTraversal(function(childName, childTree) {
        childTree.foreach_(pathChild(currentRelativePath, childName), f);
      });
      if (this.value) {
        f(currentRelativePath, this.value);
      }
    };
    ImmutableTree2.prototype.foreachChild = function(f) {
      this.children.inorderTraversal(function(childName, childTree) {
        if (childTree.value) {
          f(childName, childTree.value);
        }
      });
    };
    return ImmutableTree2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var CompoundWrite = function() {
    function CompoundWrite2(writeTree_) {
      this.writeTree_ = writeTree_;
    }
    CompoundWrite2.empty = function() {
      return new CompoundWrite2(new ImmutableTree(null));
    };
    return CompoundWrite2;
  }();
  function compoundWriteAddWrite(compoundWrite, path, node) {
    if (pathIsEmpty(path)) {
      return new CompoundWrite(new ImmutableTree(node));
    } else {
      var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
      if (rootmost != null) {
        var rootMostPath = rootmost.path;
        var value = rootmost.value;
        var relativePath = newRelativePath(rootMostPath, path);
        value = value.updateChild(relativePath, node);
        return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
      } else {
        var subtree = new ImmutableTree(node);
        var newWriteTree2 = compoundWrite.writeTree_.setTree(path, subtree);
        return new CompoundWrite(newWriteTree2);
      }
    }
  }
  function compoundWriteAddWrites(compoundWrite, path, updates) {
    var newWrite = compoundWrite;
    each(updates, function(childKey, node) {
      newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
    });
    return newWrite;
  }
  function compoundWriteRemoveWrite(compoundWrite, path) {
    if (pathIsEmpty(path)) {
      return CompoundWrite.empty();
    } else {
      var newWriteTree2 = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
      return new CompoundWrite(newWriteTree2);
    }
  }
  function compoundWriteHasCompleteWrite(compoundWrite, path) {
    return compoundWriteGetCompleteNode(compoundWrite, path) != null;
  }
  function compoundWriteGetCompleteNode(compoundWrite, path) {
    var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
    if (rootmost != null) {
      return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));
    } else {
      return null;
    }
  }
  function compoundWriteGetCompleteChildren(compoundWrite) {
    var children = [];
    var node = compoundWrite.writeTree_.value;
    if (node != null) {
      if (!node.isLeafNode()) {
        node.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
          children.push(new NamedNode(childName, childNode));
        });
      }
    } else {
      compoundWrite.writeTree_.children.inorderTraversal(function(childName, childTree) {
        if (childTree.value != null) {
          children.push(new NamedNode(childName, childTree.value));
        }
      });
    }
    return children;
  }
  function compoundWriteChildCompoundWrite(compoundWrite, path) {
    if (pathIsEmpty(path)) {
      return compoundWrite;
    } else {
      var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
      if (shadowingNode != null) {
        return new CompoundWrite(new ImmutableTree(shadowingNode));
      } else {
        return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
      }
    }
  }
  function compoundWriteIsEmpty(compoundWrite) {
    return compoundWrite.writeTree_.isEmpty();
  }
  function compoundWriteApply(compoundWrite, node) {
    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
  }
  function applySubtreeWrite(relativePath, writeTree, node) {
    if (writeTree.value != null) {
      return node.updateChild(relativePath, writeTree.value);
    } else {
      var priorityWrite_1 = null;
      writeTree.children.inorderTraversal(function(childKey, childTree) {
        if (childKey === ".priority") {
          assert(childTree.value !== null, "Priority writes must always be leaf nodes");
          priorityWrite_1 = childTree.value;
        } else {
          node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
        }
      });
      if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
        node = node.updateChild(pathChild(relativePath, ".priority"), priorityWrite_1);
      }
      return node;
    }
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function writeTreeChildWrites(writeTree, path) {
    return newWriteTreeRef(path, writeTree);
  }
  function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
    assert(writeId > writeTree.lastWriteId, "Stacking an older write on top of newer ones");
    if (visible === void 0) {
      visible = true;
    }
    writeTree.allWrites.push({
      path,
      snap,
      writeId,
      visible
    });
    if (visible) {
      writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
    }
    writeTree.lastWriteId = writeId;
  }
  function writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
    assert(writeId > writeTree.lastWriteId, "Stacking an older merge on top of newer ones");
    writeTree.allWrites.push({
      path,
      children: changedChildren,
      writeId,
      visible: true
    });
    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);
    writeTree.lastWriteId = writeId;
  }
  function writeTreeGetWrite(writeTree, writeId) {
    for (var i = 0; i < writeTree.allWrites.length; i++) {
      var record = writeTree.allWrites[i];
      if (record.writeId === writeId) {
        return record;
      }
    }
    return null;
  }
  function writeTreeRemoveWrite(writeTree, writeId) {
    var idx = writeTree.allWrites.findIndex(function(s) {
      return s.writeId === writeId;
    });
    assert(idx >= 0, "removeWrite called with nonexistent writeId.");
    var writeToRemove = writeTree.allWrites[idx];
    writeTree.allWrites.splice(idx, 1);
    var removedWriteWasVisible = writeToRemove.visible;
    var removedWriteOverlapsWithOtherWrites = false;
    var i = writeTree.allWrites.length - 1;
    while (removedWriteWasVisible && i >= 0) {
      var currentWrite = writeTree.allWrites[i];
      if (currentWrite.visible) {
        if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {
          removedWriteWasVisible = false;
        } else if (pathContains(writeToRemove.path, currentWrite.path)) {
          removedWriteOverlapsWithOtherWrites = true;
        }
      }
      i--;
    }
    if (!removedWriteWasVisible) {
      return false;
    } else if (removedWriteOverlapsWithOtherWrites) {
      writeTreeResetTree_(writeTree);
      return true;
    } else {
      if (writeToRemove.snap) {
        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
      } else {
        var children = writeToRemove.children;
        each(children, function(childName) {
          writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
        });
      }
      return true;
    }
  }
  function writeTreeRecordContainsPath_(writeRecord, path) {
    if (writeRecord.snap) {
      return pathContains(writeRecord.path, path);
    } else {
      for (var childName in writeRecord.children) {
        if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {
          return true;
        }
      }
      return false;
    }
  }
  function writeTreeResetTree_(writeTree) {
    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());
    if (writeTree.allWrites.length > 0) {
      writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
    } else {
      writeTree.lastWriteId = -1;
    }
  }
  function writeTreeDefaultFilter_(write) {
    return write.visible;
  }
  function writeTreeLayerTree_(writes, filter, treeRoot) {
    var compoundWrite = CompoundWrite.empty();
    for (var i = 0; i < writes.length; ++i) {
      var write = writes[i];
      if (filter(write)) {
        var writePath = write.path;
        var relativePath = void 0;
        if (write.snap) {
          if (pathContains(treeRoot, writePath)) {
            relativePath = newRelativePath(treeRoot, writePath);
            compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
          } else if (pathContains(writePath, treeRoot)) {
            relativePath = newRelativePath(writePath, treeRoot);
            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
          } else
            ;
        } else if (write.children) {
          if (pathContains(treeRoot, writePath)) {
            relativePath = newRelativePath(treeRoot, writePath);
            compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
          } else if (pathContains(writePath, treeRoot)) {
            relativePath = newRelativePath(writePath, treeRoot);
            if (pathIsEmpty(relativePath)) {
              compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
            } else {
              var child2 = safeGet(write.children, pathGetFront(relativePath));
              if (child2) {
                var deepNode = child2.getChild(pathPopFront(relativePath));
                compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
              }
            }
          } else
            ;
        } else {
          throw assertionError("WriteRecord should have .snap or .children");
        }
      }
    }
    return compoundWrite;
  }
  function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    if (!writeIdsToExclude && !includeHiddenWrites) {
      var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
      if (shadowingNode != null) {
        return shadowingNode;
      } else {
        var subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        if (compoundWriteIsEmpty(subMerge)) {
          return completeServerCache;
        } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
          return null;
        } else {
          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
          return compoundWriteApply(subMerge, layeredCache);
        }
      }
    } else {
      var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
      if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
        return completeServerCache;
      } else {
        if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
          return null;
        } else {
          var filter = function(write) {
            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));
          };
          var mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
          return compoundWriteApply(mergeAtPath, layeredCache);
        }
      }
    }
  }
  function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
    var completeChildren = ChildrenNode.EMPTY_NODE;
    var topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
    if (topLevelSet) {
      if (!topLevelSet.isLeafNode()) {
        topLevelSet.forEachChild(PRIORITY_INDEX, function(childName, childSnap) {
          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
        });
      }
      return completeChildren;
    } else if (completeServerChildren) {
      var merge_1 = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
      completeServerChildren.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
        var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge_1, new Path(childName)), childNode);
        completeChildren = completeChildren.updateImmediateChild(childName, node);
      });
      compoundWriteGetCompleteChildren(merge_1).forEach(function(namedNode) {
        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
      });
      return completeChildren;
    } else {
      var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
      compoundWriteGetCompleteChildren(merge).forEach(function(namedNode) {
        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
      });
      return completeChildren;
    }
  }
  function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
    assert(existingEventSnap || existingServerSnap, "Either existingEventSnap or existingServerSnap must exist");
    var path = pathChild(treePath, childPath);
    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
      return null;
    } else {
      var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
      if (compoundWriteIsEmpty(childMerge)) {
        return existingServerSnap.getChild(childPath);
      } else {
        return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
      }
    }
  }
  function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
    var path = pathChild(treePath, childKey);
    var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
    if (shadowingNode != null) {
      return shadowingNode;
    } else {
      if (existingServerSnap.isCompleteForChild(childKey)) {
        var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
        return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
      } else {
        return null;
      }
    }
  }
  function writeTreeShadowingWrite(writeTree, path) {
    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
  }
  function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
    var toIterate;
    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
    if (shadowingNode != null) {
      toIterate = shadowingNode;
    } else if (completeServerData != null) {
      toIterate = compoundWriteApply(merge, completeServerData);
    } else {
      return [];
    }
    toIterate = toIterate.withIndex(index);
    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
      var nodes = [];
      var cmp = index.getCompare();
      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
      var next = iter.getNext();
      while (next && nodes.length < count) {
        if (cmp(next, startPost) !== 0) {
          nodes.push(next);
        }
        next = iter.getNext();
      }
      return nodes;
    } else {
      return [];
    }
  }
  function newWriteTree() {
    return {
      visibleWrites: CompoundWrite.empty(),
      allWrites: [],
      lastWriteId: -1
    };
  }
  function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
  }
  function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
  }
  function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
  }
  function writeTreeRefShadowingWrite(writeTreeRef, path) {
    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
  }
  function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
  }
  function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
  }
  function writeTreeRefChild(writeTreeRef, childName) {
    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
  }
  function newWriteTreeRef(path, writeTree) {
    return {
      treePath: path,
      writeTree
    };
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ChildChangeAccumulator = function() {
    function ChildChangeAccumulator2() {
      this.changeMap = new Map();
    }
    ChildChangeAccumulator2.prototype.trackChildChange = function(change) {
      var type = change.type;
      var childKey = change.childName;
      assert(type === "child_added" || type === "child_changed" || type === "child_removed", "Only child changes supported for tracking");
      assert(childKey !== ".priority", "Only non-priority child changes can be tracked.");
      var oldChange = this.changeMap.get(childKey);
      if (oldChange) {
        var oldType = oldChange.type;
        if (type === "child_added" && oldType === "child_removed") {
          this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
        } else if (type === "child_removed" && oldType === "child_added") {
          this.changeMap.delete(childKey);
        } else if (type === "child_removed" && oldType === "child_changed") {
          this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
        } else if (type === "child_changed" && oldType === "child_added") {
          this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
        } else if (type === "child_changed" && oldType === "child_changed") {
          this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
        } else {
          throw assertionError("Illegal combination of changes: " + change + " occurred after " + oldChange);
        }
      } else {
        this.changeMap.set(childKey, change);
      }
    };
    ChildChangeAccumulator2.prototype.getChanges = function() {
      return Array.from(this.changeMap.values());
    };
    return ChildChangeAccumulator2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var NoCompleteChildSource_ = function() {
    function NoCompleteChildSource_2() {
    }
    NoCompleteChildSource_2.prototype.getCompleteChild = function(childKey) {
      return null;
    };
    NoCompleteChildSource_2.prototype.getChildAfterChild = function(index, child2, reverse) {
      return null;
    };
    return NoCompleteChildSource_2;
  }();
  var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
  var WriteTreeCompleteChildSource = function() {
    function WriteTreeCompleteChildSource2(writes_, viewCache_, optCompleteServerCache_) {
      if (optCompleteServerCache_ === void 0) {
        optCompleteServerCache_ = null;
      }
      this.writes_ = writes_;
      this.viewCache_ = viewCache_;
      this.optCompleteServerCache_ = optCompleteServerCache_;
    }
    WriteTreeCompleteChildSource2.prototype.getCompleteChild = function(childKey) {
      var node = this.viewCache_.eventCache;
      if (node.isCompleteForChild(childKey)) {
        return node.getNode().getImmediateChild(childKey);
      } else {
        var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;
        return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
      }
    };
    WriteTreeCompleteChildSource2.prototype.getChildAfterChild = function(index, child2, reverse) {
      var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);
      var nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child2, 1, reverse, index);
      if (nodes.length === 0) {
        return null;
      } else {
        return nodes[0];
      }
    };
    return WriteTreeCompleteChildSource2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newViewProcessor(filter) {
    return {filter};
  }
  function viewProcessorAssertIndexed(viewProcessor, viewCache) {
    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), "Event snap not indexed");
    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), "Server snap not indexed");
  }
  function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
    var accumulator = new ChildChangeAccumulator();
    var newViewCache2, filterServerNode;
    if (operation.type === OperationType.OVERWRITE) {
      var overwrite = operation;
      if (overwrite.source.fromUser) {
        newViewCache2 = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
      } else {
        assert(overwrite.source.fromServer, "Unknown source.");
        filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);
        newViewCache2 = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
      }
    } else if (operation.type === OperationType.MERGE) {
      var merge = operation;
      if (merge.source.fromUser) {
        newViewCache2 = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
      } else {
        assert(merge.source.fromServer, "Unknown source.");
        filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();
        newViewCache2 = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
      }
    } else if (operation.type === OperationType.ACK_USER_WRITE) {
      var ackUserWrite = operation;
      if (!ackUserWrite.revert) {
        newViewCache2 = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
      } else {
        newViewCache2 = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
      }
    } else if (operation.type === OperationType.LISTEN_COMPLETE) {
      newViewCache2 = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
    } else {
      throw assertionError("Unknown operation type: " + operation.type);
    }
    var changes = accumulator.getChanges();
    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache2, changes);
    return {viewCache: newViewCache2, changes};
  }
  function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache2, accumulator) {
    var eventSnap = newViewCache2.eventCache;
    if (eventSnap.isFullyInitialized()) {
      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
      var oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
      if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
        accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache2)));
      }
    }
  }
  function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
    var oldEventSnap = viewCache.eventCache;
    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
      return viewCache;
    } else {
      var newEventCache = void 0, serverNode = void 0;
      if (pathIsEmpty(changePath)) {
        assert(viewCache.serverCache.isFullyInitialized(), "If change path is empty, we must have complete server data");
        if (viewCache.serverCache.isFiltered()) {
          var serverCache = viewCacheGetCompleteServerSnap(viewCache);
          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;
          var completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
          newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
        } else {
          var completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
          newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
        }
      } else {
        var childKey = pathGetFront(changePath);
        if (childKey === ".priority") {
          assert(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
          var oldEventNode = oldEventSnap.getNode();
          serverNode = viewCache.serverCache.getNode();
          var updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
          if (updatedPriority != null) {
            newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
          } else {
            newEventCache = oldEventSnap.getNode();
          }
        } else {
          var childChangePath = pathPopFront(changePath);
          var newEventChild = void 0;
          if (oldEventSnap.isCompleteForChild(childKey)) {
            serverNode = viewCache.serverCache.getNode();
            var eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
            if (eventChildUpdate != null) {
              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
            } else {
              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
            }
          } else {
            newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
          }
          if (newEventChild != null) {
            newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
          } else {
            newEventCache = oldEventSnap.getNode();
          }
        }
      }
      return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
    }
  }
  function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
    var oldServerSnap = oldViewCache.serverCache;
    var newServerCache;
    var serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();
    if (pathIsEmpty(changePath)) {
      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
    } else {
      var childKey = pathGetFront(changePath);
      if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {
        return oldViewCache;
      }
      var childChangePath = pathPopFront(changePath);
      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
      var newChildNode = childNode.updateChild(childChangePath, changedSnap);
      if (childKey === ".priority") {
        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
      } else {
        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
      }
    }
    var newViewCache2 = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache2, completeCache);
    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache2, changePath, writesCache, source, accumulator);
  }
  function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
    var oldEventSnap = oldViewCache.eventCache;
    var newViewCache2, newEventCache;
    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
    if (pathIsEmpty(changePath)) {
      newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
      newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
    } else {
      var childKey = pathGetFront(changePath);
      if (childKey === ".priority") {
        newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
        newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
      } else {
        var childChangePath = pathPopFront(changePath);
        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
        var newChild = void 0;
        if (pathIsEmpty(childChangePath)) {
          newChild = changedSnap;
        } else {
          var childNode = source.getCompleteChild(childKey);
          if (childNode != null) {
            if (pathGetBack(childChangePath) === ".priority" && childNode.getChild(pathParent(childChangePath)).isEmpty()) {
              newChild = childNode;
            } else {
              newChild = childNode.updateChild(childChangePath, changedSnap);
            }
          } else {
            newChild = ChildrenNode.EMPTY_NODE;
          }
        }
        if (!oldChild.equals(newChild)) {
          var newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
          newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
        } else {
          newViewCache2 = oldViewCache;
        }
      }
    }
    return newViewCache2;
  }
  function viewProcessorCacheHasChild(viewCache, childKey) {
    return viewCache.eventCache.isCompleteForChild(childKey);
  }
  function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
    var curViewCache = viewCache;
    changedChildren.foreach(function(relativePath, childNode) {
      var writePath = pathChild(path, relativePath);
      if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
        curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
      }
    });
    changedChildren.foreach(function(relativePath, childNode) {
      var writePath = pathChild(path, relativePath);
      if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
        curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
      }
    });
    return curViewCache;
  }
  function viewProcessorApplyMerge(viewProcessor, node, merge) {
    merge.foreach(function(relativePath, childNode) {
      node = node.updateChild(relativePath, childNode);
    });
    return node;
  }
  function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
    if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {
      return viewCache;
    }
    var curViewCache = viewCache;
    var viewMergeTree;
    if (pathIsEmpty(path)) {
      viewMergeTree = changedChildren;
    } else {
      viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
    }
    var serverNode = viewCache.serverCache.getNode();
    viewMergeTree.children.inorderTraversal(function(childKey, childTree) {
      if (serverNode.hasChild(childKey)) {
        var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
        var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
        curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
      }
    });
    viewMergeTree.children.inorderTraversal(function(childKey, childMergeTree) {
      var isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === void 0;
      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
        var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
        var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
        curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
      }
    });
    return curViewCache;
  }
  function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
      return viewCache;
    }
    var filterServerNode = viewCache.serverCache.isFiltered();
    var serverCache = viewCache.serverCache;
    if (affectedTree.value != null) {
      if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
        return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
      } else if (pathIsEmpty(ackPath)) {
        var changedChildren_1 = new ImmutableTree(null);
        serverCache.getNode().forEachChild(KEY_INDEX, function(name2, node) {
          changedChildren_1 = changedChildren_1.set(new Path(name2), node);
        });
        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
      } else {
        return viewCache;
      }
    } else {
      var changedChildren_2 = new ImmutableTree(null);
      affectedTree.foreach(function(mergePath, value) {
        var serverCachePath = pathChild(ackPath, mergePath);
        if (serverCache.isCompleteForPath(serverCachePath)) {
          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
        }
      });
      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
    }
  }
  function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
    var oldServerNode = viewCache.serverCache;
    var newViewCache2 = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache2, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
  }
  function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
    var complete;
    if (writeTreeRefShadowingWrite(writesCache, path) != null) {
      return viewCache;
    } else {
      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
      var oldEventCache = viewCache.eventCache.getNode();
      var newEventCache = void 0;
      if (pathIsEmpty(path) || pathGetFront(path) === ".priority") {
        var newNode = void 0;
        if (viewCache.serverCache.isFullyInitialized()) {
          newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
        } else {
          var serverChildren = viewCache.serverCache.getNode();
          assert(serverChildren instanceof ChildrenNode, "serverChildren would be complete if leaf node");
          newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
        }
        newNode = newNode;
        newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
      } else {
        var childKey = pathGetFront(path);
        var newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
        if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {
          newChild = oldEventCache.getImmediateChild(childKey);
        }
        if (newChild != null) {
          newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
        } else if (viewCache.eventCache.getNode().hasChild(childKey)) {
          newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
        } else {
          newEventCache = oldEventCache;
        }
        if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {
          complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
          if (complete.isLeafNode()) {
            newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
          }
        }
      }
      complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
      return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
    }
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var View = function() {
    function View2(query_, initialViewCache) {
      this.query_ = query_;
      this.eventRegistrations_ = [];
      var params = this.query_._queryParams;
      var indexFilter = new IndexedFilter(params.getIndex());
      var filter = queryParamsGetNodeFilter(params);
      this.processor_ = newViewProcessor(filter);
      var initialServerCache = initialViewCache.serverCache;
      var initialEventCache = initialViewCache.eventCache;
      var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
      var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
      var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
      var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
      this.viewCache_ = newViewCache(newEventCache, newServerCache);
      this.eventGenerator_ = new EventGenerator(this.query_);
    }
    Object.defineProperty(View2.prototype, "query", {
      get: function() {
        return this.query_;
      },
      enumerable: false,
      configurable: true
    });
    return View2;
  }();
  function viewGetServerCache(view) {
    return view.viewCache_.serverCache.getNode();
  }
  function viewGetCompleteNode(view) {
    return viewCacheGetCompleteEventSnap(view.viewCache_);
  }
  function viewGetCompleteServerCache(view, path) {
    var cache = viewCacheGetCompleteServerSnap(view.viewCache_);
    if (cache) {
      if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {
        return cache.getChild(path);
      }
    }
    return null;
  }
  function viewIsEmpty(view) {
    return view.eventRegistrations_.length === 0;
  }
  function viewAddEventRegistration(view, eventRegistration) {
    view.eventRegistrations_.push(eventRegistration);
  }
  function viewRemoveEventRegistration(view, eventRegistration, cancelError) {
    var cancelEvents = [];
    if (cancelError) {
      assert(eventRegistration == null, "A cancel should cancel all event registrations.");
      var path_1 = view.query._path;
      view.eventRegistrations_.forEach(function(registration) {
        var maybeEvent = registration.createCancelEvent(cancelError, path_1);
        if (maybeEvent) {
          cancelEvents.push(maybeEvent);
        }
      });
    }
    if (eventRegistration) {
      var remaining = [];
      for (var i = 0; i < view.eventRegistrations_.length; ++i) {
        var existing = view.eventRegistrations_[i];
        if (!existing.matches(eventRegistration)) {
          remaining.push(existing);
        } else if (eventRegistration.hasAnyCallback()) {
          remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
          break;
        }
      }
      view.eventRegistrations_ = remaining;
    } else {
      view.eventRegistrations_ = [];
    }
    return cancelEvents;
  }
  function viewApplyOperation(view, operation, writesCache, completeServerCache) {
    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {
      assert(viewCacheGetCompleteServerSnap(view.viewCache_), "We should always have a full cache before handling merges");
      assert(viewCacheGetCompleteEventSnap(view.viewCache_), "Missing event cache, even though we have a server cache");
    }
    var oldViewCache = view.viewCache_;
    var result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
    viewProcessorAssertIndexed(view.processor_, result.viewCache);
    assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), "Once a server snap is complete, it should never go back");
    view.viewCache_ = result.viewCache;
    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
  }
  function viewGetInitialEvents(view, registration) {
    var eventSnap = view.viewCache_.eventCache;
    var initialChanges = [];
    if (!eventSnap.getNode().isLeafNode()) {
      var eventNode = eventSnap.getNode();
      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {
        initialChanges.push(changeChildAdded(key, childNode));
      });
    }
    if (eventSnap.isFullyInitialized()) {
      initialChanges.push(changeValue(eventSnap.getNode()));
    }
    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
  }
  function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
    var registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;
    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var referenceConstructor$1;
  var SyncPoint = function() {
    function SyncPoint2() {
      this.views = new Map();
    }
    return SyncPoint2;
  }();
  function syncPointSetReferenceConstructor(val) {
    assert(!referenceConstructor$1, "__referenceConstructor has already been defined");
    referenceConstructor$1 = val;
  }
  function syncPointGetReferenceConstructor() {
    assert(referenceConstructor$1, "Reference.ts has not been loaded");
    return referenceConstructor$1;
  }
  function syncPointIsEmpty(syncPoint) {
    return syncPoint.views.size === 0;
  }
  function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
    var e_1, _a;
    var queryId = operation.source.queryId;
    if (queryId !== null) {
      var view = syncPoint.views.get(queryId);
      assert(view != null, "SyncTree gave us an op for an invalid query.");
      return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
    } else {
      var events = [];
      try {
        for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var view = _c.value;
          events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return events;
    }
  }
  function syncPointGetView(syncPoint, query2, writesCache, serverCache, serverCacheComplete) {
    var queryId = query2._queryIdentifier;
    var view = syncPoint.views.get(queryId);
    if (!view) {
      var eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
      var eventCacheComplete = false;
      if (eventCache) {
        eventCacheComplete = true;
      } else if (serverCache instanceof ChildrenNode) {
        eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
        eventCacheComplete = false;
      } else {
        eventCache = ChildrenNode.EMPTY_NODE;
        eventCacheComplete = false;
      }
      var viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
      return new View(query2, viewCache);
    }
    return view;
  }
  function syncPointAddEventRegistration(syncPoint, query2, eventRegistration, writesCache, serverCache, serverCacheComplete) {
    var view = syncPointGetView(syncPoint, query2, writesCache, serverCache, serverCacheComplete);
    if (!syncPoint.views.has(query2._queryIdentifier)) {
      syncPoint.views.set(query2._queryIdentifier, view);
    }
    viewAddEventRegistration(view, eventRegistration);
    return viewGetInitialEvents(view, eventRegistration);
  }
  function syncPointRemoveEventRegistration(syncPoint, query2, eventRegistration, cancelError) {
    var e_2, _a;
    var queryId = query2._queryIdentifier;
    var removed = [];
    var cancelEvents = [];
    var hadCompleteView = syncPointHasCompleteView(syncPoint);
    if (queryId === "default") {
      try {
        for (var _b = __values(syncPoint.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), viewQueryId = _d[0], view = _d[1];
          cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
          if (viewIsEmpty(view)) {
            syncPoint.views.delete(viewQueryId);
            if (!view.query._queryParams.loadsAllData()) {
              removed.push(view.query);
            }
          }
        }
      } catch (e_2_1) {
        e_2 = {error: e_2_1};
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
    } else {
      var view = syncPoint.views.get(queryId);
      if (view) {
        cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
        if (viewIsEmpty(view)) {
          syncPoint.views.delete(queryId);
          if (!view.query._queryParams.loadsAllData()) {
            removed.push(view.query);
          }
        }
      }
    }
    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {
      removed.push(new (syncPointGetReferenceConstructor())(query2._repo, query2._path));
    }
    return {removed, events: cancelEvents};
  }
  function syncPointGetQueryViews(syncPoint) {
    var e_3, _a;
    var result = [];
    try {
      for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var view = _c.value;
        if (!view.query._queryParams.loadsAllData()) {
          result.push(view);
        }
      }
    } catch (e_3_1) {
      e_3 = {error: e_3_1};
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
    return result;
  }
  function syncPointGetCompleteServerCache(syncPoint, path) {
    var e_4, _a;
    var serverCache = null;
    try {
      for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var view = _c.value;
        serverCache = serverCache || viewGetCompleteServerCache(view, path);
      }
    } catch (e_4_1) {
      e_4 = {error: e_4_1};
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_4)
          throw e_4.error;
      }
    }
    return serverCache;
  }
  function syncPointViewForQuery(syncPoint, query2) {
    var params = query2._queryParams;
    if (params.loadsAllData()) {
      return syncPointGetCompleteView(syncPoint);
    } else {
      var queryId = query2._queryIdentifier;
      return syncPoint.views.get(queryId);
    }
  }
  function syncPointViewExistsForQuery(syncPoint, query2) {
    return syncPointViewForQuery(syncPoint, query2) != null;
  }
  function syncPointHasCompleteView(syncPoint) {
    return syncPointGetCompleteView(syncPoint) != null;
  }
  function syncPointGetCompleteView(syncPoint) {
    var e_5, _a;
    try {
      for (var _b = __values(syncPoint.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var view = _c.value;
        if (view.query._queryParams.loadsAllData()) {
          return view;
        }
      }
    } catch (e_5_1) {
      e_5 = {error: e_5_1};
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_5)
          throw e_5.error;
      }
    }
    return null;
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var referenceConstructor;
  function syncTreeSetReferenceConstructor(val) {
    assert(!referenceConstructor, "__referenceConstructor has already been defined");
    referenceConstructor = val;
  }
  function syncTreeGetReferenceConstructor() {
    assert(referenceConstructor, "Reference.ts has not been loaded");
    return referenceConstructor;
  }
  var syncTreeNextQueryTag_ = 1;
  var SyncTree = function() {
    function SyncTree2(listenProvider_) {
      this.listenProvider_ = listenProvider_;
      this.syncPointTree_ = new ImmutableTree(null);
      this.pendingWriteTree_ = newWriteTree();
      this.tagToQueryMap = new Map();
      this.queryToTagMap = new Map();
    }
    return SyncTree2;
  }();
  function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
    if (!visible) {
      return [];
    } else {
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
    }
  }
  function syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {
    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);
    var changeTree = ImmutableTree.fromObject(changedChildren);
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));
  }
  function syncTreeAckUserWrite(syncTree, writeId, revert) {
    if (revert === void 0) {
      revert = false;
    }
    var write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
    var needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
    if (!needToReevaluate) {
      return [];
    } else {
      var affectedTree_1 = new ImmutableTree(null);
      if (write.snap != null) {
        affectedTree_1 = affectedTree_1.set(newEmptyPath(), true);
      } else {
        each(write.children, function(pathString) {
          affectedTree_1 = affectedTree_1.set(new Path(pathString), true);
        });
      }
      return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree_1, revert));
    }
  }
  function syncTreeApplyServerOverwrite(syncTree, path, newData) {
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
  }
  function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
    var changeTree = ImmutableTree.fromObject(changedChildren);
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
  }
  function syncTreeApplyListenComplete(syncTree, path) {
    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));
  }
  function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
    var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey) {
      var r = syncTreeParseQueryKey_(queryKey);
      var queryPath = r.path, queryId = r.queryId;
      var relativePath = newRelativePath(queryPath, path);
      var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
      return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else {
      return [];
    }
  }
  function syncTreeRemoveEventRegistration(syncTree, query2, eventRegistration, cancelError) {
    var path = query2._path;
    var maybeSyncPoint = syncTree.syncPointTree_.get(path);
    var cancelEvents = [];
    if (maybeSyncPoint && (query2._queryIdentifier === "default" || syncPointViewExistsForQuery(maybeSyncPoint, query2))) {
      var removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query2, eventRegistration, cancelError);
      if (syncPointIsEmpty(maybeSyncPoint)) {
        syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
      }
      var removed = removedAndEvents.removed;
      cancelEvents = removedAndEvents.events;
      var removingDefault = removed.findIndex(function(query3) {
        return query3._queryParams.loadsAllData();
      }) !== -1;
      var covered = syncTree.syncPointTree_.findOnPath(path, function(relativePath, parentSyncPoint) {
        return syncPointHasCompleteView(parentSyncPoint);
      });
      if (removingDefault && !covered) {
        var subtree = syncTree.syncPointTree_.subtree(path);
        if (!subtree.isEmpty()) {
          var newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);
          for (var i = 0; i < newViews.length; ++i) {
            var view = newViews[i], newQuery = view.query;
            var listener = syncTreeCreateListenerForView_(syncTree, view);
            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);
          }
        }
      }
      if (!covered && removed.length > 0 && !cancelError) {
        if (removingDefault) {
          var defaultTag = null;
          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query2), defaultTag);
        } else {
          removed.forEach(function(queryToRemove) {
            var tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));
            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);
          });
        }
      }
      syncTreeRemoveTags_(syncTree, removed);
    }
    return cancelEvents;
  }
  function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
    var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey != null) {
      var r = syncTreeParseQueryKey_(queryKey);
      var queryPath = r.path, queryId = r.queryId;
      var relativePath = newRelativePath(queryPath, path);
      var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
      return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else {
      return [];
    }
  }
  function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
    var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey) {
      var r = syncTreeParseQueryKey_(queryKey);
      var queryPath = r.path, queryId = r.queryId;
      var relativePath = newRelativePath(queryPath, path);
      var changeTree = ImmutableTree.fromObject(changedChildren);
      var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
      return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else {
      return [];
    }
  }
  function syncTreeAddEventRegistration(syncTree, query2, eventRegistration) {
    var path = query2._path;
    var serverCache = null;
    var foundAncestorDefaultView = false;
    syncTree.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {
      var relativePath = newRelativePath(pathToSyncPoint, path);
      serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
      foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);
    });
    var syncPoint = syncTree.syncPointTree_.get(path);
    if (!syncPoint) {
      syncPoint = new SyncPoint();
      syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
    } else {
      foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
      serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    }
    var serverCacheComplete;
    if (serverCache != null) {
      serverCacheComplete = true;
    } else {
      serverCacheComplete = false;
      serverCache = ChildrenNode.EMPTY_NODE;
      var subtree = syncTree.syncPointTree_.subtree(path);
      subtree.foreachChild(function(childName, childSyncPoint) {
        var completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());
        if (completeCache) {
          serverCache = serverCache.updateImmediateChild(childName, completeCache);
        }
      });
    }
    var viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query2);
    if (!viewAlreadyExists && !query2._queryParams.loadsAllData()) {
      var queryKey = syncTreeMakeQueryKey_(query2);
      assert(!syncTree.queryToTagMap.has(queryKey), "View does not exist, but we have a tag");
      var tag = syncTreeGetNextQueryTag_();
      syncTree.queryToTagMap.set(queryKey, tag);
      syncTree.tagToQueryMap.set(tag, queryKey);
    }
    var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);
    var events = syncPointAddEventRegistration(syncPoint, query2, eventRegistration, writesCache, serverCache, serverCacheComplete);
    if (!viewAlreadyExists && !foundAncestorDefaultView) {
      var view = syncPointViewForQuery(syncPoint, query2);
      events = events.concat(syncTreeSetupListener_(syncTree, query2, view));
    }
    return events;
  }
  function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
    var includeHiddenSets = true;
    var writeTree = syncTree.pendingWriteTree_;
    var serverCache = syncTree.syncPointTree_.findOnPath(path, function(pathSoFar, syncPoint) {
      var relativePath = newRelativePath(pathSoFar, path);
      var serverCache2 = syncPointGetCompleteServerCache(syncPoint, relativePath);
      if (serverCache2) {
        return serverCache2;
      }
    });
    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
  }
  function syncTreeGetServerValue(syncTree, query2) {
    var path = query2._path;
    var serverCache = null;
    syncTree.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {
      var relativePath = newRelativePath(pathToSyncPoint, path);
      serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
    });
    var syncPoint = syncTree.syncPointTree_.get(path);
    if (!syncPoint) {
      syncPoint = new SyncPoint();
      syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
    } else {
      serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    }
    var serverCacheComplete = serverCache != null;
    var serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;
    var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query2._path);
    var view = syncPointGetView(syncPoint, query2, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
    return viewGetCompleteNode(view);
  }
  function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));
  }
  function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
    if (pathIsEmpty(operation.path)) {
      return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
    } else {
      var syncPoint = syncPointTree.get(newEmptyPath());
      if (serverCache == null && syncPoint != null) {
        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      var events = [];
      var childName = pathGetFront(operation.path);
      var childOperation = operation.operationForChild(childName);
      var childTree = syncPointTree.children.get(childName);
      if (childTree && childOperation) {
        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
        var childWritesCache = writeTreeRefChild(writesCache, childName);
        events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
      }
      if (syncPoint) {
        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
      }
      return events;
    }
  }
  function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
    var syncPoint = syncPointTree.get(newEmptyPath());
    if (serverCache == null && syncPoint != null) {
      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    }
    var events = [];
    syncPointTree.children.inorderTraversal(function(childName, childTree) {
      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
      var childWritesCache = writeTreeRefChild(writesCache, childName);
      var childOperation = operation.operationForChild(childName);
      if (childOperation) {
        events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
      }
    });
    if (syncPoint) {
      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
    }
    return events;
  }
  function syncTreeCreateListenerForView_(syncTree, view) {
    var query2 = view.query;
    var tag = syncTreeTagForQuery_(syncTree, query2);
    return {
      hashFn: function() {
        var cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
        return cache.hash();
      },
      onComplete: function(status) {
        if (status === "ok") {
          if (tag) {
            return syncTreeApplyTaggedListenComplete(syncTree, query2._path, tag);
          } else {
            return syncTreeApplyListenComplete(syncTree, query2._path);
          }
        } else {
          var error2 = errorForServerCode(status, query2);
          return syncTreeRemoveEventRegistration(syncTree, query2, null, error2);
        }
      }
    };
  }
  function syncTreeTagForQuery_(syncTree, query2) {
    var queryKey = syncTreeMakeQueryKey_(query2);
    return syncTree.queryToTagMap.get(queryKey);
  }
  function syncTreeMakeQueryKey_(query2) {
    return query2._path.toString() + "$" + query2._queryIdentifier;
  }
  function syncTreeQueryKeyForTag_(syncTree, tag) {
    return syncTree.tagToQueryMap.get(tag);
  }
  function syncTreeParseQueryKey_(queryKey) {
    var splitIndex = queryKey.indexOf("$");
    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, "Bad queryKey.");
    return {
      queryId: queryKey.substr(splitIndex + 1),
      path: new Path(queryKey.substr(0, splitIndex))
    };
  }
  function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
    var syncPoint = syncTree.syncPointTree_.get(queryPath);
    assert(syncPoint, "Missing sync point for query tag that we're tracking");
    var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
    return syncPointApplyOperation(syncPoint, operation, writesCache, null);
  }
  function syncTreeCollectDistinctViewsForSubTree_(subtree) {
    return subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
      if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
        var completeView = syncPointGetCompleteView(maybeChildSyncPoint);
        return [completeView];
      } else {
        var views_1 = [];
        if (maybeChildSyncPoint) {
          views_1 = syncPointGetQueryViews(maybeChildSyncPoint);
        }
        each(childMap, function(_key, childViews) {
          views_1 = views_1.concat(childViews);
        });
        return views_1;
      }
    });
  }
  function syncTreeQueryForListening_(query2) {
    if (query2._queryParams.loadsAllData() && !query2._queryParams.isDefault()) {
      return new (syncTreeGetReferenceConstructor())(query2._repo, query2._path);
    } else {
      return query2;
    }
  }
  function syncTreeRemoveTags_(syncTree, queries) {
    for (var j = 0; j < queries.length; ++j) {
      var removedQuery = queries[j];
      if (!removedQuery._queryParams.loadsAllData()) {
        var removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
        var removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
        syncTree.queryToTagMap.delete(removedQueryKey);
        syncTree.tagToQueryMap.delete(removedQueryTag);
      }
    }
  }
  function syncTreeGetNextQueryTag_() {
    return syncTreeNextQueryTag_++;
  }
  function syncTreeSetupListener_(syncTree, query2, view) {
    var path = query2._path;
    var tag = syncTreeTagForQuery_(syncTree, query2);
    var listener = syncTreeCreateListenerForView_(syncTree, view);
    var events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query2), tag, listener.hashFn, listener.onComplete);
    var subtree = syncTree.syncPointTree_.subtree(path);
    if (tag) {
      assert(!syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
    } else {
      var queriesToStop = subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
        if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
          return [syncPointGetCompleteView(maybeChildSyncPoint).query];
        } else {
          var queries_1 = [];
          if (maybeChildSyncPoint) {
            queries_1 = queries_1.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(function(view2) {
              return view2.query;
            }));
          }
          each(childMap, function(_key, childQueries) {
            queries_1 = queries_1.concat(childQueries);
          });
          return queries_1;
        }
      });
      for (var i = 0; i < queriesToStop.length; ++i) {
        var queryToStop = queriesToStop[i];
        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));
      }
    }
    return events;
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ExistingValueProvider = function() {
    function ExistingValueProvider2(node_) {
      this.node_ = node_;
    }
    ExistingValueProvider2.prototype.getImmediateChild = function(childName) {
      var child2 = this.node_.getImmediateChild(childName);
      return new ExistingValueProvider2(child2);
    };
    ExistingValueProvider2.prototype.node = function() {
      return this.node_;
    };
    return ExistingValueProvider2;
  }();
  var DeferredValueProvider = function() {
    function DeferredValueProvider2(syncTree, path) {
      this.syncTree_ = syncTree;
      this.path_ = path;
    }
    DeferredValueProvider2.prototype.getImmediateChild = function(childName) {
      var childPath = pathChild(this.path_, childName);
      return new DeferredValueProvider2(this.syncTree_, childPath);
    };
    DeferredValueProvider2.prototype.node = function() {
      return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
    };
    return DeferredValueProvider2;
  }();
  var generateWithValues = function(values) {
    values = values || {};
    values["timestamp"] = values["timestamp"] || new Date().getTime();
    return values;
  };
  var resolveDeferredLeafValue = function(value, existingVal, serverValues) {
    if (!value || typeof value !== "object") {
      return value;
    }
    assert(".sv" in value, "Unexpected leaf node or priority contents");
    if (typeof value[".sv"] === "string") {
      return resolveScalarDeferredValue(value[".sv"], existingVal, serverValues);
    } else if (typeof value[".sv"] === "object") {
      return resolveComplexDeferredValue(value[".sv"], existingVal);
    } else {
      assert(false, "Unexpected server value: " + JSON.stringify(value, null, 2));
    }
  };
  var resolveScalarDeferredValue = function(op, existing, serverValues) {
    switch (op) {
      case "timestamp":
        return serverValues["timestamp"];
      default:
        assert(false, "Unexpected server value: " + op);
    }
  };
  var resolveComplexDeferredValue = function(op, existing, unused) {
    if (!op.hasOwnProperty("increment")) {
      assert(false, "Unexpected server value: " + JSON.stringify(op, null, 2));
    }
    var delta = op["increment"];
    if (typeof delta !== "number") {
      assert(false, "Unexpected increment value: " + delta);
    }
    var existingNode = existing.node();
    assert(existingNode !== null && typeof existingNode !== "undefined", "Expected ChildrenNode.EMPTY_NODE for nulls");
    if (!existingNode.isLeafNode()) {
      return delta;
    }
    var leaf = existingNode;
    var existingVal = leaf.getValue();
    if (typeof existingVal !== "number") {
      return delta;
    }
    return existingVal + delta;
  };
  var resolveDeferredValueTree = function(path, node, syncTree, serverValues) {
    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
  };
  var resolveDeferredValueSnapshot = function(node, existing, serverValues) {
    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
  };
  function resolveDeferredValue(node, existingVal, serverValues) {
    var rawPri = node.getPriority().val();
    var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild(".priority"), serverValues);
    var newNode;
    if (node.isLeafNode()) {
      var leafNode = node;
      var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
      if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
        return new LeafNode(value, nodeFromJSON(priority));
      } else {
        return node;
      }
    } else {
      var childrenNode = node;
      newNode = childrenNode;
      if (priority !== childrenNode.getPriority().val()) {
        newNode = newNode.updatePriority(new LeafNode(priority));
      }
      childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
        var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
        if (newChildNode !== childNode) {
          newNode = newNode.updateImmediateChild(childName, newChildNode);
        }
      });
      return newNode;
    }
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Tree = function() {
    function Tree2(name2, parent, node) {
      if (name2 === void 0) {
        name2 = "";
      }
      if (parent === void 0) {
        parent = null;
      }
      if (node === void 0) {
        node = {children: {}, childCount: 0};
      }
      this.name = name2;
      this.parent = parent;
      this.node = node;
    }
    return Tree2;
  }();
  function treeSubTree(tree, pathObj) {
    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
    var child2 = tree, next = pathGetFront(path);
    while (next !== null) {
      var childNode = safeGet(child2.node.children, next) || {
        children: {},
        childCount: 0
      };
      child2 = new Tree(next, child2, childNode);
      path = pathPopFront(path);
      next = pathGetFront(path);
    }
    return child2;
  }
  function treeGetValue(tree) {
    return tree.node.value;
  }
  function treeSetValue(tree, value) {
    tree.node.value = value;
    treeUpdateParents(tree);
  }
  function treeHasChildren(tree) {
    return tree.node.childCount > 0;
  }
  function treeIsEmpty(tree) {
    return treeGetValue(tree) === void 0 && !treeHasChildren(tree);
  }
  function treeForEachChild(tree, action) {
    each(tree.node.children, function(child2, childTree) {
      action(new Tree(child2, tree, childTree));
    });
  }
  function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
    if (includeSelf && !childrenFirst) {
      action(tree);
    }
    treeForEachChild(tree, function(child2) {
      treeForEachDescendant(child2, action, true, childrenFirst);
    });
    if (includeSelf && childrenFirst) {
      action(tree);
    }
  }
  function treeForEachAncestor(tree, action, includeSelf) {
    var node = includeSelf ? tree : tree.parent;
    while (node !== null) {
      if (action(node)) {
        return true;
      }
      node = node.parent;
    }
    return false;
  }
  function treeGetPath(tree) {
    return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + "/" + tree.name);
  }
  function treeUpdateParents(tree) {
    if (tree.parent !== null) {
      treeUpdateChild(tree.parent, tree.name, tree);
    }
  }
  function treeUpdateChild(tree, childName, child2) {
    var childEmpty = treeIsEmpty(child2);
    var childExists = contains(tree.node.children, childName);
    if (childEmpty && childExists) {
      delete tree.node.children[childName];
      tree.node.childCount--;
      treeUpdateParents(tree);
    } else if (!childEmpty && !childExists) {
      tree.node.children[childName] = child2.node;
      tree.node.childCount++;
      treeUpdateParents(tree);
    }
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
  var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
  var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
  var isValidKey = function(key) {
    return typeof key === "string" && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);
  };
  var isValidPathString = function(pathString) {
    return typeof pathString === "string" && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);
  };
  var isValidRootPathString = function(pathString) {
    if (pathString) {
      pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
    }
    return isValidPathString(pathString);
  };
  var isValidPriority = function(priority) {
    return priority === null || typeof priority === "string" || typeof priority === "number" && !isInvalidJSONNumber(priority) || priority && typeof priority === "object" && contains(priority, ".sv");
  };
  var validateFirebaseDataArg = function(fnName, value, path, optional) {
    if (optional && value === void 0) {
      return;
    }
    validateFirebaseData(errorPrefix(fnName, "value"), value, path);
  };
  var validateFirebaseData = function(errorPrefix2, data, path_) {
    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix2) : path_;
    if (data === void 0) {
      throw new Error(errorPrefix2 + "contains undefined " + validationPathToErrorString(path));
    }
    if (typeof data === "function") {
      throw new Error(errorPrefix2 + "contains a function " + validationPathToErrorString(path) + " with contents = " + data.toString());
    }
    if (isInvalidJSONNumber(data)) {
      throw new Error(errorPrefix2 + "contains " + data.toString() + " " + validationPathToErrorString(path));
    }
    if (typeof data === "string" && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {
      throw new Error(errorPrefix2 + "contains a string greater than " + MAX_LEAF_SIZE_ + " utf8 bytes " + validationPathToErrorString(path) + " ('" + data.substring(0, 50) + "...')");
    }
    if (data && typeof data === "object") {
      var hasDotValue_1 = false;
      var hasActualChild_1 = false;
      each(data, function(key, value) {
        if (key === ".value") {
          hasDotValue_1 = true;
        } else if (key !== ".priority" && key !== ".sv") {
          hasActualChild_1 = true;
          if (!isValidKey(key)) {
            throw new Error(errorPrefix2 + " contains an invalid key (" + key + ") " + validationPathToErrorString(path) + `.  Keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]"`);
          }
        }
        validationPathPush(path, key);
        validateFirebaseData(errorPrefix2, value, path);
        validationPathPop(path);
      });
      if (hasDotValue_1 && hasActualChild_1) {
        throw new Error(errorPrefix2 + ' contains ".value" child ' + validationPathToErrorString(path) + " in addition to actual children.");
      }
    }
  };
  var validateFirebaseMergePaths = function(errorPrefix2, mergePaths) {
    var i, curPath;
    for (i = 0; i < mergePaths.length; i++) {
      curPath = mergePaths[i];
      var keys = pathSlice(curPath);
      for (var j = 0; j < keys.length; j++) {
        if (keys[j] === ".priority" && j === keys.length - 1)
          ;
        else if (!isValidKey(keys[j])) {
          throw new Error(errorPrefix2 + "contains an invalid key (" + keys[j] + ") in path " + curPath.toString() + `. Keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]"`);
        }
      }
    }
    mergePaths.sort(pathCompare);
    var prevPath = null;
    for (i = 0; i < mergePaths.length; i++) {
      curPath = mergePaths[i];
      if (prevPath !== null && pathContains(prevPath, curPath)) {
        throw new Error(errorPrefix2 + "contains a path " + prevPath.toString() + " that is ancestor of another path " + curPath.toString());
      }
      prevPath = curPath;
    }
  };
  var validateFirebaseMergeDataArg = function(fnName, data, path, optional) {
    if (optional && data === void 0) {
      return;
    }
    var errorPrefix$1 = errorPrefix(fnName, "values");
    if (!(data && typeof data === "object") || Array.isArray(data)) {
      throw new Error(errorPrefix$1 + " must be an object containing the children to replace.");
    }
    var mergePaths = [];
    each(data, function(key, value) {
      var curPath = new Path(key);
      validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));
      if (pathGetBack(curPath) === ".priority") {
        if (!isValidPriority(value)) {
          throw new Error(errorPrefix$1 + "contains an invalid value for '" + curPath.toString() + "', which must be a valid Firebase priority (a string, finite number, server value, or null).");
        }
      }
      mergePaths.push(curPath);
    });
    validateFirebaseMergePaths(errorPrefix$1, mergePaths);
  };
  var validatePriority = function(fnName, priority, optional) {
    if (optional && priority === void 0) {
      return;
    }
    if (isInvalidJSONNumber(priority)) {
      throw new Error(errorPrefix(fnName, "priority") + "is " + priority.toString() + ", but must be a valid Firebase priority (a string, finite number, server value, or null).");
    }
    if (!isValidPriority(priority)) {
      throw new Error(errorPrefix(fnName, "priority") + "must be a valid Firebase priority (a string, finite number, server value, or null).");
    }
  };
  var validateEventType = function(fnName, eventType, optional) {
    if (optional && eventType === void 0) {
      return;
    }
    switch (eventType) {
      case "value":
      case "child_added":
      case "child_removed":
      case "child_changed":
      case "child_moved":
        break;
      default:
        throw new Error(errorPrefix(fnName, "eventType") + 'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".');
    }
  };
  var validateKey = function(fnName, argumentName, key, optional) {
    if (optional && key === void 0) {
      return;
    }
    if (!isValidKey(key)) {
      throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = "' + key + `".  Firebase keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]").`);
    }
  };
  var validatePathString = function(fnName, argumentName, pathString, optional) {
    if (optional && pathString === void 0) {
      return;
    }
    if (!isValidPathString(pathString)) {
      throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = "' + pathString + `". Paths must be non-empty strings and can't contain ".", "#", "$", "[", or "]"`);
    }
  };
  var validateRootPathString = function(fnName, argumentName, pathString, optional) {
    if (pathString) {
      pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
    }
    validatePathString(fnName, argumentName, pathString, optional);
  };
  var validateWritablePath = function(fnName, path) {
    if (pathGetFront(path) === ".info") {
      throw new Error(fnName + " failed = Can't modify data under /.info/");
    }
  };
  var validateUrl = function(fnName, parsedUrl) {
    var pathString = parsedUrl.path.toString();
    if (!(typeof parsedUrl.repoInfo.host === "string") || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(":")[0] !== "localhost" || pathString.length !== 0 && !isValidRootPathString(pathString)) {
      throw new Error(errorPrefix(fnName, "url") + `must be a valid firebase URL and the path can't contain ".", "#", "$", "[", or "]".`);
    }
  };
  var validateBoolean = function(fnName, argumentName, bool, optional) {
    if (optional && bool === void 0) {
      return;
    }
    if (typeof bool !== "boolean") {
      throw new Error(errorPrefix(fnName, argumentName) + "must be a boolean.");
    }
  };
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var EventQueue = function() {
    function EventQueue2() {
      this.eventLists_ = [];
      this.recursionDepth_ = 0;
    }
    return EventQueue2;
  }();
  function eventQueueQueueEvents(eventQueue, eventDataList) {
    var currList = null;
    for (var i = 0; i < eventDataList.length; i++) {
      var data = eventDataList[i];
      var path = data.getPath();
      if (currList !== null && !pathEquals(path, currList.path)) {
        eventQueue.eventLists_.push(currList);
        currList = null;
      }
      if (currList === null) {
        currList = {events: [], path};
      }
      currList.events.push(data);
    }
    if (currList) {
      eventQueue.eventLists_.push(currList);
    }
  }
  function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
    eventQueueQueueEvents(eventQueue, eventDataList);
    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function(eventPath) {
      return pathEquals(eventPath, path);
    });
  }
  function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
    eventQueueQueueEvents(eventQueue, eventDataList);
    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function(eventPath) {
      return pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath);
    });
  }
  function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
    eventQueue.recursionDepth_++;
    var sentAll = true;
    for (var i = 0; i < eventQueue.eventLists_.length; i++) {
      var eventList = eventQueue.eventLists_[i];
      if (eventList) {
        var eventPath = eventList.path;
        if (predicate(eventPath)) {
          eventListRaise(eventQueue.eventLists_[i]);
          eventQueue.eventLists_[i] = null;
        } else {
          sentAll = false;
        }
      }
    }
    if (sentAll) {
      eventQueue.eventLists_ = [];
    }
    eventQueue.recursionDepth_--;
  }
  function eventListRaise(eventList) {
    for (var i = 0; i < eventList.events.length; i++) {
      var eventData = eventList.events[i];
      if (eventData !== null) {
        eventList.events[i] = null;
        var eventFn = eventData.getEventRunner();
        if (logger) {
          log("event: " + eventData.toString());
        }
        exceptionGuard(eventFn);
      }
    }
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var INTERRUPT_REASON = "repo_interrupt";
  var MAX_TRANSACTION_RETRIES = 25;
  var Repo = function() {
    function Repo2(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
      this.repoInfo_ = repoInfo_;
      this.forceRestClient_ = forceRestClient_;
      this.authTokenProvider_ = authTokenProvider_;
      this.appCheckProvider_ = appCheckProvider_;
      this.dataUpdateCount = 0;
      this.statsListener_ = null;
      this.eventQueue_ = new EventQueue();
      this.nextWriteId_ = 1;
      this.interceptServerDataCallback_ = null;
      this.onDisconnect_ = newSparseSnapshotTree();
      this.transactionQueueTree_ = new Tree();
      this.persistentConnection_ = null;
      this.key = this.repoInfo_.toURLString();
    }
    Repo2.prototype.toString = function() {
      return (this.repoInfo_.secure ? "https://" : "http://") + this.repoInfo_.host;
    };
    return Repo2;
  }();
  function repoStart(repo, appId, authOverride) {
    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
    if (repo.forceRestClient_ || beingCrawled()) {
      repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function(pathString, data, isMerge, tag) {
        repoOnDataUpdate(repo, pathString, data, isMerge, tag);
      }, repo.authTokenProvider_, repo.appCheckProvider_);
      setTimeout(function() {
        return repoOnConnectStatus(repo, true);
      }, 0);
    } else {
      if (typeof authOverride !== "undefined" && authOverride !== null) {
        if (typeof authOverride !== "object") {
          throw new Error("Only objects are supported for option databaseAuthVariableOverride");
        }
        try {
          stringify(authOverride);
        } catch (e) {
          throw new Error("Invalid authOverride provided: " + e);
        }
      }
      repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, function(pathString, data, isMerge, tag) {
        repoOnDataUpdate(repo, pathString, data, isMerge, tag);
      }, function(connectStatus) {
        repoOnConnectStatus(repo, connectStatus);
      }, function(updates) {
        repoOnServerInfoUpdate(repo, updates);
      }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
      repo.server_ = repo.persistentConnection_;
    }
    repo.authTokenProvider_.addTokenChangeListener(function(token) {
      repo.server_.refreshAuthToken(token);
    });
    repo.appCheckProvider_.addTokenChangeListener(function(result) {
      repo.server_.refreshAppCheckToken(result.token);
    });
    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function() {
      return new StatsReporter(repo.stats_, repo.server_);
    });
    repo.infoData_ = new SnapshotHolder();
    repo.infoSyncTree_ = new SyncTree({
      startListening: function(query2, tag, currentHashFn, onComplete) {
        var infoEvents = [];
        var node = repo.infoData_.getNode(query2._path);
        if (!node.isEmpty()) {
          infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query2._path, node);
          setTimeout(function() {
            onComplete("ok");
          }, 0);
        }
        return infoEvents;
      },
      stopListening: function() {
      }
    });
    repoUpdateInfo(repo, "connected", false);
    repo.serverSyncTree_ = new SyncTree({
      startListening: function(query2, tag, currentHashFn, onComplete) {
        repo.server_.listen(query2, currentHashFn, tag, function(status, data) {
          var events = onComplete(status, data);
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query2._path, events);
        });
        return [];
      },
      stopListening: function(query2, tag) {
        repo.server_.unlisten(query2, tag);
      }
    });
  }
  function repoServerTime(repo) {
    var offsetNode = repo.infoData_.getNode(new Path(".info/serverTimeOffset"));
    var offset = offsetNode.val() || 0;
    return new Date().getTime() + offset;
  }
  function repoGenerateServerValues(repo) {
    return generateWithValues({
      timestamp: repoServerTime(repo)
    });
  }
  function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
    repo.dataUpdateCount++;
    var path = new Path(pathString);
    data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;
    var events = [];
    if (tag) {
      if (isMerge) {
        var taggedChildren = map(data, function(raw) {
          return nodeFromJSON(raw);
        });
        events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
      } else {
        var taggedSnap = nodeFromJSON(data);
        events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
      }
    } else if (isMerge) {
      var changedChildren = map(data, function(raw) {
        return nodeFromJSON(raw);
      });
      events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
    } else {
      var snap = nodeFromJSON(data);
      events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
    }
    var affectedPath = path;
    if (events.length > 0) {
      affectedPath = repoRerunTransactions(repo, path);
    }
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
  }
  function repoInterceptServerData(repo, callback) {
    repo.interceptServerDataCallback_ = callback;
  }
  function repoOnConnectStatus(repo, connectStatus) {
    repoUpdateInfo(repo, "connected", connectStatus);
    if (connectStatus === false) {
      repoRunOnDisconnectEvents(repo);
    }
  }
  function repoOnServerInfoUpdate(repo, updates) {
    each(updates, function(key, value) {
      repoUpdateInfo(repo, key, value);
    });
  }
  function repoUpdateInfo(repo, pathString, value) {
    var path = new Path("/.info/" + pathString);
    var newNode = nodeFromJSON(value);
    repo.infoData_.updateSnapshot(path, newNode);
    var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
  }
  function repoGetNextWriteId(repo) {
    return repo.nextWriteId_++;
  }
  function repoGetValue(repo, query2) {
    var cached = syncTreeGetServerValue(repo.serverSyncTree_, query2);
    if (cached != null) {
      return Promise.resolve(cached);
    }
    return repo.server_.get(query2).then(function(payload) {
      var node = nodeFromJSON(payload).withIndex(query2._queryParams.getIndex());
      var events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query2._path, node);
      eventQueueRaiseEventsAtPath(repo.eventQueue_, query2._path, events);
      return Promise.resolve(node);
    }, function(err) {
      repoLog(repo, "get for query " + stringify(query2) + " failed: " + err);
      return Promise.reject(new Error(err));
    });
  }
  function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
    repoLog(repo, "set", {
      path: path.toString(),
      value: newVal,
      priority: newPriority
    });
    var serverValues = repoGenerateServerValues(repo);
    var newNodeUnresolved = nodeFromJSON(newVal, newPriority);
    var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
    var writeId = repoGetNextWriteId(repo);
    var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
    eventQueueQueueEvents(repo.eventQueue_, events);
    repo.server_.put(path.toString(), newNodeUnresolved.val(true), function(status, errorReason) {
      var success = status === "ok";
      if (!success) {
        warn("set at " + path + " failed: " + status);
      }
      var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
    var affectedPath = repoAbortTransactions(repo, path);
    repoRerunTransactions(repo, affectedPath);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
  }
  function repoUpdate(repo, path, childrenToMerge, onComplete) {
    repoLog(repo, "update", {path: path.toString(), value: childrenToMerge});
    var empty = true;
    var serverValues = repoGenerateServerValues(repo);
    var changedChildren = {};
    each(childrenToMerge, function(changedKey, changedValue) {
      empty = false;
      changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);
    });
    if (!empty) {
      var writeId_1 = repoGetNextWriteId(repo);
      var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId_1);
      eventQueueQueueEvents(repo.eventQueue_, events);
      repo.server_.merge(path.toString(), childrenToMerge, function(status, errorReason) {
        var success = status === "ok";
        if (!success) {
          warn("update at " + path + " failed: " + status);
        }
        var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId_1, !success);
        var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
      });
      each(childrenToMerge, function(changedPath) {
        var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));
        repoRerunTransactions(repo, affectedPath);
      });
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
    } else {
      log("update() called with empty data.  Don't do anything.");
      repoCallOnCompleteCallback(repo, onComplete, "ok", void 0);
    }
  }
  function repoRunOnDisconnectEvents(repo) {
    repoLog(repo, "onDisconnectEvents");
    var serverValues = repoGenerateServerValues(repo);
    var resolvedOnDisconnectTree = newSparseSnapshotTree();
    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function(path, node) {
      var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
    });
    var events = [];
    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function(path, snap) {
      events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
      var affectedPath = repoAbortTransactions(repo, path);
      repoRerunTransactions(repo, affectedPath);
    });
    repo.onDisconnect_ = newSparseSnapshotTree();
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
  }
  function repoOnDisconnectCancel(repo, path, onComplete) {
    repo.server_.onDisconnectCancel(path.toString(), function(status, errorReason) {
      if (status === "ok") {
        sparseSnapshotTreeForget(repo.onDisconnect_, path);
      }
      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
  }
  function repoOnDisconnectSet(repo, path, value, onComplete) {
    var newNode = nodeFromJSON(value);
    repo.server_.onDisconnectPut(path.toString(), newNode.val(true), function(status, errorReason) {
      if (status === "ok") {
        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
      }
      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
  }
  function repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {
    var newNode = nodeFromJSON(value, priority);
    repo.server_.onDisconnectPut(path.toString(), newNode.val(true), function(status, errorReason) {
      if (status === "ok") {
        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
      }
      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
  }
  function repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {
    if (isEmpty(childrenToMerge)) {
      log("onDisconnect().update() called with empty data.  Don't do anything.");
      repoCallOnCompleteCallback(repo, onComplete, "ok", void 0);
      return;
    }
    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function(status, errorReason) {
      if (status === "ok") {
        each(childrenToMerge, function(childName, childNode) {
          var newChildNode = nodeFromJSON(childNode);
          sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);
        });
      }
      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
  }
  function repoAddEventCallbackForQuery(repo, query2, eventRegistration) {
    var events;
    if (pathGetFront(query2._path) === ".info") {
      events = syncTreeAddEventRegistration(repo.infoSyncTree_, query2, eventRegistration);
    } else {
      events = syncTreeAddEventRegistration(repo.serverSyncTree_, query2, eventRegistration);
    }
    eventQueueRaiseEventsAtPath(repo.eventQueue_, query2._path, events);
  }
  function repoRemoveEventCallbackForQuery(repo, query2, eventRegistration) {
    var events;
    if (pathGetFront(query2._path) === ".info") {
      events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query2, eventRegistration);
    } else {
      events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query2, eventRegistration);
    }
    eventQueueRaiseEventsAtPath(repo.eventQueue_, query2._path, events);
  }
  function repoInterrupt(repo) {
    if (repo.persistentConnection_) {
      repo.persistentConnection_.interrupt(INTERRUPT_REASON);
    }
  }
  function repoResume(repo) {
    if (repo.persistentConnection_) {
      repo.persistentConnection_.resume(INTERRUPT_REASON);
    }
  }
  function repoStats(repo, showDelta) {
    if (showDelta === void 0) {
      showDelta = false;
    }
    if (typeof console === "undefined") {
      return;
    }
    var stats2;
    if (showDelta) {
      if (!repo.statsListener_) {
        repo.statsListener_ = new StatsListener(repo.stats_);
      }
      stats2 = repo.statsListener_.get();
    } else {
      stats2 = repo.stats_.get();
    }
    var longestName = Object.keys(stats2).reduce(function(previousValue, currentValue) {
      return Math.max(currentValue.length, previousValue);
    }, 0);
    each(stats2, function(stat, value) {
      var paddedStat = stat;
      for (var i = stat.length; i < longestName + 2; i++) {
        paddedStat += " ";
      }
      console.log(paddedStat + value);
    });
  }
  function repoStatsIncrementCounter(repo, metric) {
    repo.stats_.incrementCounter(metric);
    statsReporterIncludeStat(repo.statsReporter_, metric);
  }
  function repoLog(repo) {
    var varArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      varArgs[_i - 1] = arguments[_i];
    }
    var prefix = "";
    if (repo.persistentConnection_) {
      prefix = repo.persistentConnection_.id + ":";
    }
    log.apply(void 0, __spreadArray([prefix], __read(varArgs)));
  }
  function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
    if (callback) {
      exceptionGuard(function() {
        if (status === "ok") {
          callback(null);
        } else {
          var code = (status || "error").toUpperCase();
          var message = code;
          if (errorReason) {
            message += ": " + errorReason;
          }
          var error2 = new Error(message);
          error2.code = code;
          callback(error2);
        }
      });
    }
  }
  function repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {
    repoLog(repo, "transaction on " + path);
    var transaction = {
      path,
      update: transactionUpdate,
      onComplete,
      status: null,
      order: LUIDGenerator(),
      applyLocally,
      retryCount: 0,
      unwatcher,
      abortReason: null,
      currentWriteId: null,
      currentInputSnapshot: null,
      currentOutputSnapshotRaw: null,
      currentOutputSnapshotResolved: null
    };
    var currentState = repoGetLatestState(repo, path, void 0);
    transaction.currentInputSnapshot = currentState;
    var newVal = transaction.update(currentState.val());
    if (newVal === void 0) {
      transaction.unwatcher();
      transaction.currentOutputSnapshotRaw = null;
      transaction.currentOutputSnapshotResolved = null;
      if (transaction.onComplete) {
        transaction.onComplete(null, false, transaction.currentInputSnapshot);
      }
    } else {
      validateFirebaseData("transaction failed: Data returned ", newVal, transaction.path);
      transaction.status = 0;
      var queueNode = treeSubTree(repo.transactionQueueTree_, path);
      var nodeQueue = treeGetValue(queueNode) || [];
      nodeQueue.push(transaction);
      treeSetValue(queueNode, nodeQueue);
      var priorityForNode = void 0;
      if (typeof newVal === "object" && newVal !== null && contains(newVal, ".priority")) {
        priorityForNode = safeGet(newVal, ".priority");
        assert(isValidPriority(priorityForNode), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");
      } else {
        var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;
        priorityForNode = currentNode.getPriority().val();
      }
      var serverValues = repoGenerateServerValues(repo);
      var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);
      var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
      transaction.currentOutputSnapshotRaw = newNodeUnresolved;
      transaction.currentOutputSnapshotResolved = newNode;
      transaction.currentWriteId = repoGetNextWriteId(repo);
      var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
      repoSendReadyTransactions(repo, repo.transactionQueueTree_);
    }
  }
  function repoGetLatestState(repo, path, excludeSets) {
    return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;
  }
  function repoSendReadyTransactions(repo, node) {
    if (node === void 0) {
      node = repo.transactionQueueTree_;
    }
    if (!node) {
      repoPruneCompletedTransactionsBelowNode(repo, node);
    }
    if (treeGetValue(node)) {
      var queue = repoBuildTransactionQueue(repo, node);
      assert(queue.length > 0, "Sending zero length transaction queue");
      var allRun = queue.every(function(transaction) {
        return transaction.status === 0;
      });
      if (allRun) {
        repoSendTransactionQueue(repo, treeGetPath(node), queue);
      }
    } else if (treeHasChildren(node)) {
      treeForEachChild(node, function(childNode) {
        repoSendReadyTransactions(repo, childNode);
      });
    }
  }
  function repoSendTransactionQueue(repo, path, queue) {
    var setsToIgnore = queue.map(function(txn2) {
      return txn2.currentWriteId;
    });
    var latestState = repoGetLatestState(repo, path, setsToIgnore);
    var snapToSend = latestState;
    var latestHash = latestState.hash();
    for (var i = 0; i < queue.length; i++) {
      var txn = queue[i];
      assert(txn.status === 0, "tryToSendTransactionQueue_: items in queue should all be run.");
      txn.status = 1;
      txn.retryCount++;
      var relativePath = newRelativePath(path, txn.path);
      snapToSend = snapToSend.updateChild(relativePath, txn.currentOutputSnapshotRaw);
    }
    var dataToSend = snapToSend.val(true);
    var pathToSend = path;
    repo.server_.put(pathToSend.toString(), dataToSend, function(status) {
      repoLog(repo, "transaction put response", {
        path: pathToSend.toString(),
        status
      });
      var events = [];
      if (status === "ok") {
        var callbacks = [];
        var _loop_1 = function(i3) {
          queue[i3].status = 2;
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i3].currentWriteId));
          if (queue[i3].onComplete) {
            callbacks.push(function() {
              return queue[i3].onComplete(null, true, queue[i3].currentOutputSnapshotResolved);
            });
          }
          queue[i3].unwatcher();
        };
        for (var i2 = 0; i2 < queue.length; i2++) {
          _loop_1(i2);
        }
        repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));
        repoSendReadyTransactions(repo, repo.transactionQueueTree_);
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
        for (var i2 = 0; i2 < callbacks.length; i2++) {
          exceptionGuard(callbacks[i2]);
        }
      } else {
        if (status === "datastale") {
          for (var i2 = 0; i2 < queue.length; i2++) {
            if (queue[i2].status === 3) {
              queue[i2].status = 4;
            } else {
              queue[i2].status = 0;
            }
          }
        } else {
          warn("transaction at " + pathToSend.toString() + " failed: " + status);
          for (var i2 = 0; i2 < queue.length; i2++) {
            queue[i2].status = 4;
            queue[i2].abortReason = status;
          }
        }
        repoRerunTransactions(repo, path);
      }
    }, latestHash);
  }
  function repoRerunTransactions(repo, changedPath) {
    var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
    var path = treeGetPath(rootMostTransactionNode);
    var queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
    repoRerunTransactionQueue(repo, queue, path);
    return path;
  }
  function repoRerunTransactionQueue(repo, queue, path) {
    if (queue.length === 0) {
      return;
    }
    var callbacks = [];
    var events = [];
    var txnsToRerun = queue.filter(function(q) {
      return q.status === 0;
    });
    var setsToIgnore = txnsToRerun.map(function(q) {
      return q.currentWriteId;
    });
    var _loop_2 = function(i2) {
      var transaction = queue[i2];
      var relativePath = newRelativePath(path, transaction.path);
      var abortTransaction = false, abortReason;
      assert(relativePath !== null, "rerunTransactionsUnderNode_: relativePath should not be null.");
      if (transaction.status === 4) {
        abortTransaction = true;
        abortReason = transaction.abortReason;
        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
      } else if (transaction.status === 0) {
        if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
          abortTransaction = true;
          abortReason = "maxretry";
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
        } else {
          var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
          transaction.currentInputSnapshot = currentNode;
          var newData = queue[i2].update(currentNode.val());
          if (newData !== void 0) {
            validateFirebaseData("transaction failed: Data returned ", newData, transaction.path);
            var newDataNode = nodeFromJSON(newData);
            var hasExplicitPriority = typeof newData === "object" && newData != null && contains(newData, ".priority");
            if (!hasExplicitPriority) {
              newDataNode = newDataNode.updatePriority(currentNode.getPriority());
            }
            var oldWriteId = transaction.currentWriteId;
            var serverValues = repoGenerateServerValues(repo);
            var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
            transaction.currentOutputSnapshotRaw = newDataNode;
            transaction.currentOutputSnapshotResolved = newNodeResolved;
            transaction.currentWriteId = repoGetNextWriteId(repo);
            setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
            events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
          } else {
            abortTransaction = true;
            abortReason = "nodata";
            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
          }
        }
      }
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
      events = [];
      if (abortTransaction) {
        queue[i2].status = 2;
        (function(unwatcher) {
          setTimeout(unwatcher, Math.floor(0));
        })(queue[i2].unwatcher);
        if (queue[i2].onComplete) {
          if (abortReason === "nodata") {
            callbacks.push(function() {
              return queue[i2].onComplete(null, false, queue[i2].currentInputSnapshot);
            });
          } else {
            callbacks.push(function() {
              return queue[i2].onComplete(new Error(abortReason), false, null);
            });
          }
        }
      }
    };
    for (var i = 0; i < queue.length; i++) {
      _loop_2(i);
    }
    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
    for (var i = 0; i < callbacks.length; i++) {
      exceptionGuard(callbacks[i]);
    }
    repoSendReadyTransactions(repo, repo.transactionQueueTree_);
  }
  function repoGetAncestorTransactionNode(repo, path) {
    var front;
    var transactionNode = repo.transactionQueueTree_;
    front = pathGetFront(path);
    while (front !== null && treeGetValue(transactionNode) === void 0) {
      transactionNode = treeSubTree(transactionNode, front);
      path = pathPopFront(path);
      front = pathGetFront(path);
    }
    return transactionNode;
  }
  function repoBuildTransactionQueue(repo, transactionNode) {
    var transactionQueue = [];
    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
    transactionQueue.sort(function(a, b) {
      return a.order - b.order;
    });
    return transactionQueue;
  }
  function repoAggregateTransactionQueuesForNode(repo, node, queue) {
    var nodeQueue = treeGetValue(node);
    if (nodeQueue) {
      for (var i = 0; i < nodeQueue.length; i++) {
        queue.push(nodeQueue[i]);
      }
    }
    treeForEachChild(node, function(child2) {
      repoAggregateTransactionQueuesForNode(repo, child2, queue);
    });
  }
  function repoPruneCompletedTransactionsBelowNode(repo, node) {
    var queue = treeGetValue(node);
    if (queue) {
      var to = 0;
      for (var from = 0; from < queue.length; from++) {
        if (queue[from].status !== 2) {
          queue[to] = queue[from];
          to++;
        }
      }
      queue.length = to;
      treeSetValue(node, queue.length > 0 ? queue : void 0);
    }
    treeForEachChild(node, function(childNode) {
      repoPruneCompletedTransactionsBelowNode(repo, childNode);
    });
  }
  function repoAbortTransactions(repo, path) {
    var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
    var transactionNode = treeSubTree(repo.transactionQueueTree_, path);
    treeForEachAncestor(transactionNode, function(node) {
      repoAbortTransactionsOnNode(repo, node);
    });
    repoAbortTransactionsOnNode(repo, transactionNode);
    treeForEachDescendant(transactionNode, function(node) {
      repoAbortTransactionsOnNode(repo, node);
    });
    return affectedPath;
  }
  function repoAbortTransactionsOnNode(repo, node) {
    var queue = treeGetValue(node);
    if (queue) {
      var callbacks = [];
      var events = [];
      var lastSent = -1;
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].status === 3)
          ;
        else if (queue[i].status === 1) {
          assert(lastSent === i - 1, "All SENT items should be at beginning of queue.");
          lastSent = i;
          queue[i].status = 3;
          queue[i].abortReason = "set";
        } else {
          assert(queue[i].status === 0, "Unexpected transaction status in abort");
          queue[i].unwatcher();
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));
          if (queue[i].onComplete) {
            callbacks.push(queue[i].onComplete.bind(null, new Error("set"), false, null));
          }
        }
      }
      if (lastSent === -1) {
        treeSetValue(node, void 0);
      } else {
        queue.length = lastSent + 1;
      }
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);
      for (var i = 0; i < callbacks.length; i++) {
        exceptionGuard(callbacks[i]);
      }
    }
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function decodePath(pathString) {
    var pathStringDecoded = "";
    var pieces = pathString.split("/");
    for (var i = 0; i < pieces.length; i++) {
      if (pieces[i].length > 0) {
        var piece = pieces[i];
        try {
          piece = decodeURIComponent(piece.replace(/\+/g, " "));
        } catch (e) {
        }
        pathStringDecoded += "/" + piece;
      }
    }
    return pathStringDecoded;
  }
  function decodeQuery(queryString) {
    var e_1, _a;
    var results = {};
    if (queryString.charAt(0) === "?") {
      queryString = queryString.substring(1);
    }
    try {
      for (var _b = __values(queryString.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
        var segment = _c.value;
        if (segment.length === 0) {
          continue;
        }
        var kv = segment.split("=");
        if (kv.length === 2) {
          results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
        } else {
          warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
        }
      }
    } catch (e_1_1) {
      e_1 = {error: e_1_1};
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return results;
  }
  var parseRepoInfo = function(dataURL, nodeAdmin) {
    var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
    if (parsedUrl.domain === "firebase.com") {
      fatal(parsedUrl.host + " is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
    }
    if ((!namespace || namespace === "undefined") && parsedUrl.domain !== "localhost") {
      fatal("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");
    }
    if (!parsedUrl.secure) {
      warnIfPageIsSecure();
    }
    var webSocketOnly = parsedUrl.scheme === "ws" || parsedUrl.scheme === "wss";
    return {
      repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, "", namespace !== parsedUrl.subdomain),
      path: new Path(parsedUrl.pathString)
    };
  };
  var parseDatabaseURL = function(dataURL) {
    var host = "", domain = "", subdomain = "", pathString = "", namespace = "";
    var secure = true, scheme = "https", port = 443;
    if (typeof dataURL === "string") {
      var colonInd = dataURL.indexOf("//");
      if (colonInd >= 0) {
        scheme = dataURL.substring(0, colonInd - 1);
        dataURL = dataURL.substring(colonInd + 2);
      }
      var slashInd = dataURL.indexOf("/");
      if (slashInd === -1) {
        slashInd = dataURL.length;
      }
      var questionMarkInd = dataURL.indexOf("?");
      if (questionMarkInd === -1) {
        questionMarkInd = dataURL.length;
      }
      host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
      if (slashInd < questionMarkInd) {
        pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
      }
      var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
      colonInd = host.indexOf(":");
      if (colonInd >= 0) {
        secure = scheme === "https" || scheme === "wss";
        port = parseInt(host.substring(colonInd + 1), 10);
      } else {
        colonInd = host.length;
      }
      var hostWithoutPort = host.slice(0, colonInd);
      if (hostWithoutPort.toLowerCase() === "localhost") {
        domain = "localhost";
      } else if (hostWithoutPort.split(".").length <= 2) {
        domain = hostWithoutPort;
      } else {
        var dotInd = host.indexOf(".");
        subdomain = host.substring(0, dotInd).toLowerCase();
        domain = host.substring(dotInd + 1);
        namespace = subdomain;
      }
      if ("ns" in queryParams) {
        namespace = queryParams["ns"];
      }
    }
    return {
      host,
      port,
      domain,
      subdomain,
      secure,
      scheme,
      pathString,
      namespace
    };
  };
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DataEvent = function() {
    function DataEvent2(eventType, eventRegistration, snapshot, prevName) {
      this.eventType = eventType;
      this.eventRegistration = eventRegistration;
      this.snapshot = snapshot;
      this.prevName = prevName;
    }
    DataEvent2.prototype.getPath = function() {
      var ref2 = this.snapshot.ref;
      if (this.eventType === "value") {
        return ref2._path;
      } else {
        return ref2.parent._path;
      }
    };
    DataEvent2.prototype.getEventType = function() {
      return this.eventType;
    };
    DataEvent2.prototype.getEventRunner = function() {
      return this.eventRegistration.getEventRunner(this);
    };
    DataEvent2.prototype.toString = function() {
      return this.getPath().toString() + ":" + this.eventType + ":" + stringify(this.snapshot.exportVal());
    };
    return DataEvent2;
  }();
  var CancelEvent = function() {
    function CancelEvent2(eventRegistration, error2, path) {
      this.eventRegistration = eventRegistration;
      this.error = error2;
      this.path = path;
    }
    CancelEvent2.prototype.getPath = function() {
      return this.path;
    };
    CancelEvent2.prototype.getEventType = function() {
      return "cancel";
    };
    CancelEvent2.prototype.getEventRunner = function() {
      return this.eventRegistration.getEventRunner(this);
    };
    CancelEvent2.prototype.toString = function() {
      return this.path.toString() + ":cancel";
    };
    return CancelEvent2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var CallbackContext = function() {
    function CallbackContext2(snapshotCallback, cancelCallback) {
      this.snapshotCallback = snapshotCallback;
      this.cancelCallback = cancelCallback;
    }
    CallbackContext2.prototype.onValue = function(expDataSnapshot, previousChildName) {
      this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
    };
    CallbackContext2.prototype.onCancel = function(error2) {
      assert(this.hasCancelCallback, "Raising a cancel event on a listener with no cancel callback");
      return this.cancelCallback.call(null, error2);
    };
    Object.defineProperty(CallbackContext2.prototype, "hasCancelCallback", {
      get: function() {
        return !!this.cancelCallback;
      },
      enumerable: false,
      configurable: true
    });
    CallbackContext2.prototype.matches = function(other) {
      return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== void 0 && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;
    };
    return CallbackContext2;
  }();
  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var OnDisconnect$1 = function() {
    function OnDisconnect2(_repo, _path) {
      this._repo = _repo;
      this._path = _path;
    }
    OnDisconnect2.prototype.cancel = function() {
      var deferred = new Deferred();
      repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(function() {
      }));
      return deferred.promise;
    };
    OnDisconnect2.prototype.remove = function() {
      validateWritablePath("OnDisconnect.remove", this._path);
      var deferred = new Deferred();
      repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(function() {
      }));
      return deferred.promise;
    };
    OnDisconnect2.prototype.set = function(value) {
      validateWritablePath("OnDisconnect.set", this._path);
      validateFirebaseDataArg("OnDisconnect.set", value, this._path, false);
      var deferred = new Deferred();
      repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(function() {
      }));
      return deferred.promise;
    };
    OnDisconnect2.prototype.setWithPriority = function(value, priority) {
      validateWritablePath("OnDisconnect.setWithPriority", this._path);
      validateFirebaseDataArg("OnDisconnect.setWithPriority", value, this._path, false);
      validatePriority("OnDisconnect.setWithPriority", priority, false);
      var deferred = new Deferred();
      repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(function() {
      }));
      return deferred.promise;
    };
    OnDisconnect2.prototype.update = function(values) {
      validateWritablePath("OnDisconnect.update", this._path);
      validateFirebaseMergeDataArg("OnDisconnect.update", values, this._path, false);
      var deferred = new Deferred();
      repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(function() {
      }));
      return deferred.promise;
    };
    return OnDisconnect2;
  }();
  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var QueryImpl = function() {
    function QueryImpl2(_repo, _path, _queryParams, _orderByCalled) {
      this._repo = _repo;
      this._path = _path;
      this._queryParams = _queryParams;
      this._orderByCalled = _orderByCalled;
    }
    Object.defineProperty(QueryImpl2.prototype, "key", {
      get: function() {
        if (pathIsEmpty(this._path)) {
          return null;
        } else {
          return pathGetBack(this._path);
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(QueryImpl2.prototype, "ref", {
      get: function() {
        return new ReferenceImpl(this._repo, this._path);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(QueryImpl2.prototype, "_queryIdentifier", {
      get: function() {
        var obj = queryParamsGetQueryObject(this._queryParams);
        var id = ObjectToUniqueKey(obj);
        return id === "{}" ? "default" : id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(QueryImpl2.prototype, "_queryObject", {
      get: function() {
        return queryParamsGetQueryObject(this._queryParams);
      },
      enumerable: false,
      configurable: true
    });
    QueryImpl2.prototype.isEqual = function(other) {
      other = getModularInstance(other);
      if (!(other instanceof QueryImpl2)) {
        return false;
      }
      var sameRepo = this._repo === other._repo;
      var samePath = pathEquals(this._path, other._path);
      var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
      return sameRepo && samePath && sameQueryIdentifier;
    };
    QueryImpl2.prototype.toJSON = function() {
      return this.toString();
    };
    QueryImpl2.prototype.toString = function() {
      return this._repo.toString() + pathToUrlEncodedString(this._path);
    };
    return QueryImpl2;
  }();
  function validateNoPreviousOrderByCall(query2, fnName) {
    if (query2._orderByCalled === true) {
      throw new Error(fnName + ": You can't combine multiple orderBy calls.");
    }
  }
  function validateQueryEndpoints(params) {
    var startNode = null;
    var endNode = null;
    if (params.hasStart()) {
      startNode = params.getIndexStartValue();
    }
    if (params.hasEnd()) {
      endNode = params.getIndexEndValue();
    }
    if (params.getIndex() === KEY_INDEX) {
      var tooManyArgsError = "Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().";
      var wrongArgTypeError = "Query: When ordering by key, the argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() must be a string.";
      if (params.hasStart()) {
        var startName = params.getIndexStartName();
        if (startName !== MIN_NAME) {
          throw new Error(tooManyArgsError);
        } else if (typeof startNode !== "string") {
          throw new Error(wrongArgTypeError);
        }
      }
      if (params.hasEnd()) {
        var endName = params.getIndexEndName();
        if (endName !== MAX_NAME) {
          throw new Error(tooManyArgsError);
        } else if (typeof endNode !== "string") {
          throw new Error(wrongArgTypeError);
        }
      }
    } else if (params.getIndex() === PRIORITY_INDEX) {
      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {
        throw new Error("Query: When ordering by priority, the first argument passed to startAt(), startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value (null, a number, or a string).");
      }
    } else {
      assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, "unknown index type.");
      if (startNode != null && typeof startNode === "object" || endNode != null && typeof endNode === "object") {
        throw new Error("Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() cannot be an object.");
      }
    }
  }
  function validateLimit(params) {
    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {
      throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use limitToFirst() or limitToLast() instead.");
    }
  }
  var ReferenceImpl = function(_super) {
    __extends(ReferenceImpl2, _super);
    function ReferenceImpl2(repo, path) {
      return _super.call(this, repo, path, new QueryParams(), false) || this;
    }
    Object.defineProperty(ReferenceImpl2.prototype, "parent", {
      get: function() {
        var parentPath = pathParent(this._path);
        return parentPath === null ? null : new ReferenceImpl2(this._repo, parentPath);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ReferenceImpl2.prototype, "root", {
      get: function() {
        var ref2 = this;
        while (ref2.parent !== null) {
          ref2 = ref2.parent;
        }
        return ref2;
      },
      enumerable: false,
      configurable: true
    });
    return ReferenceImpl2;
  }(QueryImpl);
  var DataSnapshot$1 = function() {
    function DataSnapshot2(_node, ref2, _index) {
      this._node = _node;
      this.ref = ref2;
      this._index = _index;
    }
    Object.defineProperty(DataSnapshot2.prototype, "priority", {
      get: function() {
        return this._node.getPriority().val();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DataSnapshot2.prototype, "key", {
      get: function() {
        return this.ref.key;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DataSnapshot2.prototype, "size", {
      get: function() {
        return this._node.numChildren();
      },
      enumerable: false,
      configurable: true
    });
    DataSnapshot2.prototype.child = function(path) {
      var childPath = new Path(path);
      var childRef = child(this.ref, path);
      return new DataSnapshot2(this._node.getChild(childPath), childRef, PRIORITY_INDEX);
    };
    DataSnapshot2.prototype.exists = function() {
      return !this._node.isEmpty();
    };
    DataSnapshot2.prototype.exportVal = function() {
      return this._node.val(true);
    };
    DataSnapshot2.prototype.forEach = function(action) {
      var _this = this;
      if (this._node.isLeafNode()) {
        return false;
      }
      var childrenNode = this._node;
      return !!childrenNode.forEachChild(this._index, function(key, node) {
        return action(new DataSnapshot2(node, child(_this.ref, key), PRIORITY_INDEX));
      });
    };
    DataSnapshot2.prototype.hasChild = function(path) {
      var childPath = new Path(path);
      return !this._node.getChild(childPath).isEmpty();
    };
    DataSnapshot2.prototype.hasChildren = function() {
      if (this._node.isLeafNode()) {
        return false;
      } else {
        return !this._node.isEmpty();
      }
    };
    DataSnapshot2.prototype.toJSON = function() {
      return this.exportVal();
    };
    DataSnapshot2.prototype.val = function() {
      return this._node.val();
    };
    return DataSnapshot2;
  }();
  function ref(db, path) {
    db = getModularInstance(db);
    db._checkNotDeleted("ref");
    return path !== void 0 ? child(db._root, path) : db._root;
  }
  function refFromURL(db, url) {
    db = getModularInstance(db);
    db._checkNotDeleted("refFromURL");
    var parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);
    validateUrl("refFromURL", parsedURL);
    var repoInfo = parsedURL.repoInfo;
    if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {
      fatal("refFromURL: Host name does not match the current database: (found " + repoInfo.host + " but expected " + db._repo.repoInfo_.host + ")");
    }
    return ref(db, parsedURL.path.toString());
  }
  function child(parent, path) {
    parent = getModularInstance(parent);
    if (pathGetFront(parent._path) === null) {
      validateRootPathString("child", "path", path, false);
    } else {
      validatePathString("child", "path", path, false);
    }
    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));
  }
  function push(parent, value) {
    parent = getModularInstance(parent);
    validateWritablePath("push", parent._path);
    validateFirebaseDataArg("push", value, parent._path, true);
    var now = repoServerTime(parent._repo);
    var name2 = nextPushId(now);
    var thennablePushRef = child(parent, name2);
    var pushRef = child(parent, name2);
    var promise;
    if (value != null) {
      promise = set(pushRef, value).then(function() {
        return pushRef;
      });
    } else {
      promise = Promise.resolve(pushRef);
    }
    thennablePushRef.then = promise.then.bind(promise);
    thennablePushRef.catch = promise.then.bind(promise, void 0);
    return thennablePushRef;
  }
  function remove(ref2) {
    validateWritablePath("remove", ref2._path);
    return set(ref2, null);
  }
  function set(ref2, value) {
    ref2 = getModularInstance(ref2);
    validateWritablePath("set", ref2._path);
    validateFirebaseDataArg("set", value, ref2._path, false);
    var deferred = new Deferred();
    repoSetWithPriority(ref2._repo, ref2._path, value, null, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  }
  function setPriority(ref2, priority) {
    ref2 = getModularInstance(ref2);
    validateWritablePath("setPriority", ref2._path);
    validatePriority("setPriority", priority, false);
    var deferred = new Deferred();
    repoSetWithPriority(ref2._repo, pathChild(ref2._path, ".priority"), priority, null, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  }
  function setWithPriority(ref2, value, priority) {
    validateWritablePath("setWithPriority", ref2._path);
    validateFirebaseDataArg("setWithPriority", value, ref2._path, false);
    validatePriority("setWithPriority", priority, false);
    if (ref2.key === ".length" || ref2.key === ".keys") {
      throw "setWithPriority failed: " + ref2.key + " is a read-only object.";
    }
    var deferred = new Deferred();
    repoSetWithPriority(ref2._repo, ref2._path, value, priority, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  }
  function update(ref2, values) {
    validateFirebaseMergeDataArg("update", values, ref2._path, false);
    var deferred = new Deferred();
    repoUpdate(ref2._repo, ref2._path, values, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  }
  function get(query2) {
    query2 = getModularInstance(query2);
    return repoGetValue(query2._repo, query2).then(function(node) {
      return new DataSnapshot$1(node, new ReferenceImpl(query2._repo, query2._path), query2._queryParams.getIndex());
    });
  }
  var ValueEventRegistration = function() {
    function ValueEventRegistration2(callbackContext) {
      this.callbackContext = callbackContext;
    }
    ValueEventRegistration2.prototype.respondsTo = function(eventType) {
      return eventType === "value";
    };
    ValueEventRegistration2.prototype.createEvent = function(change, query2) {
      var index = query2._queryParams.getIndex();
      return new DataEvent("value", this, new DataSnapshot$1(change.snapshotNode, new ReferenceImpl(query2._repo, query2._path), index));
    };
    ValueEventRegistration2.prototype.getEventRunner = function(eventData) {
      var _this = this;
      if (eventData.getEventType() === "cancel") {
        return function() {
          return _this.callbackContext.onCancel(eventData.error);
        };
      } else {
        return function() {
          return _this.callbackContext.onValue(eventData.snapshot, null);
        };
      }
    };
    ValueEventRegistration2.prototype.createCancelEvent = function(error2, path) {
      if (this.callbackContext.hasCancelCallback) {
        return new CancelEvent(this, error2, path);
      } else {
        return null;
      }
    };
    ValueEventRegistration2.prototype.matches = function(other) {
      if (!(other instanceof ValueEventRegistration2)) {
        return false;
      } else if (!other.callbackContext || !this.callbackContext) {
        return true;
      } else {
        return other.callbackContext.matches(this.callbackContext);
      }
    };
    ValueEventRegistration2.prototype.hasAnyCallback = function() {
      return this.callbackContext !== null;
    };
    return ValueEventRegistration2;
  }();
  var ChildEventRegistration = function() {
    function ChildEventRegistration2(eventType, callbackContext) {
      this.eventType = eventType;
      this.callbackContext = callbackContext;
    }
    ChildEventRegistration2.prototype.respondsTo = function(eventType) {
      var eventToCheck = eventType === "children_added" ? "child_added" : eventType;
      eventToCheck = eventToCheck === "children_removed" ? "child_removed" : eventToCheck;
      return this.eventType === eventToCheck;
    };
    ChildEventRegistration2.prototype.createCancelEvent = function(error2, path) {
      if (this.callbackContext.hasCancelCallback) {
        return new CancelEvent(this, error2, path);
      } else {
        return null;
      }
    };
    ChildEventRegistration2.prototype.createEvent = function(change, query2) {
      assert(change.childName != null, "Child events should have a childName.");
      var childRef = child(new ReferenceImpl(query2._repo, query2._path), change.childName);
      var index = query2._queryParams.getIndex();
      return new DataEvent(change.type, this, new DataSnapshot$1(change.snapshotNode, childRef, index), change.prevName);
    };
    ChildEventRegistration2.prototype.getEventRunner = function(eventData) {
      var _this = this;
      if (eventData.getEventType() === "cancel") {
        return function() {
          return _this.callbackContext.onCancel(eventData.error);
        };
      } else {
        return function() {
          return _this.callbackContext.onValue(eventData.snapshot, eventData.prevName);
        };
      }
    };
    ChildEventRegistration2.prototype.matches = function(other) {
      if (other instanceof ChildEventRegistration2) {
        return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));
      }
      return false;
    };
    ChildEventRegistration2.prototype.hasAnyCallback = function() {
      return !!this.callbackContext;
    };
    return ChildEventRegistration2;
  }();
  function addEventListener(query2, eventType, callback, cancelCallbackOrListenOptions, options) {
    var cancelCallback;
    if (typeof cancelCallbackOrListenOptions === "object") {
      cancelCallback = void 0;
      options = cancelCallbackOrListenOptions;
    }
    if (typeof cancelCallbackOrListenOptions === "function") {
      cancelCallback = cancelCallbackOrListenOptions;
    }
    if (options && options.onlyOnce) {
      var userCallback_1 = callback;
      var onceCallback = function(dataSnapshot, previousChildName) {
        repoRemoveEventCallbackForQuery(query2._repo, query2, container);
        userCallback_1(dataSnapshot, previousChildName);
      };
      onceCallback.userCallback = callback.userCallback;
      onceCallback.context = callback.context;
      callback = onceCallback;
    }
    var callbackContext = new CallbackContext(callback, cancelCallback || void 0);
    var container = eventType === "value" ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);
    repoAddEventCallbackForQuery(query2._repo, query2, container);
    return function() {
      return repoRemoveEventCallbackForQuery(query2._repo, query2, container);
    };
  }
  function onValue(query2, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query2, "value", callback, cancelCallbackOrListenOptions, options);
  }
  function onChildAdded(query2, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query2, "child_added", callback, cancelCallbackOrListenOptions, options);
  }
  function onChildChanged(query2, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query2, "child_changed", callback, cancelCallbackOrListenOptions, options);
  }
  function onChildMoved(query2, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query2, "child_moved", callback, cancelCallbackOrListenOptions, options);
  }
  function onChildRemoved(query2, callback, cancelCallbackOrListenOptions, options) {
    return addEventListener(query2, "child_removed", callback, cancelCallbackOrListenOptions, options);
  }
  function off(query2, eventType, callback) {
    var container = null;
    var expCallback = callback ? new CallbackContext(callback) : null;
    if (eventType === "value") {
      container = new ValueEventRegistration(expCallback);
    } else if (eventType) {
      container = new ChildEventRegistration(eventType, expCallback);
    }
    repoRemoveEventCallbackForQuery(query2._repo, query2, container);
  }
  var QueryConstraint = function() {
    function QueryConstraint2() {
    }
    return QueryConstraint2;
  }();
  var QueryEndAtConstraint = function(_super) {
    __extends(QueryEndAtConstraint2, _super);
    function QueryEndAtConstraint2(_value, _key) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      _this._key = _key;
      return _this;
    }
    QueryEndAtConstraint2.prototype._apply = function(query2) {
      validateFirebaseDataArg("endAt", this._value, query2._path, true);
      var newParams = queryParamsEndAt(query2._queryParams, this._value, this._key);
      validateLimit(newParams);
      validateQueryEndpoints(newParams);
      if (query2._queryParams.hasEnd()) {
        throw new Error("endAt: Starting point was already set (by another call to endAt, endBefore or equalTo).");
      }
      return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
    };
    return QueryEndAtConstraint2;
  }(QueryConstraint);
  function endAt(value, key) {
    validateKey("endAt", "key", key, true);
    return new QueryEndAtConstraint(value, key);
  }
  var QueryEndBeforeConstraint = function(_super) {
    __extends(QueryEndBeforeConstraint2, _super);
    function QueryEndBeforeConstraint2(_value, _key) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      _this._key = _key;
      return _this;
    }
    QueryEndBeforeConstraint2.prototype._apply = function(query2) {
      validateFirebaseDataArg("endBefore", this._value, query2._path, false);
      var newParams = queryParamsEndBefore(query2._queryParams, this._value, this._key);
      validateLimit(newParams);
      validateQueryEndpoints(newParams);
      if (query2._queryParams.hasEnd()) {
        throw new Error("endBefore: Starting point was already set (by another call to endAt, endBefore or equalTo).");
      }
      return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
    };
    return QueryEndBeforeConstraint2;
  }(QueryConstraint);
  function endBefore(value, key) {
    validateKey("endBefore", "key", key, true);
    return new QueryEndBeforeConstraint(value, key);
  }
  var QueryStartAtConstraint = function(_super) {
    __extends(QueryStartAtConstraint2, _super);
    function QueryStartAtConstraint2(_value, _key) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      _this._key = _key;
      return _this;
    }
    QueryStartAtConstraint2.prototype._apply = function(query2) {
      validateFirebaseDataArg("startAt", this._value, query2._path, true);
      var newParams = queryParamsStartAt(query2._queryParams, this._value, this._key);
      validateLimit(newParams);
      validateQueryEndpoints(newParams);
      if (query2._queryParams.hasStart()) {
        throw new Error("startAt: Starting point was already set (by another call to startAt, startBefore or equalTo).");
      }
      return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
    };
    return QueryStartAtConstraint2;
  }(QueryConstraint);
  function startAt(value, key) {
    if (value === void 0) {
      value = null;
    }
    validateKey("startAt", "key", key, true);
    return new QueryStartAtConstraint(value, key);
  }
  var QueryStartAfterConstraint = function(_super) {
    __extends(QueryStartAfterConstraint2, _super);
    function QueryStartAfterConstraint2(_value, _key) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      _this._key = _key;
      return _this;
    }
    QueryStartAfterConstraint2.prototype._apply = function(query2) {
      validateFirebaseDataArg("startAfter", this._value, query2._path, false);
      var newParams = queryParamsStartAfter(query2._queryParams, this._value, this._key);
      validateLimit(newParams);
      validateQueryEndpoints(newParams);
      if (query2._queryParams.hasStart()) {
        throw new Error("startAfter: Starting point was already set (by another call to startAt, startAfter, or equalTo).");
      }
      return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
    };
    return QueryStartAfterConstraint2;
  }(QueryConstraint);
  function startAfter(value, key) {
    validateKey("startAfter", "key", key, true);
    return new QueryStartAfterConstraint(value, key);
  }
  var QueryLimitToFirstConstraint = function(_super) {
    __extends(QueryLimitToFirstConstraint2, _super);
    function QueryLimitToFirstConstraint2(_limit) {
      var _this = _super.call(this) || this;
      _this._limit = _limit;
      return _this;
    }
    QueryLimitToFirstConstraint2.prototype._apply = function(query2) {
      if (query2._queryParams.hasLimit()) {
        throw new Error("limitToFirst: Limit was already set (by another call to limitToFirst or limitToLast).");
      }
      return new QueryImpl(query2._repo, query2._path, queryParamsLimitToFirst(query2._queryParams, this._limit), query2._orderByCalled);
    };
    return QueryLimitToFirstConstraint2;
  }(QueryConstraint);
  function limitToFirst(limit) {
    if (typeof limit !== "number" || Math.floor(limit) !== limit || limit <= 0) {
      throw new Error("limitToFirst: First argument must be a positive integer.");
    }
    return new QueryLimitToFirstConstraint(limit);
  }
  var QueryLimitToLastConstraint = function(_super) {
    __extends(QueryLimitToLastConstraint2, _super);
    function QueryLimitToLastConstraint2(_limit) {
      var _this = _super.call(this) || this;
      _this._limit = _limit;
      return _this;
    }
    QueryLimitToLastConstraint2.prototype._apply = function(query2) {
      if (query2._queryParams.hasLimit()) {
        throw new Error("limitToLast: Limit was already set (by another call to limitToFirst or limitToLast).");
      }
      return new QueryImpl(query2._repo, query2._path, queryParamsLimitToLast(query2._queryParams, this._limit), query2._orderByCalled);
    };
    return QueryLimitToLastConstraint2;
  }(QueryConstraint);
  function limitToLast(limit) {
    if (typeof limit !== "number" || Math.floor(limit) !== limit || limit <= 0) {
      throw new Error("limitToLast: First argument must be a positive integer.");
    }
    return new QueryLimitToLastConstraint(limit);
  }
  var QueryOrderByChildConstraint = function(_super) {
    __extends(QueryOrderByChildConstraint2, _super);
    function QueryOrderByChildConstraint2(_path) {
      var _this = _super.call(this) || this;
      _this._path = _path;
      return _this;
    }
    QueryOrderByChildConstraint2.prototype._apply = function(query2) {
      validateNoPreviousOrderByCall(query2, "orderByChild");
      var parsedPath = new Path(this._path);
      if (pathIsEmpty(parsedPath)) {
        throw new Error("orderByChild: cannot pass in empty path. Use orderByValue() instead.");
      }
      var index = new PathIndex(parsedPath);
      var newParams = queryParamsOrderBy(query2._queryParams, index);
      validateQueryEndpoints(newParams);
      return new QueryImpl(query2._repo, query2._path, newParams, true);
    };
    return QueryOrderByChildConstraint2;
  }(QueryConstraint);
  function orderByChild(path) {
    if (path === "$key") {
      throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');
    } else if (path === "$priority") {
      throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');
    } else if (path === "$value") {
      throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');
    }
    validatePathString("orderByChild", "path", path, false);
    return new QueryOrderByChildConstraint(path);
  }
  var QueryOrderByKeyConstraint = function(_super) {
    __extends(QueryOrderByKeyConstraint2, _super);
    function QueryOrderByKeyConstraint2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueryOrderByKeyConstraint2.prototype._apply = function(query2) {
      validateNoPreviousOrderByCall(query2, "orderByKey");
      var newParams = queryParamsOrderBy(query2._queryParams, KEY_INDEX);
      validateQueryEndpoints(newParams);
      return new QueryImpl(query2._repo, query2._path, newParams, true);
    };
    return QueryOrderByKeyConstraint2;
  }(QueryConstraint);
  function orderByKey() {
    return new QueryOrderByKeyConstraint();
  }
  var QueryOrderByPriorityConstraint = function(_super) {
    __extends(QueryOrderByPriorityConstraint2, _super);
    function QueryOrderByPriorityConstraint2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueryOrderByPriorityConstraint2.prototype._apply = function(query2) {
      validateNoPreviousOrderByCall(query2, "orderByPriority");
      var newParams = queryParamsOrderBy(query2._queryParams, PRIORITY_INDEX);
      validateQueryEndpoints(newParams);
      return new QueryImpl(query2._repo, query2._path, newParams, true);
    };
    return QueryOrderByPriorityConstraint2;
  }(QueryConstraint);
  function orderByPriority() {
    return new QueryOrderByPriorityConstraint();
  }
  var QueryOrderByValueConstraint = function(_super) {
    __extends(QueryOrderByValueConstraint2, _super);
    function QueryOrderByValueConstraint2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    QueryOrderByValueConstraint2.prototype._apply = function(query2) {
      validateNoPreviousOrderByCall(query2, "orderByValue");
      var newParams = queryParamsOrderBy(query2._queryParams, VALUE_INDEX);
      validateQueryEndpoints(newParams);
      return new QueryImpl(query2._repo, query2._path, newParams, true);
    };
    return QueryOrderByValueConstraint2;
  }(QueryConstraint);
  function orderByValue() {
    return new QueryOrderByValueConstraint();
  }
  var QueryEqualToValueConstraint = function(_super) {
    __extends(QueryEqualToValueConstraint2, _super);
    function QueryEqualToValueConstraint2(_value, _key) {
      var _this = _super.call(this) || this;
      _this._value = _value;
      _this._key = _key;
      return _this;
    }
    QueryEqualToValueConstraint2.prototype._apply = function(query2) {
      validateFirebaseDataArg("equalTo", this._value, query2._path, false);
      if (query2._queryParams.hasStart()) {
        throw new Error("equalTo: Starting point was already set (by another call to startAt/startAfter or equalTo).");
      }
      if (query2._queryParams.hasEnd()) {
        throw new Error("equalTo: Ending point was already set (by another call to endAt/endBefore or equalTo).");
      }
      return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query2));
    };
    return QueryEqualToValueConstraint2;
  }(QueryConstraint);
  function equalTo(value, key) {
    validateKey("equalTo", "key", key, true);
    return new QueryEqualToValueConstraint(value, key);
  }
  function query(query2) {
    var e_1, _a;
    var queryConstraints = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      queryConstraints[_i - 1] = arguments[_i];
    }
    var queryImpl = getModularInstance(query2);
    try {
      for (var queryConstraints_1 = __values(queryConstraints), queryConstraints_1_1 = queryConstraints_1.next(); !queryConstraints_1_1.done; queryConstraints_1_1 = queryConstraints_1.next()) {
        var constraint = queryConstraints_1_1.value;
        queryImpl = constraint._apply(queryImpl);
      }
    } catch (e_1_1) {
      e_1 = {error: e_1_1};
    } finally {
      try {
        if (queryConstraints_1_1 && !queryConstraints_1_1.done && (_a = queryConstraints_1.return))
          _a.call(queryConstraints_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return queryImpl;
  }
  syncPointSetReferenceConstructor(ReferenceImpl);
  syncTreeSetReferenceConstructor(ReferenceImpl);
  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var FIREBASE_DATABASE_EMULATOR_HOST_VAR = "FIREBASE_DATABASE_EMULATOR_HOST";
  var repos = {};
  var useRestClient = false;
  function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
    repo.repoInfo_ = new RepoInfo(host + ":" + port, false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);
    if (tokenProvider) {
      repo.authTokenProvider_ = tokenProvider;
    }
  }
  function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {
    var dbUrl = url || app.options.databaseURL;
    if (dbUrl === void 0) {
      if (!app.options.projectId) {
        fatal("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp().");
      }
      log("Using default host for project ", app.options.projectId);
      dbUrl = app.options.projectId + "-default-rtdb.firebaseio.com";
    }
    var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
    var repoInfo = parsedUrl.repoInfo;
    var isEmulator;
    var dbEmulatorHost = void 0;
    if (typeof process !== "undefined") {
      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
    }
    if (dbEmulatorHost) {
      isEmulator = true;
      dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
      repoInfo = parsedUrl.repoInfo;
    } else {
      isEmulator = !parsedUrl.repoInfo.secure;
    }
    var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);
    validateUrl("Invalid Firebase Database URL", parsedUrl);
    if (!pathIsEmpty(parsedUrl.path)) {
      fatal("Database URL must point to the root of a Firebase Database (not including a child path).");
    }
    var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));
    return new Database$1(repo, app);
  }
  function repoManagerDeleteRepo(repo, appName) {
    var appRepos = repos[appName];
    if (!appRepos || appRepos[repo.key] !== repo) {
      fatal("Database " + appName + "(" + repo.repoInfo_ + ") has already been deleted.");
    }
    repoInterrupt(repo);
    delete appRepos[repo.key];
  }
  function repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
    var appRepos = repos[app.name];
    if (!appRepos) {
      appRepos = {};
      repos[app.name] = appRepos;
    }
    var repo = appRepos[repoInfo.toURLString()];
    if (repo) {
      fatal("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.");
    }
    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
    appRepos[repoInfo.toURLString()] = repo;
    return repo;
  }
  function repoManagerForceRestClient(forceRestClient2) {
    useRestClient = forceRestClient2;
  }
  var Database$1 = function() {
    function Database2(_repoInternal, app) {
      this._repoInternal = _repoInternal;
      this.app = app;
      this["type"] = "database";
      this._instanceStarted = false;
    }
    Object.defineProperty(Database2.prototype, "_repo", {
      get: function() {
        if (!this._instanceStarted) {
          repoStart(this._repoInternal, this.app.options.appId, this.app.options["databaseAuthVariableOverride"]);
          this._instanceStarted = true;
        }
        return this._repoInternal;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Database2.prototype, "_root", {
      get: function() {
        if (!this._rootInternal) {
          this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());
        }
        return this._rootInternal;
      },
      enumerable: false,
      configurable: true
    });
    Database2.prototype._delete = function() {
      if (this._rootInternal !== null) {
        repoManagerDeleteRepo(this._repo, this.app.name);
        this._repoInternal = null;
        this._rootInternal = null;
      }
      return Promise.resolve();
    };
    Database2.prototype._checkNotDeleted = function(apiName) {
      if (this._rootInternal === null) {
        fatal("Cannot call " + apiName + " on a deleted database.");
      }
    };
    return Database2;
  }();
  function connectDatabaseEmulator(db, host, port, options) {
    if (options === void 0) {
      options = {};
    }
    db = getModularInstance(db);
    db._checkNotDeleted("useEmulator");
    if (db._instanceStarted) {
      fatal("Cannot call useEmulator() after instance has already been initialized.");
    }
    var repo = db._repoInternal;
    var tokenProvider = void 0;
    if (repo.repoInfo_.nodeAdmin) {
      if (options.mockUserToken) {
        fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
      }
      tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
    } else if (options.mockUserToken) {
      var token = typeof options.mockUserToken === "string" ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);
      tokenProvider = new EmulatorTokenProvider(token);
    }
    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
  }
  function goOffline(db) {
    db = getModularInstance(db);
    db._checkNotDeleted("goOffline");
    repoInterrupt(db._repo);
  }
  function goOnline(db) {
    db = getModularInstance(db);
    db._checkNotDeleted("goOnline");
    repoResume(db._repo);
  }
  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var SERVER_TIMESTAMP = {
    ".sv": "timestamp"
  };
  function serverTimestamp() {
    return SERVER_TIMESTAMP;
  }
  function increment(delta) {
    return {
      ".sv": {
        increment: delta
      }
    };
  }
  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TransactionResult$1 = function() {
    function TransactionResult2(committed, snapshot) {
      this.committed = committed;
      this.snapshot = snapshot;
    }
    TransactionResult2.prototype.toJSON = function() {
      return {committed: this.committed, snapshot: this.snapshot.toJSON()};
    };
    return TransactionResult2;
  }();
  function runTransaction(ref2, transactionUpdate, options) {
    var _a;
    ref2 = getModularInstance(ref2);
    validateWritablePath("Reference.transaction", ref2._path);
    if (ref2.key === ".length" || ref2.key === ".keys") {
      throw "Reference.transaction failed: " + ref2.key + " is a read-only object.";
    }
    var applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;
    var deferred = new Deferred();
    var promiseComplete = function(error2, committed, node) {
      var dataSnapshot = null;
      if (error2) {
        deferred.reject(error2);
      } else {
        dataSnapshot = new DataSnapshot$1(node, new ReferenceImpl(ref2._repo, ref2._path), PRIORITY_INDEX);
        deferred.resolve(new TransactionResult$1(committed, dataSnapshot));
      }
    };
    var unwatcher = onValue(ref2, function() {
    });
    repoStartTransaction(ref2._repo, ref2._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);
    return deferred.promise;
  }
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var OnDisconnect = function() {
    function OnDisconnect2(_delegate) {
      this._delegate = _delegate;
    }
    OnDisconnect2.prototype.cancel = function(onComplete) {
      validateArgCount("OnDisconnect.cancel", 0, 1, arguments.length);
      validateCallback("OnDisconnect.cancel", "onComplete", onComplete, true);
      var result = this._delegate.cancel();
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    OnDisconnect2.prototype.remove = function(onComplete) {
      validateArgCount("OnDisconnect.remove", 0, 1, arguments.length);
      validateCallback("OnDisconnect.remove", "onComplete", onComplete, true);
      var result = this._delegate.remove();
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    OnDisconnect2.prototype.set = function(value, onComplete) {
      validateArgCount("OnDisconnect.set", 1, 2, arguments.length);
      validateCallback("OnDisconnect.set", "onComplete", onComplete, true);
      var result = this._delegate.set(value);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    OnDisconnect2.prototype.setWithPriority = function(value, priority, onComplete) {
      validateArgCount("OnDisconnect.setWithPriority", 2, 3, arguments.length);
      validateCallback("OnDisconnect.setWithPriority", "onComplete", onComplete, true);
      var result = this._delegate.setWithPriority(value, priority);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    OnDisconnect2.prototype.update = function(objectToMerge, onComplete) {
      validateArgCount("OnDisconnect.update", 1, 2, arguments.length);
      if (Array.isArray(objectToMerge)) {
        var newObjectToMerge = {};
        for (var i = 0; i < objectToMerge.length; ++i) {
          newObjectToMerge["" + i] = objectToMerge[i];
        }
        objectToMerge = newObjectToMerge;
        warn("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
      }
      validateCallback("OnDisconnect.update", "onComplete", onComplete, true);
      var result = this._delegate.update(objectToMerge);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    return OnDisconnect2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var TransactionResult = function() {
    function TransactionResult2(committed, snapshot) {
      this.committed = committed;
      this.snapshot = snapshot;
    }
    TransactionResult2.prototype.toJSON = function() {
      validateArgCount("TransactionResult.toJSON", 0, 1, arguments.length);
      return {committed: this.committed, snapshot: this.snapshot.toJSON()};
    };
    return TransactionResult2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DataSnapshot = function() {
    function DataSnapshot2(_database, _delegate) {
      this._database = _database;
      this._delegate = _delegate;
    }
    DataSnapshot2.prototype.val = function() {
      validateArgCount("DataSnapshot.val", 0, 0, arguments.length);
      return this._delegate.val();
    };
    DataSnapshot2.prototype.exportVal = function() {
      validateArgCount("DataSnapshot.exportVal", 0, 0, arguments.length);
      return this._delegate.exportVal();
    };
    DataSnapshot2.prototype.toJSON = function() {
      validateArgCount("DataSnapshot.toJSON", 0, 1, arguments.length);
      return this._delegate.toJSON();
    };
    DataSnapshot2.prototype.exists = function() {
      validateArgCount("DataSnapshot.exists", 0, 0, arguments.length);
      return this._delegate.exists();
    };
    DataSnapshot2.prototype.child = function(path) {
      validateArgCount("DataSnapshot.child", 0, 1, arguments.length);
      path = String(path);
      validatePathString("DataSnapshot.child", "path", path, false);
      return new DataSnapshot2(this._database, this._delegate.child(path));
    };
    DataSnapshot2.prototype.hasChild = function(path) {
      validateArgCount("DataSnapshot.hasChild", 1, 1, arguments.length);
      validatePathString("DataSnapshot.hasChild", "path", path, false);
      return this._delegate.hasChild(path);
    };
    DataSnapshot2.prototype.getPriority = function() {
      validateArgCount("DataSnapshot.getPriority", 0, 0, arguments.length);
      return this._delegate.priority;
    };
    DataSnapshot2.prototype.forEach = function(action) {
      var _this = this;
      validateArgCount("DataSnapshot.forEach", 1, 1, arguments.length);
      validateCallback("DataSnapshot.forEach", "action", action, false);
      return this._delegate.forEach(function(expDataSnapshot) {
        return action(new DataSnapshot2(_this._database, expDataSnapshot));
      });
    };
    DataSnapshot2.prototype.hasChildren = function() {
      validateArgCount("DataSnapshot.hasChildren", 0, 0, arguments.length);
      return this._delegate.hasChildren();
    };
    Object.defineProperty(DataSnapshot2.prototype, "key", {
      get: function() {
        return this._delegate.key;
      },
      enumerable: false,
      configurable: true
    });
    DataSnapshot2.prototype.numChildren = function() {
      validateArgCount("DataSnapshot.numChildren", 0, 0, arguments.length);
      return this._delegate.size;
    };
    DataSnapshot2.prototype.getRef = function() {
      validateArgCount("DataSnapshot.ref", 0, 0, arguments.length);
      return new Reference(this._database, this._delegate.ref);
    };
    Object.defineProperty(DataSnapshot2.prototype, "ref", {
      get: function() {
        return this.getRef();
      },
      enumerable: false,
      configurable: true
    });
    return DataSnapshot2;
  }();
  var Query = function() {
    function Query2(database, _delegate) {
      this.database = database;
      this._delegate = _delegate;
    }
    Query2.prototype.on = function(eventType, callback, cancelCallbackOrContext, context) {
      var _this = this;
      var _a;
      validateArgCount("Query.on", 2, 4, arguments.length);
      validateCallback("Query.on", "callback", callback, false);
      var ret = Query2.getCancelAndContextArgs_("Query.on", cancelCallbackOrContext, context);
      var valueCallback = function(expSnapshot, previousChildName) {
        callback.call(ret.context, new DataSnapshot(_this.database, expSnapshot), previousChildName);
      };
      valueCallback.userCallback = callback;
      valueCallback.context = ret.context;
      var cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);
      switch (eventType) {
        case "value":
          onValue(this._delegate, valueCallback, cancelCallback);
          return callback;
        case "child_added":
          onChildAdded(this._delegate, valueCallback, cancelCallback);
          return callback;
        case "child_removed":
          onChildRemoved(this._delegate, valueCallback, cancelCallback);
          return callback;
        case "child_changed":
          onChildChanged(this._delegate, valueCallback, cancelCallback);
          return callback;
        case "child_moved":
          onChildMoved(this._delegate, valueCallback, cancelCallback);
          return callback;
        default:
          throw new Error(errorPrefix("Query.on", "eventType") + 'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".');
      }
    };
    Query2.prototype.off = function(eventType, callback, context) {
      validateArgCount("Query.off", 0, 3, arguments.length);
      validateEventType("Query.off", eventType, true);
      validateCallback("Query.off", "callback", callback, true);
      validateContextObject("Query.off", "context", context, true);
      if (callback) {
        var valueCallback = function() {
        };
        valueCallback.userCallback = callback;
        valueCallback.context = context;
        off(this._delegate, eventType, valueCallback);
      } else {
        off(this._delegate, eventType);
      }
    };
    Query2.prototype.get = function() {
      var _this = this;
      return get(this._delegate).then(function(expSnapshot) {
        return new DataSnapshot(_this.database, expSnapshot);
      });
    };
    Query2.prototype.once = function(eventType, callback, failureCallbackOrContext, context) {
      var _this = this;
      validateArgCount("Query.once", 1, 4, arguments.length);
      validateCallback("Query.once", "callback", callback, true);
      var ret = Query2.getCancelAndContextArgs_("Query.once", failureCallbackOrContext, context);
      var deferred = new Deferred();
      var valueCallback = function(expSnapshot, previousChildName) {
        var result = new DataSnapshot(_this.database, expSnapshot);
        if (callback) {
          callback.call(ret.context, result, previousChildName);
        }
        deferred.resolve(result);
      };
      valueCallback.userCallback = callback;
      valueCallback.context = ret.context;
      var cancelCallback = function(error2) {
        if (ret.cancel) {
          ret.cancel.call(ret.context, error2);
        }
        deferred.reject(error2);
      };
      switch (eventType) {
        case "value":
          onValue(this._delegate, valueCallback, cancelCallback, {
            onlyOnce: true
          });
          break;
        case "child_added":
          onChildAdded(this._delegate, valueCallback, cancelCallback, {
            onlyOnce: true
          });
          break;
        case "child_removed":
          onChildRemoved(this._delegate, valueCallback, cancelCallback, {
            onlyOnce: true
          });
          break;
        case "child_changed":
          onChildChanged(this._delegate, valueCallback, cancelCallback, {
            onlyOnce: true
          });
          break;
        case "child_moved":
          onChildMoved(this._delegate, valueCallback, cancelCallback, {
            onlyOnce: true
          });
          break;
        default:
          throw new Error(errorPrefix("Query.once", "eventType") + 'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".');
      }
      return deferred.promise;
    };
    Query2.prototype.limitToFirst = function(limit) {
      validateArgCount("Query.limitToFirst", 1, 1, arguments.length);
      return new Query2(this.database, query(this._delegate, limitToFirst(limit)));
    };
    Query2.prototype.limitToLast = function(limit) {
      validateArgCount("Query.limitToLast", 1, 1, arguments.length);
      return new Query2(this.database, query(this._delegate, limitToLast(limit)));
    };
    Query2.prototype.orderByChild = function(path) {
      validateArgCount("Query.orderByChild", 1, 1, arguments.length);
      return new Query2(this.database, query(this._delegate, orderByChild(path)));
    };
    Query2.prototype.orderByKey = function() {
      validateArgCount("Query.orderByKey", 0, 0, arguments.length);
      return new Query2(this.database, query(this._delegate, orderByKey()));
    };
    Query2.prototype.orderByPriority = function() {
      validateArgCount("Query.orderByPriority", 0, 0, arguments.length);
      return new Query2(this.database, query(this._delegate, orderByPriority()));
    };
    Query2.prototype.orderByValue = function() {
      validateArgCount("Query.orderByValue", 0, 0, arguments.length);
      return new Query2(this.database, query(this._delegate, orderByValue()));
    };
    Query2.prototype.startAt = function(value, name2) {
      if (value === void 0) {
        value = null;
      }
      validateArgCount("Query.startAt", 0, 2, arguments.length);
      return new Query2(this.database, query(this._delegate, startAt(value, name2)));
    };
    Query2.prototype.startAfter = function(value, name2) {
      if (value === void 0) {
        value = null;
      }
      validateArgCount("Query.startAfter", 0, 2, arguments.length);
      return new Query2(this.database, query(this._delegate, startAfter(value, name2)));
    };
    Query2.prototype.endAt = function(value, name2) {
      if (value === void 0) {
        value = null;
      }
      validateArgCount("Query.endAt", 0, 2, arguments.length);
      return new Query2(this.database, query(this._delegate, endAt(value, name2)));
    };
    Query2.prototype.endBefore = function(value, name2) {
      if (value === void 0) {
        value = null;
      }
      validateArgCount("Query.endBefore", 0, 2, arguments.length);
      return new Query2(this.database, query(this._delegate, endBefore(value, name2)));
    };
    Query2.prototype.equalTo = function(value, name2) {
      validateArgCount("Query.equalTo", 1, 2, arguments.length);
      return new Query2(this.database, query(this._delegate, equalTo(value, name2)));
    };
    Query2.prototype.toString = function() {
      validateArgCount("Query.toString", 0, 0, arguments.length);
      return this._delegate.toString();
    };
    Query2.prototype.toJSON = function() {
      validateArgCount("Query.toJSON", 0, 1, arguments.length);
      return this._delegate.toJSON();
    };
    Query2.prototype.isEqual = function(other) {
      validateArgCount("Query.isEqual", 1, 1, arguments.length);
      if (!(other instanceof Query2)) {
        var error2 = "Query.isEqual failed: First argument must be an instance of firebase.database.Query.";
        throw new Error(error2);
      }
      return this._delegate.isEqual(other._delegate);
    };
    Query2.getCancelAndContextArgs_ = function(fnName, cancelOrContext, context) {
      var ret = {cancel: void 0, context: void 0};
      if (cancelOrContext && context) {
        ret.cancel = cancelOrContext;
        validateCallback(fnName, "cancel", ret.cancel, true);
        ret.context = context;
        validateContextObject(fnName, "context", ret.context, true);
      } else if (cancelOrContext) {
        if (typeof cancelOrContext === "object" && cancelOrContext !== null) {
          ret.context = cancelOrContext;
        } else if (typeof cancelOrContext === "function") {
          ret.cancel = cancelOrContext;
        } else {
          throw new Error(errorPrefix(fnName, "cancelOrContext") + " must either be a cancel callback or a context object.");
        }
      }
      return ret;
    };
    Object.defineProperty(Query2.prototype, "ref", {
      get: function() {
        return new Reference(this.database, new ReferenceImpl(this._delegate._repo, this._delegate._path));
      },
      enumerable: false,
      configurable: true
    });
    return Query2;
  }();
  var Reference = function(_super) {
    __extends(Reference2, _super);
    function Reference2(database, _delegate) {
      var _this = _super.call(this, database, new QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)) || this;
      _this.database = database;
      _this._delegate = _delegate;
      return _this;
    }
    Reference2.prototype.getKey = function() {
      validateArgCount("Reference.key", 0, 0, arguments.length);
      return this._delegate.key;
    };
    Reference2.prototype.child = function(pathString) {
      validateArgCount("Reference.child", 1, 1, arguments.length);
      if (typeof pathString === "number") {
        pathString = String(pathString);
      }
      return new Reference2(this.database, child(this._delegate, pathString));
    };
    Reference2.prototype.getParent = function() {
      validateArgCount("Reference.parent", 0, 0, arguments.length);
      var parent = this._delegate.parent;
      return parent ? new Reference2(this.database, parent) : null;
    };
    Reference2.prototype.getRoot = function() {
      validateArgCount("Reference.root", 0, 0, arguments.length);
      return new Reference2(this.database, this._delegate.root);
    };
    Reference2.prototype.set = function(newVal, onComplete) {
      validateArgCount("Reference.set", 1, 2, arguments.length);
      validateCallback("Reference.set", "onComplete", onComplete, true);
      var result = set(this._delegate, newVal);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    Reference2.prototype.update = function(values, onComplete) {
      validateArgCount("Reference.update", 1, 2, arguments.length);
      if (Array.isArray(values)) {
        var newObjectToMerge = {};
        for (var i = 0; i < values.length; ++i) {
          newObjectToMerge["" + i] = values[i];
        }
        values = newObjectToMerge;
        warn("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
      }
      validateWritablePath("Reference.update", this._delegate._path);
      validateCallback("Reference.update", "onComplete", onComplete, true);
      var result = update(this._delegate, values);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    Reference2.prototype.setWithPriority = function(newVal, newPriority, onComplete) {
      validateArgCount("Reference.setWithPriority", 2, 3, arguments.length);
      validateCallback("Reference.setWithPriority", "onComplete", onComplete, true);
      var result = setWithPriority(this._delegate, newVal, newPriority);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    Reference2.prototype.remove = function(onComplete) {
      validateArgCount("Reference.remove", 0, 1, arguments.length);
      validateCallback("Reference.remove", "onComplete", onComplete, true);
      var result = remove(this._delegate);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    Reference2.prototype.transaction = function(transactionUpdate, onComplete, applyLocally) {
      var _this = this;
      validateArgCount("Reference.transaction", 1, 3, arguments.length);
      validateCallback("Reference.transaction", "transactionUpdate", transactionUpdate, false);
      validateCallback("Reference.transaction", "onComplete", onComplete, true);
      validateBoolean("Reference.transaction", "applyLocally", applyLocally, true);
      var result = runTransaction(this._delegate, transactionUpdate, {
        applyLocally
      }).then(function(transactionResult) {
        return new TransactionResult(transactionResult.committed, new DataSnapshot(_this.database, transactionResult.snapshot));
      });
      if (onComplete) {
        result.then(function(transactionResult) {
          return onComplete(null, transactionResult.committed, transactionResult.snapshot);
        }, function(error2) {
          return onComplete(error2, false, null);
        });
      }
      return result;
    };
    Reference2.prototype.setPriority = function(priority, onComplete) {
      validateArgCount("Reference.setPriority", 1, 2, arguments.length);
      validateCallback("Reference.setPriority", "onComplete", onComplete, true);
      var result = setPriority(this._delegate, priority);
      if (onComplete) {
        result.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      return result;
    };
    Reference2.prototype.push = function(value, onComplete) {
      var _this = this;
      validateArgCount("Reference.push", 0, 2, arguments.length);
      validateCallback("Reference.push", "onComplete", onComplete, true);
      var expPromise = push(this._delegate, value);
      var promise = expPromise.then(function(expRef) {
        return new Reference2(_this.database, expRef);
      });
      if (onComplete) {
        promise.then(function() {
          return onComplete(null);
        }, function(error2) {
          return onComplete(error2);
        });
      }
      var result = new Reference2(this.database, expPromise);
      result.then = promise.then.bind(promise);
      result.catch = promise.catch.bind(promise, void 0);
      return result;
    };
    Reference2.prototype.onDisconnect = function() {
      validateWritablePath("Reference.onDisconnect", this._delegate._path);
      return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));
    };
    Object.defineProperty(Reference2.prototype, "key", {
      get: function() {
        return this.getKey();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Reference2.prototype, "parent", {
      get: function() {
        return this.getParent();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Reference2.prototype, "root", {
      get: function() {
        return this.getRoot();
      },
      enumerable: false,
      configurable: true
    });
    return Reference2;
  }(Query);
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var Database = function() {
    function Database2(_delegate, app) {
      var _this = this;
      this._delegate = _delegate;
      this.app = app;
      this.INTERNAL = {
        delete: function() {
          return _this._delegate._delete();
        }
      };
    }
    Database2.prototype.useEmulator = function(host, port, options) {
      if (options === void 0) {
        options = {};
      }
      connectDatabaseEmulator(this._delegate, host, port, options);
    };
    Database2.prototype.ref = function(path) {
      validateArgCount("database.ref", 0, 1, arguments.length);
      if (path instanceof Reference) {
        var childRef = refFromURL(this._delegate, path.toString());
        return new Reference(this, childRef);
      } else {
        var childRef = ref(this._delegate, path);
        return new Reference(this, childRef);
      }
    };
    Database2.prototype.refFromURL = function(url) {
      var apiName = "database.refFromURL";
      validateArgCount(apiName, 1, 1, arguments.length);
      var childRef = refFromURL(this._delegate, url);
      return new Reference(this, childRef);
    };
    Database2.prototype.goOffline = function() {
      validateArgCount("database.goOffline", 0, 0, arguments.length);
      return goOffline(this._delegate);
    };
    Database2.prototype.goOnline = function() {
      validateArgCount("database.goOnline", 0, 0, arguments.length);
      return goOnline(this._delegate);
    };
    Database2.ServerValue = {
      TIMESTAMP: serverTimestamp(),
      increment: function(delta) {
        return increment(delta);
      }
    };
    return Database2;
  }();
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var forceLongPolling = function() {
    WebSocketConnection.forceDisallow();
    BrowserPollConnection.forceAllow();
  };
  var forceWebSockets = function() {
    BrowserPollConnection.forceDisallow();
  };
  var isWebSocketsAvailable = function() {
    return WebSocketConnection["isAvailable"]();
  };
  var setSecurityDebugCallback = function(ref2, callback) {
    var connection = ref2._delegate._repo.persistentConnection_;
    connection.securityDebugCallback_ = callback;
  };
  var stats = function(ref2, showDelta) {
    repoStats(ref2._delegate._repo, showDelta);
  };
  var statsIncrementCounter = function(ref2, metric) {
    repoStatsIncrementCounter(ref2._delegate._repo, metric);
  };
  var dataUpdateCount = function(ref2) {
    return ref2._delegate._repo.dataUpdateCount;
  };
  var interceptServerData = function(ref2, callback) {
    return repoInterceptServerData(ref2._delegate._repo, callback);
  };
  function initStandalone(_a) {
    var app = _a.app, url = _a.url, version2 = _a.version, customAuthImpl = _a.customAuthImpl, namespace = _a.namespace, _b = _a.nodeAdmin, nodeAdmin = _b === void 0 ? false : _b;
    setSDKVersion(version2);
    var authProvider = new Provider("auth-internal", new ComponentContainer("database-standalone"));
    authProvider.setComponent(new Component("auth-internal", function() {
      return customAuthImpl;
    }, "PRIVATE"));
    return {
      instance: new Database(repoManagerDatabaseFromApp(app, authProvider, void 0, url, nodeAdmin), app),
      namespace
    };
  }
  var INTERNAL = Object.freeze({
    __proto__: null,
    forceLongPolling,
    forceWebSockets,
    isWebSocketsAvailable,
    setSecurityDebugCallback,
    stats,
    statsIncrementCounter,
    dataUpdateCount,
    interceptServerData,
    initStandalone
  });
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var DataConnection = PersistentConnection;
  PersistentConnection.prototype.simpleListen = function(pathString, onComplete) {
    this.sendRequest("q", {p: pathString}, onComplete);
  };
  PersistentConnection.prototype.echo = function(data, onEcho) {
    this.sendRequest("echo", {d: data}, onEcho);
  };
  var RealTimeConnection = Connection;
  var hijackHash = function(newHash) {
    var oldPut = PersistentConnection.prototype.put;
    PersistentConnection.prototype.put = function(pathString, data, onComplete, hash) {
      if (hash !== void 0) {
        hash = newHash();
      }
      oldPut.call(this, pathString, data, onComplete, hash);
    };
    return function() {
      PersistentConnection.prototype.put = oldPut;
    };
  };
  var ConnectionTarget = RepoInfo;
  var queryIdentifier = function(query2) {
    return query2._delegate._queryIdentifier;
  };
  var forceRestClient = function(forceRestClient2) {
    repoManagerForceRestClient(forceRestClient2);
  };
  var TEST_ACCESS = Object.freeze({
    __proto__: null,
    DataConnection,
    RealTimeConnection,
    hijackHash,
    ConnectionTarget,
    queryIdentifier,
    forceRestClient
  });
  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var ServerValue = Database.ServerValue;
  function registerDatabase(instance) {
    setSDKVersion(instance.SDK_VERSION);
    var namespace = instance.INTERNAL.registerComponent(new Component("database", function(container, _a) {
      var url = _a.instanceIdentifier;
      var app = container.getProvider("app").getImmediate();
      var authProvider = container.getProvider("auth-internal");
      var appCheckProvider = container.getProvider("app-check-internal");
      return new Database(repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url), app);
    }, "PUBLIC").setServiceProps({
      Reference,
      Query,
      Database,
      DataSnapshot,
      enableLogging,
      INTERNAL,
      ServerValue,
      TEST_ACCESS
    }).setMultipleInstances(true));
    instance.registerVersion(name, version);
    if (isNodeSdk()) {
      module.exports = namespace;
    }
  }
  registerDatabase(index_esm_default);
});

// node_modules/@firebase/util/dist/index.esm.js
var CONSTANTS = {
  NODE_CLIENT: false,
  NODE_ADMIN: false,
  SDK_VERSION: "${JSCORE_VERSION}"
};
var assert = function(assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
var assertionError = function(message) {
  return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
};
var base64Decode = function(str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error("base64Decode failed: ", e);
  }
  return null;
};
function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
function jsonEval(str) {
  return JSON.parse(str);
}
function stringify(data) {
  return JSON.stringify(data);
}
var decode = function(token) {
  var header = {}, claims = {}, data = {}, signature = "";
  try {
    var parts = token.split(".");
    header = jsonEval(base64Decode(parts[0]) || "");
    claims = jsonEval(base64Decode(parts[1]) || "");
    signature = parts[2];
    data = claims["d"] || {};
    delete claims["d"];
  } catch (e) {
  }
  return {
    header,
    claims,
    data,
    signature
  };
};
var isValidFormat = function(token) {
  var decoded = decode(token), claims = decoded.claims;
  return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
};
var isAdmin = function(token) {
  var claims = decode(token).claims;
  return typeof claims === "object" && claims["admin"] === true;
};
function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return void 0;
  }
}
function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }
  return true;
}
function map(obj, fn, contextObj) {
  var res = {};
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }
  return res;
}
function querystring(querystringParams) {
  var params = [];
  var _loop_1 = function(key2, value2) {
    if (Array.isArray(value2)) {
      value2.forEach(function(arrayVal) {
        params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(value2));
    }
  };
  for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
    var _b = _a[_i], key = _b[0], value = _b[1];
    _loop_1(key, value);
  }
  return params.length ? "&" + params.join("&") : "";
}
var validateArgCount = function(fnName, minCount, maxCount, argCount) {
  var argError;
  if (argCount < minCount) {
    argError = "at least " + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? "none" : "no more than " + maxCount;
  }
  if (argError) {
    var error = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
    throw new Error(error);
  }
};
function errorPrefix(fnName, argName) {
  return fnName + " failed: " + argName + " argument ";
}
function validateCallback(fnName, argumentName, callback, optional) {
  if (optional && !callback) {
    return;
  }
  if (typeof callback !== "function") {
    throw new Error(errorPrefix(fnName, argumentName) + "must be a valid function.");
  }
}
function validateContextObject(fnName, argumentName, context, optional) {
  if (optional && !context) {
    return;
  }
  if (typeof context !== "object" || context === null) {
    throw new Error(errorPrefix(fnName, argumentName) + "must be a valid context object.");
  }
}
var stringToByteArray = function(str) {
  var out = [];
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c >= 55296 && c <= 56319) {
      var high = c - 55296;
      i++;
      assert(i < str.length, "Surrogate pair missing trail surrogate.");
      var low = str.charCodeAt(i) - 56320;
      c = 65536 + (high << 10) + low;
    }
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
var stringLength = function(str) {
  var p = 0;
  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 55296 && c <= 56319) {
      p += 4;
      i++;
    } else {
      p += 3;
    }
  }
  return p;
};

// node_modules/firebase/database/dist/index.esm.js
var import_database = __toModule(require_index_esm());
//# sourceMappingURL=firebase_database.js.map
